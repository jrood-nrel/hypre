
/*** DO NOT EDIT THIS FILE DIRECTLY (use 'headers' to generate) ***/


#ifndef nalu_hypre_SSTRUCT_MV_HEADER
#define nalu_hypre_SSTRUCT_MV_HEADER

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "NALU_HYPRE_sstruct_mv.h"
#include "_nalu_hypre_utilities.h"
#include "_nalu_hypre_struct_mv.h"
#include "_nalu_hypre_IJ_mv.h"

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_SStructGrid structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_SSTRUCT_GRID_HEADER
#define nalu_hypre_SSTRUCT_GRID_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_SStructGrid:
 *
 * NOTE: Since variables may be replicated across different processes,
 * a separate set of "interface grids" is retained so that data can be
 * migrated onto and off of the internal (non-replicated) grids.
 *--------------------------------------------------------------------------*/

typedef NALU_HYPRE_Int nalu_hypre_SStructVariable;

typedef struct
{
   NALU_HYPRE_SStructVariable  type;
   NALU_HYPRE_Int              rank;     /* local rank */
   NALU_HYPRE_Int              proc;

} nalu_hypre_SStructUVar;

typedef struct
{
   NALU_HYPRE_Int              part;
   nalu_hypre_Index            cell;
   NALU_HYPRE_Int              nuvars;
   nalu_hypre_SStructUVar     *uvars;

} nalu_hypre_SStructUCVar;

typedef struct
{
   MPI_Comm                comm;             /* TODO: use different comms */
   NALU_HYPRE_Int               ndim;
   NALU_HYPRE_Int               nvars;            /* number of variables */
   NALU_HYPRE_SStructVariable  *vartypes;         /* types of variables */
   nalu_hypre_StructGrid       *sgrids[8];        /* struct grids for each vartype */
   nalu_hypre_BoxArray         *iboxarrays[8];    /* interface boxes */

   nalu_hypre_BoxArray         *pneighbors;
   nalu_hypre_Index            *pnbor_offsets;

   NALU_HYPRE_Int               local_size;       /* Number of variables locally */
   NALU_HYPRE_BigInt            global_size;      /* Total number of variables */

   nalu_hypre_Index             periodic;         /* Indicates if pgrid is periodic */

   /* GEC0902 additions for ghost expansion of boxes */

   NALU_HYPRE_Int               ghlocal_size;     /* Number of vars including ghosts */

   NALU_HYPRE_Int               cell_sgrid_done;  /* =1 implies cell grid already assembled */
} nalu_hypre_SStructPGrid;

typedef struct
{
   nalu_hypre_Box    box;
   NALU_HYPRE_Int    part;
   nalu_hypre_Index  ilower; /* box ilower, but on the neighbor index-space */
   nalu_hypre_Index  coord;  /* lives on local index-space */
   nalu_hypre_Index  dir;    /* lives on local index-space */

} nalu_hypre_SStructNeighbor;

enum nalu_hypre_SStructBoxManInfoType
{
   nalu_hypre_SSTRUCT_BOXMAN_INFO_DEFAULT  = 0,
   nalu_hypre_SSTRUCT_BOXMAN_INFO_NEIGHBOR = 1
};

typedef struct
{
   NALU_HYPRE_Int  type;
   NALU_HYPRE_BigInt offset;
   NALU_HYPRE_BigInt ghoffset;

} nalu_hypre_SStructBoxManInfo;

typedef struct
{
   NALU_HYPRE_Int    type;
   NALU_HYPRE_BigInt offset;   /* minimum offset for this box */
   NALU_HYPRE_BigInt ghoffset; /* minimum offset ghost for this box */
   NALU_HYPRE_Int    proc;     /* redundant with the proc in the entry, but
                             makes some coding easier */
   NALU_HYPRE_Int    boxnum;   /* this is different from the entry id */
   NALU_HYPRE_Int    part;     /* part the box lives on */
   nalu_hypre_Index  ilower;   /* box ilower, but on the neighbor index-space */
   nalu_hypre_Index  coord;    /* lives on local index-space */
   nalu_hypre_Index  dir;      /* lives on local index-space */
   nalu_hypre_Index  stride;   /* lives on local index-space */
   nalu_hypre_Index  ghstride; /* the ghost equivalent of strides */

} nalu_hypre_SStructBoxManNborInfo;

typedef struct
{
   nalu_hypre_CommInfo  *comm_info;
   NALU_HYPRE_Int        send_part;
   NALU_HYPRE_Int        recv_part;
   NALU_HYPRE_Int        send_var;
   NALU_HYPRE_Int        recv_var;

} nalu_hypre_SStructCommInfo;

typedef struct nalu_hypre_SStructGrid_struct
{
   MPI_Comm                   comm;
   NALU_HYPRE_Int                  ndim;
   NALU_HYPRE_Int                  nparts;

   /* s-variable info */
   nalu_hypre_SStructPGrid       **pgrids;

   /* neighbor info */
   NALU_HYPRE_Int                 *nneighbors;
   nalu_hypre_SStructNeighbor    **neighbors;
   nalu_hypre_Index              **nbor_offsets;
   NALU_HYPRE_Int                **nvneighbors;
   nalu_hypre_SStructNeighbor   ***vneighbors;
   nalu_hypre_SStructCommInfo    **vnbor_comm_info; /* for updating shared data */
   NALU_HYPRE_Int                  vnbor_ncomms;

   /* u-variables info: During construction, array entries are consecutive.
    * After 'Assemble', entries are referenced via local cell rank. */
   NALU_HYPRE_Int                  nucvars;
   nalu_hypre_SStructUCVar       **ucvars;

   /* info for fem-based user input (for each part) */
   NALU_HYPRE_Int                 *fem_nvars;
   NALU_HYPRE_Int                **fem_vars;
   nalu_hypre_Index              **fem_offsets;

   /* info for mapping (part, index, var) --> rank */
   nalu_hypre_BoxManager        ***boxmans;      /* manager for each part, var */
   nalu_hypre_BoxManager        ***nbor_boxmans; /* manager for each part, var */

   NALU_HYPRE_BigInt               start_rank;

   NALU_HYPRE_Int                  local_size;  /* Number of variables locally */
   NALU_HYPRE_BigInt               global_size; /* Total number of variables */

   NALU_HYPRE_Int                  ref_count;

   /* GEC0902 additions for ghost expansion of boxes */

   NALU_HYPRE_Int               ghlocal_size;  /* GEC0902 Number of vars including ghosts */
   NALU_HYPRE_BigInt            ghstart_rank;  /* GEC0902 start rank including ghosts  */
   NALU_HYPRE_Int               num_ghost[2 * NALU_HYPRE_MAXDIM]; /* ghost layer size */

} nalu_hypre_SStructGrid;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructGrid
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructGridComm(grid)           ((grid) -> comm)
#define nalu_hypre_SStructGridNDim(grid)           ((grid) -> ndim)
#define nalu_hypre_SStructGridNParts(grid)         ((grid) -> nparts)
#define nalu_hypre_SStructGridPGrids(grid)         ((grid) -> pgrids)
#define nalu_hypre_SStructGridPGrid(grid, part)    ((grid) -> pgrids[part])
#define nalu_hypre_SStructGridNNeighbors(grid)     ((grid) -> nneighbors)
#define nalu_hypre_SStructGridNeighbors(grid)      ((grid) -> neighbors)
#define nalu_hypre_SStructGridNborOffsets(grid)    ((grid) -> nbor_offsets)
#define nalu_hypre_SStructGridNVNeighbors(grid)    ((grid) -> nvneighbors)
#define nalu_hypre_SStructGridVNeighbors(grid)     ((grid) -> vneighbors)
#define nalu_hypre_SStructGridVNborCommInfo(grid)  ((grid) -> vnbor_comm_info)
#define nalu_hypre_SStructGridVNborNComms(grid)    ((grid) -> vnbor_ncomms)
#define nalu_hypre_SStructGridNUCVars(grid)        ((grid) -> nucvars)
#define nalu_hypre_SStructGridUCVars(grid)         ((grid) -> ucvars)
#define nalu_hypre_SStructGridUCVar(grid, i)       ((grid) -> ucvars[i])

#define nalu_hypre_SStructGridFEMNVars(grid)       ((grid) -> fem_nvars)
#define nalu_hypre_SStructGridFEMVars(grid)        ((grid) -> fem_vars)
#define nalu_hypre_SStructGridFEMOffsets(grid)     ((grid) -> fem_offsets)
#define nalu_hypre_SStructGridFEMPNVars(grid, part)   ((grid) -> fem_nvars[part])
#define nalu_hypre_SStructGridFEMPVars(grid, part)    ((grid) -> fem_vars[part])
#define nalu_hypre_SStructGridFEMPOffsets(grid, part) ((grid) -> fem_offsets[part])

#define nalu_hypre_SStructGridBoxManagers(grid)           ((grid) -> boxmans)
#define nalu_hypre_SStructGridBoxManager(grid, part, var) ((grid) -> boxmans[part][var])

#define nalu_hypre_SStructGridNborBoxManagers(grid)           ((grid) -> nbor_boxmans)
#define nalu_hypre_SStructGridNborBoxManager(grid, part, var) ((grid) -> nbor_boxmans[part][var])

#define nalu_hypre_SStructGridStartRank(grid)      ((grid) -> start_rank)
#define nalu_hypre_SStructGridLocalSize(grid)      ((grid) -> local_size)
#define nalu_hypre_SStructGridGlobalSize(grid)     ((grid) -> global_size)
#define nalu_hypre_SStructGridRefCount(grid)       ((grid) -> ref_count)
#define nalu_hypre_SStructGridGhlocalSize(grid)    ((grid) -> ghlocal_size)
#define nalu_hypre_SStructGridGhstartRank(grid)    ((grid) -> ghstart_rank)
#define nalu_hypre_SStructGridNumGhost(grid)       ((grid) -> num_ghost)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructPGrid
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructPGridComm(pgrid)             ((pgrid) -> comm)
#define nalu_hypre_SStructPGridNDim(pgrid)             ((pgrid) -> ndim)
#define nalu_hypre_SStructPGridNVars(pgrid)            ((pgrid) -> nvars)
#define nalu_hypre_SStructPGridVarTypes(pgrid)         ((pgrid) -> vartypes)
#define nalu_hypre_SStructPGridVarType(pgrid, var)     ((pgrid) -> vartypes[var])
#define nalu_hypre_SStructPGridCellSGridDone(pgrid)    ((pgrid) -> cell_sgrid_done)

#define nalu_hypre_SStructPGridSGrids(pgrid)           ((pgrid) -> sgrids)
#define nalu_hypre_SStructPGridSGrid(pgrid, var) \
((pgrid) -> sgrids[nalu_hypre_SStructPGridVarType(pgrid, var)])
#define nalu_hypre_SStructPGridCellSGrid(pgrid) \
((pgrid) -> sgrids[NALU_HYPRE_SSTRUCT_VARIABLE_CELL])
#define nalu_hypre_SStructPGridVTSGrid(pgrid, vartype) ((pgrid) -> sgrids[vartype])

#define nalu_hypre_SStructPGridIBoxArrays(pgrid)       ((pgrid) -> iboxarrays)
#define nalu_hypre_SStructPGridIBoxArray(pgrid, var) \
((pgrid) -> iboxarrays[nalu_hypre_SStructPGridVarType(pgrid, var)])
#define nalu_hypre_SStructPGridCellIBoxArray(pgrid) \
((pgrid) -> iboxarrays[NALU_HYPRE_SSTRUCT_VARIABLE_CELL])
#define nalu_hypre_SStructPGridVTIBoxArray(pgrid, vartype) \
((pgrid) -> iboxarrays[vartype])

#define nalu_hypre_SStructPGridPNeighbors(pgrid)       ((pgrid) -> pneighbors)
#define nalu_hypre_SStructPGridPNborOffsets(pgrid)     ((pgrid) -> pnbor_offsets)
#define nalu_hypre_SStructPGridLocalSize(pgrid)        ((pgrid) -> local_size)
#define nalu_hypre_SStructPGridGlobalSize(pgrid)       ((pgrid) -> global_size)
#define nalu_hypre_SStructPGridPeriodic(pgrid)         ((pgrid) -> periodic)
#define nalu_hypre_SStructPGridGhlocalSize(pgrid)      ((pgrid) -> ghlocal_size)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructBoxManInfo
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructBoxManInfoType(info)            ((info) -> type)
#define nalu_hypre_SStructBoxManInfoOffset(info)          ((info) -> offset)
#define nalu_hypre_SStructBoxManInfoGhoffset(info)        ((info) -> ghoffset)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructBoxManInfo
 *--------------------------------------------------------------------------*/

/* Use the MapInfo macros to access the first three structure components */
#define nalu_hypre_SStructBoxManNborInfoProc(info)    ((info) -> proc)
#define nalu_hypre_SStructBoxManNborInfoBoxnum(info)  ((info) -> boxnum)
#define nalu_hypre_SStructBoxManNborInfoPart(info)    ((info) -> part)
#define nalu_hypre_SStructBoxManNborInfoILower(info)  ((info) -> ilower)
#define nalu_hypre_SStructBoxManNborInfoCoord(info)   ((info) -> coord)
#define nalu_hypre_SStructBoxManNborInfoDir(info)     ((info) -> dir)
#define nalu_hypre_SStructBoxManNborInfoStride(info)  ((info) -> stride)
#define nalu_hypre_SStructBoxManNborInfoGhstride(info)  ((info) -> ghstride)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructNeighbor
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructNeighborBox(neighbor)    &((neighbor) -> box)
#define nalu_hypre_SStructNeighborPart(neighbor)    ((neighbor) -> part)
#define nalu_hypre_SStructNeighborILower(neighbor)  ((neighbor) -> ilower)
#define nalu_hypre_SStructNeighborCoord(neighbor)   ((neighbor) -> coord)
#define nalu_hypre_SStructNeighborDir(neighbor)     ((neighbor) -> dir)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructCommInfo
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructCommInfoCommInfo(cinfo)  ((cinfo) -> comm_info)
#define nalu_hypre_SStructCommInfoSendPart(cinfo)  ((cinfo) -> send_part)
#define nalu_hypre_SStructCommInfoRecvPart(cinfo)  ((cinfo) -> recv_part)
#define nalu_hypre_SStructCommInfoSendVar(cinfo)   ((cinfo) -> send_var)
#define nalu_hypre_SStructCommInfoRecvVar(cinfo)   ((cinfo) -> recv_var)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructUCVar
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructUCVarPart(uc)     ((uc) -> part)
#define nalu_hypre_SStructUCVarCell(uc)     ((uc) -> cell)
#define nalu_hypre_SStructUCVarNUVars(uc)   ((uc) -> nuvars)
#define nalu_hypre_SStructUCVarUVars(uc)    ((uc) -> uvars)
#define nalu_hypre_SStructUCVarType(uc, i)  ((uc) -> uvars[i].type)
#define nalu_hypre_SStructUCVarRank(uc, i)  ((uc) -> uvars[i].rank)
#define nalu_hypre_SStructUCVarProc(uc, i)  ((uc) -> uvars[i].proc)

#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for nalu_hypre_SStructStencil data structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_SSTRUCT_STENCIL_HEADER
#define nalu_hypre_SSTRUCT_STENCIL_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_SStructStencil
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_SStructStencil_struct
{
   nalu_hypre_StructStencil  *sstencil;
   NALU_HYPRE_Int            *vars;

   NALU_HYPRE_Int             ref_count;

} nalu_hypre_SStructStencil;

/*--------------------------------------------------------------------------
 * Accessor functions for the nalu_hypre_SStructStencil structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructStencilSStencil(stencil)     ((stencil) -> sstencil)
#define nalu_hypre_SStructStencilVars(stencil)         ((stencil) -> vars)
#define nalu_hypre_SStructStencilVar(stencil, i)       ((stencil) -> vars[i])
#define nalu_hypre_SStructStencilRefCount(stencil)     ((stencil) -> ref_count)

#define nalu_hypre_SStructStencilShape(stencil) \
nalu_hypre_StructStencilShape( nalu_hypre_SStructStencilSStencil(stencil) )
#define nalu_hypre_SStructStencilSize(stencil) \
nalu_hypre_StructStencilSize( nalu_hypre_SStructStencilSStencil(stencil) )
#define nalu_hypre_SStructStencilNDim(stencil) \
nalu_hypre_StructStencilNDim( nalu_hypre_SStructStencilSStencil(stencil) )
#define nalu_hypre_SStructStencilEntry(stencil, i) \
nalu_hypre_StructStencilElement( nalu_hypre_SStructStencilSStencil(stencil), i )

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_SStructGraph structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_SSTRUCT_GRAPH_HEADER
#define nalu_hypre_SSTRUCT_GRAPH_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_SStructGraph:
 *--------------------------------------------------------------------------*/

typedef struct
{
   NALU_HYPRE_Int     part;
   nalu_hypre_Index   index;
   NALU_HYPRE_Int     var;
   NALU_HYPRE_Int     to_part;
   nalu_hypre_Index   to_index;
   NALU_HYPRE_Int     to_var;

} nalu_hypre_SStructGraphEntry;

typedef struct
{
   NALU_HYPRE_Int     to_part;
   nalu_hypre_Index   to_index;
   NALU_HYPRE_Int     to_var;
   NALU_HYPRE_Int     to_boxnum;      /* local box number */
   NALU_HYPRE_Int     to_proc;
   NALU_HYPRE_Int     to_rank;

} nalu_hypre_SStructUEntry;

typedef struct
{
   NALU_HYPRE_Int            part;
   nalu_hypre_Index          index;
   NALU_HYPRE_Int            var;
   NALU_HYPRE_Int            rank;
   NALU_HYPRE_Int            nUentries;
   nalu_hypre_SStructUEntry *Uentries;

} nalu_hypre_SStructUVEntry;

typedef struct nalu_hypre_SStructGraph_struct
{
   MPI_Comm                comm;
   NALU_HYPRE_Int               ndim;
   nalu_hypre_SStructGrid      *grid;
   nalu_hypre_SStructGrid      *domain_grid; /* same as grid by default */
   NALU_HYPRE_Int               nparts;
   nalu_hypre_SStructPGrid    **pgrids;
   nalu_hypre_SStructStencil ***stencils; /* each (part, var) has a stencil */

   /* info for fem-based user input */
   NALU_HYPRE_Int              *fem_nsparse;
   NALU_HYPRE_Int             **fem_sparse_i;
   NALU_HYPRE_Int             **fem_sparse_j;
   NALU_HYPRE_Int             **fem_entries;

   /* U-graph info: Entries are referenced via a local rank that comes from an
    * ordering of the local grid boxes with ghost zones added. */
   NALU_HYPRE_Int               nUventries; /* number of Uventries */
   NALU_HYPRE_Int              *iUventries; /* rank indexes into Uventries */
   nalu_hypre_SStructUVEntry  **Uventries;
   NALU_HYPRE_Int               Uvesize;    /* size of Uventries array */
   NALU_HYPRE_Int               Uemaxsize;  /* max size of Uentries */
   NALU_HYPRE_BigInt          **Uveoffsets; /* offsets for computing rank indexes */

   NALU_HYPRE_Int               ref_count;

   NALU_HYPRE_Int               type;    /* GEC0203 */

   /* These are created in GraphAddEntries() then deleted in GraphAssemble() */
   nalu_hypre_SStructGraphEntry **graph_entries;
   NALU_HYPRE_Int               n_graph_entries; /* number graph entries */
   NALU_HYPRE_Int               a_graph_entries; /* alloced graph entries */

} nalu_hypre_SStructGraph;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructGraph
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructGraphComm(graph)           ((graph) -> comm)
#define nalu_hypre_SStructGraphNDim(graph)           ((graph) -> ndim)
#define nalu_hypre_SStructGraphGrid(graph)           ((graph) -> grid)
#define nalu_hypre_SStructGraphDomainGrid(graph)     ((graph) -> domain_grid)
#define nalu_hypre_SStructGraphNParts(graph)         ((graph) -> nparts)
#define nalu_hypre_SStructGraphPGrids(graph) \
   nalu_hypre_SStructGridPGrids(nalu_hypre_SStructGraphGrid(graph))
#define nalu_hypre_SStructGraphPGrid(graph, p) \
   nalu_hypre_SStructGridPGrid(nalu_hypre_SStructGraphGrid(graph), p)
#define nalu_hypre_SStructGraphStencils(graph)       ((graph) -> stencils)
#define nalu_hypre_SStructGraphStencil(graph, p, v)  ((graph) -> stencils[p][v])

#define nalu_hypre_SStructGraphFEMNSparse(graph)     ((graph) -> fem_nsparse)
#define nalu_hypre_SStructGraphFEMSparseI(graph)     ((graph) -> fem_sparse_i)
#define nalu_hypre_SStructGraphFEMSparseJ(graph)     ((graph) -> fem_sparse_j)
#define nalu_hypre_SStructGraphFEMEntries(graph)     ((graph) -> fem_entries)
#define nalu_hypre_SStructGraphFEMPNSparse(graph, p) ((graph) -> fem_nsparse[p])
#define nalu_hypre_SStructGraphFEMPSparseI(graph, p) ((graph) -> fem_sparse_i[p])
#define nalu_hypre_SStructGraphFEMPSparseJ(graph, p) ((graph) -> fem_sparse_j[p])
#define nalu_hypre_SStructGraphFEMPEntries(graph, p) ((graph) -> fem_entries[p])

#define nalu_hypre_SStructGraphNUVEntries(graph)     ((graph) -> nUventries)
#define nalu_hypre_SStructGraphIUVEntries(graph)     ((graph) -> iUventries)
#define nalu_hypre_SStructGraphIUVEntry(graph, i)    ((graph) -> iUventries[i])
#define nalu_hypre_SStructGraphUVEntries(graph)      ((graph) -> Uventries)
#define nalu_hypre_SStructGraphUVEntry(graph, i)     ((graph) -> Uventries[i])
#define nalu_hypre_SStructGraphUVESize(graph)        ((graph) -> Uvesize)
#define nalu_hypre_SStructGraphUEMaxSize(graph)      ((graph) -> Uemaxsize)
#define nalu_hypre_SStructGraphUVEOffsets(graph)     ((graph) -> Uveoffsets)
#define nalu_hypre_SStructGraphUVEOffset(graph, p, v)((graph) -> Uveoffsets[p][v])

#define nalu_hypre_SStructGraphRefCount(graph)       ((graph) -> ref_count)
#define nalu_hypre_SStructGraphObjectType(graph)     ((graph) -> type)
#define nalu_hypre_SStructGraphEntries(graph)        ((graph) -> graph_entries)
#define nalu_hypre_SStructNGraphEntries(graph)       ((graph) -> n_graph_entries)
#define nalu_hypre_SStructAGraphEntries(graph)       ((graph) -> a_graph_entries)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructUVEntry
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructUVEntryPart(Uv)        ((Uv) -> part)
#define nalu_hypre_SStructUVEntryIndex(Uv)       ((Uv) -> index)
#define nalu_hypre_SStructUVEntryVar(Uv)         ((Uv) -> var)
#define nalu_hypre_SStructUVEntryRank(Uv)        ((Uv) -> rank)
#define nalu_hypre_SStructUVEntryNUEntries(Uv)   ((Uv) -> nUentries)
#define nalu_hypre_SStructUVEntryUEntries(Uv)    ((Uv) -> Uentries)
#define nalu_hypre_SStructUVEntryUEntry(Uv, i)  &((Uv) -> Uentries[i])
#define nalu_hypre_SStructUVEntryToPart(Uv, i)   ((Uv) -> Uentries[i].to_part)
#define nalu_hypre_SStructUVEntryToIndex(Uv, i)  ((Uv) -> Uentries[i].to_index)
#define nalu_hypre_SStructUVEntryToVar(Uv, i)    ((Uv) -> Uentries[i].to_var)
#define nalu_hypre_SStructUVEntryToBoxnum(Uv, i) ((Uv) -> Uentries[i].to_boxnum)
#define nalu_hypre_SStructUVEntryToProc(Uv, i)   ((Uv) -> Uentries[i].to_proc)
#define nalu_hypre_SStructUVEntryToRank(Uv, i)   ((Uv) -> Uentries[i].to_rank)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructUEntry
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructUEntryToPart(U)   ((U) -> to_part)
#define nalu_hypre_SStructUEntryToIndex(U)  ((U) -> to_index)
#define nalu_hypre_SStructUEntryToVar(U)    ((U) -> to_var)
#define nalu_hypre_SStructUEntryToBoxnum(U) ((U) -> to_boxnum)
#define nalu_hypre_SStructUEntryToProc(U)   ((U) -> to_proc)
#define nalu_hypre_SStructUEntryToRank(U)   ((U) -> to_rank)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructGraphEntry
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructGraphEntryPart(g)     ((g) -> part)
#define nalu_hypre_SStructGraphEntryIndex(g)    ((g) -> index)
#define nalu_hypre_SStructGraphEntryVar(g)      ((g) -> var)
#define nalu_hypre_SStructGraphEntryToPart(g)   ((g) -> to_part)
#define nalu_hypre_SStructGraphEntryToIndex(g)  ((g) -> to_index)
#define nalu_hypre_SStructGraphEntryToVar(g)    ((g) -> to_var)

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_SStructMatrix structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_SSTRUCT_MATRIX_HEADER
#define nalu_hypre_SSTRUCT_MATRIX_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_SStructMatrix:
 *--------------------------------------------------------------------------*/

typedef struct
{
   MPI_Comm                comm;
   nalu_hypre_SStructPGrid     *pgrid;
   nalu_hypre_SStructStencil  **stencils;     /* nvar array of stencils */

   NALU_HYPRE_Int               nvars;
   NALU_HYPRE_Int             **smaps;
   nalu_hypre_StructStencil  ***sstencils;    /* nvar x nvar array of sstencils */
   nalu_hypre_StructMatrix   ***smatrices;    /* nvar x nvar array of smatrices */
   NALU_HYPRE_Int             **symmetric;    /* Stencil entries symmetric?
                                          * (nvar x nvar array) */

   /* temporary storage for SetValues routines */
   NALU_HYPRE_Int               sentries_size;
   NALU_HYPRE_Int              *sentries;

   NALU_HYPRE_Int               accumulated;  /* AddTo values accumulated? */

   NALU_HYPRE_Int               ref_count;

} nalu_hypre_SStructPMatrix;

typedef struct nalu_hypre_SStructMatrix_struct
{
   MPI_Comm                comm;
   NALU_HYPRE_Int               ndim;
   nalu_hypre_SStructGraph     *graph;
   NALU_HYPRE_Int            ***splits;   /* S/U-matrix split for each stencil */

   /* S-matrix info */
   NALU_HYPRE_Int               nparts;
   nalu_hypre_SStructPMatrix  **pmatrices;
   NALU_HYPRE_Int            ***symmetric;    /* Stencil entries symmetric?
                                          * (nparts x nvar x nvar array) */

   /* U-matrix info */
   NALU_HYPRE_IJMatrix          ijmatrix;
   nalu_hypre_ParCSRMatrix     *parcsrmatrix;

   /* temporary storage for SetValues routines */
   NALU_HYPRE_Int               entries_size;
   NALU_HYPRE_Int              *Sentries;
   NALU_HYPRE_Int              *Uentries;

   NALU_HYPRE_Int               tmp_size;     /* size of the following 3 */
   NALU_HYPRE_BigInt           *tmp_row_coords;
   NALU_HYPRE_BigInt           *tmp_col_coords;
   NALU_HYPRE_Complex          *tmp_coeffs;
   NALU_HYPRE_BigInt           *d_tmp_row_coords;
   NALU_HYPRE_BigInt           *d_tmp_col_coords;
   NALU_HYPRE_Complex          *d_tmp_coeffs;

   NALU_HYPRE_Int               ns_symmetric; /* Non-stencil entries symmetric? */
   NALU_HYPRE_Int               global_size;  /* Total number of nonzero coeffs */

   NALU_HYPRE_Int               ref_count;

   /* GEC0902   adding an object type to the matrix  */
   NALU_HYPRE_Int               object_type;

} nalu_hypre_SStructMatrix;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructMatrix
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructMatrixComm(mat)                 ((mat) -> comm)
#define nalu_hypre_SStructMatrixNDim(mat)                 ((mat) -> ndim)
#define nalu_hypre_SStructMatrixGraph(mat)                ((mat) -> graph)
#define nalu_hypre_SStructMatrixSplits(mat)               ((mat) -> splits)
#define nalu_hypre_SStructMatrixSplit(mat, p, v)          ((mat) -> splits[p][v])
#define nalu_hypre_SStructMatrixNParts(mat)               ((mat) -> nparts)
#define nalu_hypre_SStructMatrixPMatrices(mat)            ((mat) -> pmatrices)
#define nalu_hypre_SStructMatrixPMatrix(mat, part)        ((mat) -> pmatrices[part])
#define nalu_hypre_SStructMatrixSymmetric(mat)            ((mat) -> symmetric)
#define nalu_hypre_SStructMatrixIJMatrix(mat)             ((mat) -> ijmatrix)
#define nalu_hypre_SStructMatrixParCSRMatrix(mat)         ((mat) -> parcsrmatrix)
#define nalu_hypre_SStructMatrixEntriesSize(mat)          ((mat) -> entries_size)
#define nalu_hypre_SStructMatrixSEntries(mat)             ((mat) -> Sentries)
#define nalu_hypre_SStructMatrixUEntries(mat)             ((mat) -> Uentries)
#define nalu_hypre_SStructMatrixTmpSize(mat)              ((mat) -> tmp_size)
#define nalu_hypre_SStructMatrixTmpRowCoords(mat)         ((mat) -> tmp_row_coords)
#define nalu_hypre_SStructMatrixTmpColCoords(mat)         ((mat) -> tmp_col_coords)
#define nalu_hypre_SStructMatrixTmpCoeffs(mat)            ((mat) -> tmp_coeffs)
#define nalu_hypre_SStructMatrixTmpRowCoordsDevice(mat)   ((mat) -> d_tmp_row_coords)
#define nalu_hypre_SStructMatrixTmpColCoordsDevice(mat)   ((mat) -> d_tmp_col_coords)
#define nalu_hypre_SStructMatrixTmpCoeffsDevice(mat)      ((mat) -> d_tmp_coeffs)
#define nalu_hypre_SStructMatrixNSSymmetric(mat)          ((mat) -> ns_symmetric)
#define nalu_hypre_SStructMatrixGlobalSize(mat)           ((mat) -> global_size)
#define nalu_hypre_SStructMatrixRefCount(mat)             ((mat) -> ref_count)
#define nalu_hypre_SStructMatrixObjectType(mat)           ((mat) -> object_type)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructPMatrix
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructPMatrixComm(pmat)              ((pmat) -> comm)
#define nalu_hypre_SStructPMatrixPGrid(pmat)             ((pmat) -> pgrid)
#define nalu_hypre_SStructPMatrixNDim(pmat) \
nalu_hypre_SStructPGridNDim(nalu_hypre_SStructPMatrixPGrid(pmat))
#define nalu_hypre_SStructPMatrixStencils(pmat)          ((pmat) -> stencils)
#define nalu_hypre_SStructPMatrixNVars(pmat)             ((pmat) -> nvars)
#define nalu_hypre_SStructPMatrixStencil(pmat, var)      ((pmat) -> stencils[var])
#define nalu_hypre_SStructPMatrixSMaps(pmat)             ((pmat) -> smaps)
#define nalu_hypre_SStructPMatrixSMap(pmat, var)         ((pmat) -> smaps[var])
#define nalu_hypre_SStructPMatrixSStencils(pmat)         ((pmat) -> sstencils)
#define nalu_hypre_SStructPMatrixSStencil(pmat, vi, vj) \
((pmat) -> sstencils[vi][vj])
#define nalu_hypre_SStructPMatrixSMatrices(pmat)         ((pmat) -> smatrices)
#define nalu_hypre_SStructPMatrixSMatrix(pmat, vi, vj)  \
((pmat) -> smatrices[vi][vj])
#define nalu_hypre_SStructPMatrixSymmetric(pmat)         ((pmat) -> symmetric)
#define nalu_hypre_SStructPMatrixSEntriesSize(pmat)      ((pmat) -> sentries_size)
#define nalu_hypre_SStructPMatrixSEntries(pmat)          ((pmat) -> sentries)
#define nalu_hypre_SStructPMatrixAccumulated(pmat)       ((pmat) -> accumulated)
#define nalu_hypre_SStructPMatrixRefCount(pmat)          ((pmat) -> ref_count)

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_SStructVector structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_SSTRUCT_VECTOR_HEADER
#define nalu_hypre_SSTRUCT_VECTOR_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_SStructVector:
 *--------------------------------------------------------------------------*/

typedef struct
{
   MPI_Comm                comm;
   nalu_hypre_SStructPGrid     *pgrid;

   NALU_HYPRE_Int               nvars;
   nalu_hypre_StructVector    **svectors;     /* nvar array of svectors */
   nalu_hypre_CommPkg         **comm_pkgs;    /* nvar array of comm pkgs */

   NALU_HYPRE_Int               accumulated;  /* AddTo values accumulated? */

   NALU_HYPRE_Int               ref_count;

   NALU_HYPRE_Int              *dataindices;  /* GEC1002 array for starting index of the
                                            svector. pdataindices[varx] */
   NALU_HYPRE_Int               datasize;     /* Size of the pvector = sums size of svectors */

} nalu_hypre_SStructPVector;

typedef struct nalu_hypre_SStructVector_struct
{
   MPI_Comm                comm;
   NALU_HYPRE_Int               ndim;
   nalu_hypre_SStructGrid      *grid;
   NALU_HYPRE_Int               object_type;

   /* s-vector info */
   NALU_HYPRE_Int               nparts;
   nalu_hypre_SStructPVector  **pvectors;
   nalu_hypre_CommPkg        ***comm_pkgs;    /* nvar array of comm pkgs */

   /* u-vector info */
   NALU_HYPRE_IJVector          ijvector;
   nalu_hypre_ParVector        *parvector;

   /* inter-part communication info */
   NALU_HYPRE_Int               nbor_ncomms;  /* num comm_pkgs with neighbor parts */

   /* GEC10020902 pointer to big chunk of memory and auxiliary information */
   NALU_HYPRE_Complex          *data;        /* GEC1002 pointer to chunk data */
   NALU_HYPRE_Int              *dataindices; /* GEC1002 dataindices[partx] is the starting index
                                           of vector data for the part=partx */
   NALU_HYPRE_Int               datasize;    /* GEC1002 size of all data = ghlocalsize */

   NALU_HYPRE_Int               global_size;  /* Total number coefficients */
   NALU_HYPRE_Int               ref_count;

} nalu_hypre_SStructVector;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructVector
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructVectorComm(vec)           ((vec) -> comm)
#define nalu_hypre_SStructVectorNDim(vec)           ((vec) -> ndim)
#define nalu_hypre_SStructVectorGrid(vec)           ((vec) -> grid)
#define nalu_hypre_SStructVectorObjectType(vec)     ((vec) -> object_type)
#define nalu_hypre_SStructVectorNParts(vec)         ((vec) -> nparts)
#define nalu_hypre_SStructVectorPVectors(vec)       ((vec) -> pvectors)
#define nalu_hypre_SStructVectorPVector(vec, part)  ((vec) -> pvectors[part])
#define nalu_hypre_SStructVectorIJVector(vec)       ((vec) -> ijvector)
#define nalu_hypre_SStructVectorParVector(vec)      ((vec) -> parvector)
#define nalu_hypre_SStructVectorNborNComms(vec)     ((vec) -> nbor_ncomms)
#define nalu_hypre_SStructVectorGlobalSize(vec)     ((vec) -> global_size)
#define nalu_hypre_SStructVectorRefCount(vec)       ((vec) -> ref_count)
#define nalu_hypre_SStructVectorData(vec)           ((vec) -> data )
#define nalu_hypre_SStructVectorDataIndices(vec)    ((vec) -> dataindices)
#define nalu_hypre_SStructVectorDataSize(vec)       ((vec) -> datasize)


/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_SStructPVector
 *--------------------------------------------------------------------------*/

#define nalu_hypre_SStructPVectorComm(pvec)        ((pvec) -> comm)
#define nalu_hypre_SStructPVectorPGrid(pvec)       ((pvec) -> pgrid)
#define nalu_hypre_SStructPVectorNVars(pvec)       ((pvec) -> nvars)
#define nalu_hypre_SStructPVectorSVectors(pvec)    ((pvec) -> svectors)
#define nalu_hypre_SStructPVectorSVector(pvec, v)  ((pvec) -> svectors[v])
#define nalu_hypre_SStructPVectorCommPkgs(pvec)    ((pvec) -> comm_pkgs)
#define nalu_hypre_SStructPVectorCommPkg(pvec, v)  ((pvec) -> comm_pkgs[v])
#define nalu_hypre_SStructPVectorAccumulated(pvec) ((pvec) -> accumulated)
#define nalu_hypre_SStructPVectorRefCount(pvec)    ((pvec) -> ref_count)
#define nalu_hypre_SStructPVectorDataIndices(pvec) ((pvec) -> dataindices  )
#define nalu_hypre_SStructPVectorDataSize(pvec)    ((pvec) -> datasize  )

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/* NALU_HYPRE_sstruct_graph.c */
NALU_HYPRE_Int NALU_HYPRE_SStructGraphCreate ( MPI_Comm comm, NALU_HYPRE_SStructGrid grid,
                                     NALU_HYPRE_SStructGraph *graph_ptr );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphDestroy ( NALU_HYPRE_SStructGraph graph );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphSetDomainGrid ( NALU_HYPRE_SStructGraph graph,
                                            NALU_HYPRE_SStructGrid domain_grid );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphSetStencil ( NALU_HYPRE_SStructGraph graph, NALU_HYPRE_Int part, NALU_HYPRE_Int var,
                                         NALU_HYPRE_SStructStencil stencil );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphSetFEM ( NALU_HYPRE_SStructGraph graph, NALU_HYPRE_Int part );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphSetFEMSparsity ( NALU_HYPRE_SStructGraph graph, NALU_HYPRE_Int part,
                                             NALU_HYPRE_Int nsparse, NALU_HYPRE_Int *sparsity );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphAddEntries ( NALU_HYPRE_SStructGraph graph, NALU_HYPRE_Int part, NALU_HYPRE_Int *index,
                                         NALU_HYPRE_Int var, NALU_HYPRE_Int to_part, NALU_HYPRE_Int *to_index, NALU_HYPRE_Int to_var );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphAssemble ( NALU_HYPRE_SStructGraph graph );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphSetObjectType ( NALU_HYPRE_SStructGraph graph, NALU_HYPRE_Int type );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphPrint ( FILE *file, NALU_HYPRE_SStructGraph graph );
NALU_HYPRE_Int NALU_HYPRE_SStructGraphRead ( FILE *file, NALU_HYPRE_SStructGrid grid,
                                   NALU_HYPRE_SStructStencil **stencils, NALU_HYPRE_SStructGraph *graph_ptr );

/* NALU_HYPRE_sstruct_grid.c */
NALU_HYPRE_Int NALU_HYPRE_SStructGridCreate ( MPI_Comm comm, NALU_HYPRE_Int ndim, NALU_HYPRE_Int nparts,
                                    NALU_HYPRE_SStructGrid *grid_ptr );
NALU_HYPRE_Int NALU_HYPRE_SStructGridDestroy ( NALU_HYPRE_SStructGrid grid );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetExtents ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part, NALU_HYPRE_Int *ilower,
                                        NALU_HYPRE_Int *iupper );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetVariables ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part, NALU_HYPRE_Int nvars,
                                          NALU_HYPRE_SStructVariable *vartypes );
NALU_HYPRE_Int NALU_HYPRE_SStructGridAddVariables ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part, NALU_HYPRE_Int *index,
                                          NALU_HYPRE_Int nvars, NALU_HYPRE_SStructVariable *vartypes );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetFEMOrdering ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *ordering );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetNeighborPart ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part,
                                             NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int nbor_part, NALU_HYPRE_Int *nbor_ilower,
                                             NALU_HYPRE_Int *nbor_iupper, NALU_HYPRE_Int *index_map, NALU_HYPRE_Int *index_dir );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetSharedPart ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part,
                                           NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int *offset, NALU_HYPRE_Int shared_part,
                                           NALU_HYPRE_Int *shared_ilower, NALU_HYPRE_Int *shared_iupper, NALU_HYPRE_Int *shared_offset, NALU_HYPRE_Int *index_map,
                                           NALU_HYPRE_Int *index_dir );
NALU_HYPRE_Int NALU_HYPRE_SStructGridAddUnstructuredPart ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int ilower,
                                                 NALU_HYPRE_Int iupper );
NALU_HYPRE_Int NALU_HYPRE_SStructGridAssemble ( NALU_HYPRE_SStructGrid grid );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetPeriodic ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int part,
                                         NALU_HYPRE_Int *periodic );
NALU_HYPRE_Int NALU_HYPRE_SStructGridSetNumGhost ( NALU_HYPRE_SStructGrid grid, NALU_HYPRE_Int *num_ghost );

/* NALU_HYPRE_sstruct_matrix.c */
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixCreate ( MPI_Comm comm, NALU_HYPRE_SStructGraph graph,
                                      NALU_HYPRE_SStructMatrix *matrix_ptr );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixDestroy ( NALU_HYPRE_SStructMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixInitialize ( NALU_HYPRE_SStructMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixSetValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                         NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixAddToValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                           NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixAddFEMValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *index, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixGetValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                         NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixGetFEMValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *index, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixSetBoxValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries,
                                            NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixAddToBoxValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                              NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries,
                                              NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixGetBoxValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries,
                                            NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixAssemble ( NALU_HYPRE_SStructMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixSetSymmetric ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int var, NALU_HYPRE_Int to_var, NALU_HYPRE_Int symmetric );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixSetNSSymmetric ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int symmetric );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixSetObjectType ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int type );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixGetObject ( NALU_HYPRE_SStructMatrix matrix, void **object );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixPrint ( const char *filename, NALU_HYPRE_SStructMatrix matrix,
                                     NALU_HYPRE_Int all );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixRead ( MPI_Comm comm, const char *filename,
                                    NALU_HYPRE_SStructMatrix *matrix_ptr );
NALU_HYPRE_Int NALU_HYPRE_SStructMatrixMatvec ( NALU_HYPRE_Complex alpha, NALU_HYPRE_SStructMatrix A,
                                      NALU_HYPRE_SStructVector x, NALU_HYPRE_Complex beta, NALU_HYPRE_SStructVector y );

/* NALU_HYPRE_sstruct_stencil.c */
NALU_HYPRE_Int NALU_HYPRE_SStructStencilCreate ( NALU_HYPRE_Int ndim, NALU_HYPRE_Int size,
                                       NALU_HYPRE_SStructStencil *stencil_ptr );
NALU_HYPRE_Int NALU_HYPRE_SStructStencilDestroy ( NALU_HYPRE_SStructStencil stencil );
NALU_HYPRE_Int NALU_HYPRE_SStructStencilSetEntry ( NALU_HYPRE_SStructStencil stencil, NALU_HYPRE_Int entry,
                                         NALU_HYPRE_Int *offset, NALU_HYPRE_Int var );
NALU_HYPRE_Int NALU_HYPRE_SStructStencilPrint ( FILE *file, NALU_HYPRE_SStructStencil stencil );
NALU_HYPRE_Int NALU_HYPRE_SStructStencilRead ( FILE *file, NALU_HYPRE_SStructStencil *stencil_ptr );


/* NALU_HYPRE_sstruct_vector.c */
NALU_HYPRE_Int NALU_HYPRE_SStructVectorCreate ( MPI_Comm comm, NALU_HYPRE_SStructGrid grid,
                                      NALU_HYPRE_SStructVector *vector_ptr );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorDestroy ( NALU_HYPRE_SStructVector vector );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorInitialize ( NALU_HYPRE_SStructVector vector );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorSetValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                         NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Complex *value );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorAddToValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                           NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Complex *value );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorAddFEMValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *index, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorGetValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                         NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Complex *value );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorGetFEMValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *index, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorSetBoxValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int var, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorAddToBoxValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                              NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int var, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorGetBoxValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *ilower, NALU_HYPRE_Int *iupper, NALU_HYPRE_Int var, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorAssemble ( NALU_HYPRE_SStructVector vector );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorGather ( NALU_HYPRE_SStructVector vector );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorSetConstantValues ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Complex value );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorSetObjectType ( NALU_HYPRE_SStructVector vector, NALU_HYPRE_Int type );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorGetObject ( NALU_HYPRE_SStructVector vector, void **object );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorPrint ( const char *filename, NALU_HYPRE_SStructVector vector,
                                     NALU_HYPRE_Int all );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorRead ( MPI_Comm comm, const char *filename,
                                    NALU_HYPRE_SStructVector *vector );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorCopy ( NALU_HYPRE_SStructVector x, NALU_HYPRE_SStructVector y );
NALU_HYPRE_Int NALU_HYPRE_SStructVectorScale ( NALU_HYPRE_Complex alpha, NALU_HYPRE_SStructVector y );
NALU_HYPRE_Int NALU_HYPRE_SStructInnerProd ( NALU_HYPRE_SStructVector x, NALU_HYPRE_SStructVector y,
                                   NALU_HYPRE_Real *result );
NALU_HYPRE_Int NALU_HYPRE_SStructAxpy ( NALU_HYPRE_Complex alpha, NALU_HYPRE_SStructVector x, NALU_HYPRE_SStructVector y );

/* sstruct_axpy.c */
NALU_HYPRE_Int nalu_hypre_SStructPAxpy ( NALU_HYPRE_Complex alpha, nalu_hypre_SStructPVector *px,
                               nalu_hypre_SStructPVector *py );
NALU_HYPRE_Int nalu_hypre_SStructAxpy ( NALU_HYPRE_Complex alpha, nalu_hypre_SStructVector *x, nalu_hypre_SStructVector *y );

/* sstruct_copy.c */
NALU_HYPRE_Int nalu_hypre_SStructPCopy ( nalu_hypre_SStructPVector *px, nalu_hypre_SStructPVector *py );
NALU_HYPRE_Int nalu_hypre_SStructPartialPCopy ( nalu_hypre_SStructPVector *px, nalu_hypre_SStructPVector *py,
                                      nalu_hypre_BoxArrayArray **array_boxes );
NALU_HYPRE_Int nalu_hypre_SStructCopy ( nalu_hypre_SStructVector *x, nalu_hypre_SStructVector *y );

/* sstruct_graph.c */
NALU_HYPRE_Int nalu_hypre_SStructGraphRef ( nalu_hypre_SStructGraph *graph, nalu_hypre_SStructGraph **graph_ref );
NALU_HYPRE_Int nalu_hypre_SStructGraphGetUVEntryRank( nalu_hypre_SStructGraph *graph, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int var, nalu_hypre_Index index, NALU_HYPRE_BigInt *rank );
NALU_HYPRE_Int nalu_hypre_SStructGraphFindBoxEndpt ( nalu_hypre_SStructGraph *graph, NALU_HYPRE_Int part, NALU_HYPRE_Int var,
                                           NALU_HYPRE_Int proc, NALU_HYPRE_Int endpt, NALU_HYPRE_Int boxi );
NALU_HYPRE_Int nalu_hypre_SStructGraphFindSGridEndpts ( nalu_hypre_SStructGraph *graph, NALU_HYPRE_Int part,
                                              NALU_HYPRE_Int var, NALU_HYPRE_Int proc, NALU_HYPRE_Int endpt, NALU_HYPRE_Int *endpts );

/* sstruct_grid.c */
NALU_HYPRE_Int nalu_hypre_SStructVariableGetOffset ( NALU_HYPRE_SStructVariable vartype, NALU_HYPRE_Int ndim,
                                           nalu_hypre_Index varoffset );
NALU_HYPRE_Int nalu_hypre_SStructPGridCreate ( MPI_Comm comm, NALU_HYPRE_Int ndim,
                                     nalu_hypre_SStructPGrid **pgrid_ptr );
NALU_HYPRE_Int nalu_hypre_SStructPGridDestroy ( nalu_hypre_SStructPGrid *pgrid );
NALU_HYPRE_Int nalu_hypre_SStructPGridSetExtents ( nalu_hypre_SStructPGrid *pgrid, nalu_hypre_Index ilower,
                                         nalu_hypre_Index iupper );
NALU_HYPRE_Int nalu_hypre_SStructPGridSetCellSGrid ( nalu_hypre_SStructPGrid *pgrid,
                                           nalu_hypre_StructGrid *cell_sgrid );
NALU_HYPRE_Int nalu_hypre_SStructPGridSetVariables ( nalu_hypre_SStructPGrid *pgrid, NALU_HYPRE_Int nvars,
                                           NALU_HYPRE_SStructVariable *vartypes );
NALU_HYPRE_Int nalu_hypre_SStructPGridSetPNeighbor ( nalu_hypre_SStructPGrid *pgrid, nalu_hypre_Box *pneighbor_box,
                                           nalu_hypre_Index pnbor_offset );
NALU_HYPRE_Int nalu_hypre_SStructPGridAssemble ( nalu_hypre_SStructPGrid *pgrid );
NALU_HYPRE_Int nalu_hypre_SStructPGridGetMaxBoxSize ( nalu_hypre_SStructPGrid *pgrid );
NALU_HYPRE_Int nalu_hypre_SStructGridRef ( nalu_hypre_SStructGrid *grid, nalu_hypre_SStructGrid **grid_ref );
NALU_HYPRE_Int nalu_hypre_SStructGridAssembleBoxManagers ( nalu_hypre_SStructGrid *grid );
NALU_HYPRE_Int nalu_hypre_SStructGridAssembleNborBoxManagers ( nalu_hypre_SStructGrid *grid );
NALU_HYPRE_Int nalu_hypre_SStructGridCreateCommInfo ( nalu_hypre_SStructGrid *grid );
NALU_HYPRE_Int nalu_hypre_SStructGridFindBoxManEntry ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part,
                                             nalu_hypre_Index index, NALU_HYPRE_Int var, nalu_hypre_BoxManEntry **entry_ptr );
NALU_HYPRE_Int nalu_hypre_SStructGridFindNborBoxManEntry ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part,
                                                 nalu_hypre_Index index, NALU_HYPRE_Int var, nalu_hypre_BoxManEntry **entry_ptr );
NALU_HYPRE_Int nalu_hypre_SStructGridBoxProcFindBoxManEntry ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part,
                                                    NALU_HYPRE_Int var, NALU_HYPRE_Int box, NALU_HYPRE_Int proc, nalu_hypre_BoxManEntry **entry_ptr );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetCSRstrides ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index strides );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetGhstrides ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index strides );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetGlobalCSRank ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index index,
                                                    NALU_HYPRE_BigInt *rank_ptr );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetGlobalGhrank ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index index,
                                                    NALU_HYPRE_BigInt *rank_ptr );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetProcess ( nalu_hypre_BoxManEntry *entry, NALU_HYPRE_Int *proc_ptr );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetBoxnum ( nalu_hypre_BoxManEntry *entry, NALU_HYPRE_Int *id_ptr );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetPart ( nalu_hypre_BoxManEntry *entry, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int *part_ptr );
NALU_HYPRE_Int nalu_hypre_SStructIndexToNborIndex( nalu_hypre_Index index, nalu_hypre_Index root, nalu_hypre_Index nbor_root,
                                         nalu_hypre_Index coord, nalu_hypre_Index dir, NALU_HYPRE_Int ndim, nalu_hypre_Index nbor_index );
NALU_HYPRE_Int nalu_hypre_SStructBoxToNborBox ( nalu_hypre_Box *box, nalu_hypre_Index root, nalu_hypre_Index nbor_root,
                                      nalu_hypre_Index coord, nalu_hypre_Index dir );
NALU_HYPRE_Int nalu_hypre_SStructNborIndexToIndex( nalu_hypre_Index nbor_index, nalu_hypre_Index root,
                                         nalu_hypre_Index nbor_root, nalu_hypre_Index coord, nalu_hypre_Index dir, NALU_HYPRE_Int ndim, nalu_hypre_Index index );
NALU_HYPRE_Int nalu_hypre_SStructNborBoxToBox ( nalu_hypre_Box *nbor_box, nalu_hypre_Index root, nalu_hypre_Index nbor_root,
                                      nalu_hypre_Index coord, nalu_hypre_Index dir );
NALU_HYPRE_Int nalu_hypre_SStructVarToNborVar ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part, NALU_HYPRE_Int var,
                                      NALU_HYPRE_Int *coord, NALU_HYPRE_Int *nbor_var_ptr );
NALU_HYPRE_Int nalu_hypre_SStructGridSetNumGhost ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetGlobalRank ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index index,
                                                  NALU_HYPRE_BigInt *rank_ptr, NALU_HYPRE_Int type );
NALU_HYPRE_Int nalu_hypre_SStructBoxManEntryGetStrides ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index strides,
                                               NALU_HYPRE_Int type );
NALU_HYPRE_Int nalu_hypre_SStructBoxNumMap ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part, NALU_HYPRE_Int boxnum,
                                   NALU_HYPRE_Int **num_varboxes_ptr, NALU_HYPRE_Int ***map_ptr );
NALU_HYPRE_Int nalu_hypre_SStructCellGridBoxNumMap ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part,
                                           NALU_HYPRE_Int ***num_varboxes_ptr, NALU_HYPRE_Int ****map_ptr );
NALU_HYPRE_Int nalu_hypre_SStructCellBoxToVarBox ( nalu_hypre_Box *box, nalu_hypre_Index offset, nalu_hypre_Index varoffset,
                                         NALU_HYPRE_Int *valid );
NALU_HYPRE_Int nalu_hypre_SStructGridIntersect ( nalu_hypre_SStructGrid *grid, NALU_HYPRE_Int part, NALU_HYPRE_Int var,
                                       nalu_hypre_Box *box, NALU_HYPRE_Int action, nalu_hypre_BoxManEntry ***entries_ptr, NALU_HYPRE_Int *nentries_ptr );
NALU_HYPRE_Int nalu_hypre_SStructGridGetMaxBoxSize ( nalu_hypre_SStructGrid *grid );
NALU_HYPRE_Int nalu_hypre_SStructGridPrint ( FILE *file, nalu_hypre_SStructGrid *grid );
NALU_HYPRE_Int nalu_hypre_SStructGridRead ( MPI_Comm comm, FILE *file, nalu_hypre_SStructGrid **grid_ptr );

/* sstruct_innerprod.c */
NALU_HYPRE_Int nalu_hypre_SStructPInnerProd ( nalu_hypre_SStructPVector *px, nalu_hypre_SStructPVector *py,
                                    NALU_HYPRE_Real *presult_ptr );
NALU_HYPRE_Int nalu_hypre_SStructInnerProd ( nalu_hypre_SStructVector *x, nalu_hypre_SStructVector *y,
                                   NALU_HYPRE_Real *result_ptr );

/* sstruct_matrix.c */
NALU_HYPRE_Int nalu_hypre_SStructPMatrixRef ( nalu_hypre_SStructPMatrix *matrix,
                                    nalu_hypre_SStructPMatrix **matrix_ref );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixCreate ( MPI_Comm comm, nalu_hypre_SStructPGrid *pgrid,
                                       nalu_hypre_SStructStencil **stencils, nalu_hypre_SStructPMatrix **pmatrix_ptr );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixDestroy ( nalu_hypre_SStructPMatrix *pmatrix );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixInitialize ( nalu_hypre_SStructPMatrix *pmatrix );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixSetValues ( nalu_hypre_SStructPMatrix *pmatrix, nalu_hypre_Index index,
                                          NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Complex *values, NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixSetBoxValues( nalu_hypre_SStructPMatrix *pmatrix, nalu_hypre_Box *set_box,
                                            NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, nalu_hypre_Box *value_box, NALU_HYPRE_Complex *values,
                                            NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixAccumulate ( nalu_hypre_SStructPMatrix *pmatrix );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixAssemble ( nalu_hypre_SStructPMatrix *pmatrix );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixSetSymmetric ( nalu_hypre_SStructPMatrix *pmatrix, NALU_HYPRE_Int var,
                                             NALU_HYPRE_Int to_var, NALU_HYPRE_Int symmetric );
NALU_HYPRE_Int nalu_hypre_SStructPMatrixPrint ( const char *filename, nalu_hypre_SStructPMatrix *pmatrix,
                                      NALU_HYPRE_Int all );
NALU_HYPRE_Int nalu_hypre_SStructUMatrixInitialize ( nalu_hypre_SStructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_SStructUMatrixSetValues ( nalu_hypre_SStructMatrix *matrix, NALU_HYPRE_Int part,
                                          nalu_hypre_Index index, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Complex *values,
                                          NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructUMatrixSetBoxValues( nalu_hypre_SStructMatrix *matrix, NALU_HYPRE_Int part,
                                            nalu_hypre_Box *set_box, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, nalu_hypre_Box *value_box,
                                            NALU_HYPRE_Complex *values, NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructUMatrixAssemble ( nalu_hypre_SStructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_SStructMatrixRef ( nalu_hypre_SStructMatrix *matrix, nalu_hypre_SStructMatrix **matrix_ref );
NALU_HYPRE_Int nalu_hypre_SStructMatrixSplitEntries ( nalu_hypre_SStructMatrix *matrix, NALU_HYPRE_Int part,
                                            NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Int *nSentries_ptr,
                                            NALU_HYPRE_Int **Sentries_ptr, NALU_HYPRE_Int *nUentries_ptr, NALU_HYPRE_Int **Uentries_ptr );
NALU_HYPRE_Int nalu_hypre_SStructMatrixSetValues ( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                         NALU_HYPRE_Int *index, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, NALU_HYPRE_Complex *values,
                                         NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructMatrixSetBoxValues( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                           nalu_hypre_Box *set_box, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, nalu_hypre_Box *value_box,
                                           NALU_HYPRE_Complex *values, NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructMatrixSetInterPartValues( NALU_HYPRE_SStructMatrix matrix, NALU_HYPRE_Int part,
                                                 nalu_hypre_Box *set_box, NALU_HYPRE_Int var, NALU_HYPRE_Int nentries, NALU_HYPRE_Int *entries, nalu_hypre_Box *value_box,
                                                 NALU_HYPRE_Complex *values, NALU_HYPRE_Int action );
NALU_HYPRE_MemoryLocation nalu_hypre_SStructMatrixMemoryLocation(nalu_hypre_SStructMatrix *matrix);

/* sstruct_matvec.c */
NALU_HYPRE_Int nalu_hypre_SStructPMatvecCreate ( void **pmatvec_vdata_ptr );
NALU_HYPRE_Int nalu_hypre_SStructPMatvecSetup ( void *pmatvec_vdata, nalu_hypre_SStructPMatrix *pA,
                                      nalu_hypre_SStructPVector *px );
NALU_HYPRE_Int nalu_hypre_SStructPMatvecCompute ( void *pmatvec_vdata, NALU_HYPRE_Complex alpha,
                                        nalu_hypre_SStructPMatrix *pA, nalu_hypre_SStructPVector *px, NALU_HYPRE_Complex beta, nalu_hypre_SStructPVector *py );
NALU_HYPRE_Int nalu_hypre_SStructPMatvecDestroy ( void *pmatvec_vdata );
NALU_HYPRE_Int nalu_hypre_SStructPMatvec ( NALU_HYPRE_Complex alpha, nalu_hypre_SStructPMatrix *pA,
                                 nalu_hypre_SStructPVector *px, NALU_HYPRE_Complex beta, nalu_hypre_SStructPVector *py );
NALU_HYPRE_Int nalu_hypre_SStructMatvecCreate ( void **matvec_vdata_ptr );
NALU_HYPRE_Int nalu_hypre_SStructMatvecSetup ( void *matvec_vdata, nalu_hypre_SStructMatrix *A,
                                     nalu_hypre_SStructVector *x );
NALU_HYPRE_Int nalu_hypre_SStructMatvecCompute ( void *matvec_vdata, NALU_HYPRE_Complex alpha,
                                       nalu_hypre_SStructMatrix *A, nalu_hypre_SStructVector *x, NALU_HYPRE_Complex beta, nalu_hypre_SStructVector *y );
NALU_HYPRE_Int nalu_hypre_SStructMatvecDestroy ( void *matvec_vdata );
NALU_HYPRE_Int nalu_hypre_SStructMatvec ( NALU_HYPRE_Complex alpha, nalu_hypre_SStructMatrix *A, nalu_hypre_SStructVector *x,
                                NALU_HYPRE_Complex beta, nalu_hypre_SStructVector *y );

/* sstruct_scale.c */
NALU_HYPRE_Int nalu_hypre_SStructPScale ( NALU_HYPRE_Complex alpha, nalu_hypre_SStructPVector *py );
NALU_HYPRE_Int nalu_hypre_SStructScale ( NALU_HYPRE_Complex alpha, nalu_hypre_SStructVector *y );

/* sstruct_stencil.c */
NALU_HYPRE_Int nalu_hypre_SStructStencilRef ( nalu_hypre_SStructStencil *stencil,
                                    nalu_hypre_SStructStencil **stencil_ref );

/* sstruct_vector.c */
NALU_HYPRE_Int nalu_hypre_SStructPVectorRef ( nalu_hypre_SStructPVector *vector,
                                    nalu_hypre_SStructPVector **vector_ref );
NALU_HYPRE_Int nalu_hypre_SStructPVectorCreate ( MPI_Comm comm, nalu_hypre_SStructPGrid *pgrid,
                                       nalu_hypre_SStructPVector **pvector_ptr );
NALU_HYPRE_Int nalu_hypre_SStructPVectorDestroy ( nalu_hypre_SStructPVector *pvector );
NALU_HYPRE_Int nalu_hypre_SStructPVectorInitialize ( nalu_hypre_SStructPVector *pvector );
NALU_HYPRE_Int nalu_hypre_SStructPVectorSetValues ( nalu_hypre_SStructPVector *pvector, nalu_hypre_Index index,
                                          NALU_HYPRE_Int var, NALU_HYPRE_Complex *value, NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructPVectorSetBoxValues( nalu_hypre_SStructPVector *pvector, nalu_hypre_Box *set_box,
                                            NALU_HYPRE_Int var, nalu_hypre_Box *value_box, NALU_HYPRE_Complex *values, NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_SStructPVectorAccumulate ( nalu_hypre_SStructPVector *pvector );
NALU_HYPRE_Int nalu_hypre_SStructPVectorAssemble ( nalu_hypre_SStructPVector *pvector );
NALU_HYPRE_Int nalu_hypre_SStructPVectorGather ( nalu_hypre_SStructPVector *pvector );
NALU_HYPRE_Int nalu_hypre_SStructPVectorGetValues ( nalu_hypre_SStructPVector *pvector, nalu_hypre_Index index,
                                          NALU_HYPRE_Int var, NALU_HYPRE_Complex *value );
NALU_HYPRE_Int nalu_hypre_SStructPVectorGetBoxValues( nalu_hypre_SStructPVector *pvector, nalu_hypre_Box *set_box,
                                            NALU_HYPRE_Int var, nalu_hypre_Box *value_box, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_SStructPVectorSetConstantValues ( nalu_hypre_SStructPVector *pvector,
                                                  NALU_HYPRE_Complex value );
NALU_HYPRE_Int nalu_hypre_SStructPVectorPrint ( const char *filename, nalu_hypre_SStructPVector *pvector,
                                      NALU_HYPRE_Int all );
NALU_HYPRE_Int nalu_hypre_SStructVectorRef ( nalu_hypre_SStructVector *vector, nalu_hypre_SStructVector **vector_ref );
NALU_HYPRE_Int nalu_hypre_SStructVectorSetConstantValues ( nalu_hypre_SStructVector *vector, NALU_HYPRE_Complex value );
NALU_HYPRE_Int nalu_hypre_SStructVectorConvert ( nalu_hypre_SStructVector *vector,
                                       nalu_hypre_ParVector **parvector_ptr );
NALU_HYPRE_Int nalu_hypre_SStructVectorParConvert ( nalu_hypre_SStructVector *vector,
                                          nalu_hypre_ParVector **parvector_ptr );
NALU_HYPRE_Int nalu_hypre_SStructVectorRestore ( nalu_hypre_SStructVector *vector, nalu_hypre_ParVector *parvector );
NALU_HYPRE_Int nalu_hypre_SStructVectorParRestore ( nalu_hypre_SStructVector *vector, nalu_hypre_ParVector *parvector );
NALU_HYPRE_Int nalu_hypre_SStructPVectorInitializeShell ( nalu_hypre_SStructPVector *pvector );
NALU_HYPRE_Int nalu_hypre_SStructVectorInitializeShell ( nalu_hypre_SStructVector *vector );
NALU_HYPRE_Int nalu_hypre_SStructVectorClearGhostValues ( nalu_hypre_SStructVector *vector );
NALU_HYPRE_MemoryLocation nalu_hypre_SStructVectorMemoryLocation(nalu_hypre_SStructVector *vector);


#ifdef __cplusplus
}
#endif

#endif

