
/*** DO NOT EDIT THIS FILE DIRECTLY (use 'headers' to generate) ***/

#ifndef nalu_hypre_IJ_HEADER
#define nalu_hypre_IJ_HEADER

#include <NALU_HYPRE_config.h>
#include "_nalu_hypre_parcsr_mv.h"
#include "NALU_HYPRE_IJ_mv.h"
#include "NALU_HYPRE.h"

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for Auxiliary Parallel CSR Matrix data structures
 *
 * Note: this matrix currently uses 0-based indexing.
 *
 *****************************************************************************/

#ifndef nalu_hypre_AUX_PARCSR_MATRIX_HEADER
#define nalu_hypre_AUX_PARCSR_MATRIX_HEADER

/*--------------------------------------------------------------------------
 * Auxiliary Parallel CSR Matrix
 *--------------------------------------------------------------------------*/

typedef struct
{
   NALU_HYPRE_Int            local_num_rows;    /* defines number of rows on this processor */
   NALU_HYPRE_Int            local_num_rownnz;  /* defines number of nonzero rows on this processor */
   NALU_HYPRE_Int            local_num_cols;    /* defines number of cols of diag */

   NALU_HYPRE_Int            need_aux;                /* if need_aux = 1, aux_j, aux_data are used to
                                                    generate the parcsr matrix (default),
                                                    for need_aux = 0, data is put directly into
                                                    parcsr structure (requires the knowledge of
                                                    offd_i and diag_i ) */

   NALU_HYPRE_Int           *rownnz;                  /* row_nnz[i] contains the i-th nonzero row id */
   NALU_HYPRE_Int           *row_length;              /* row_length[i] contains number of stored
                                                    elements in i-th row */
   NALU_HYPRE_Int           *row_space;               /* row_space[i] contains space allocated to
                                                    i-th row */

   NALU_HYPRE_Int           *diag_sizes;              /* user input row lengths of diag */
   NALU_HYPRE_Int           *offd_sizes;              /* user input row lengths of diag */

   NALU_HYPRE_BigInt       **aux_j;                   /* contains collected column indices */
   NALU_HYPRE_Complex      **aux_data;                /* contains collected data */

   NALU_HYPRE_Int           *indx_diag;               /* indx_diag[i] points to first empty space of portion
                                                    in diag_j , diag_data assigned to row i */
   NALU_HYPRE_Int           *indx_offd;               /* indx_offd[i] points to first empty space of portion
                                                    in offd_j , offd_data assigned to row i */

   NALU_HYPRE_Int            max_off_proc_elmts;      /* length of off processor stash set for
                                                    SetValues and AddTOValues */
   NALU_HYPRE_Int            current_off_proc_elmts;  /* current no. of elements stored in stash */
   NALU_HYPRE_Int            off_proc_i_indx;         /* pointer to first empty space in
                                                    set_off_proc_i_set */
   NALU_HYPRE_BigInt        *off_proc_i;              /* length 2*num_off_procs_elmts, contains info pairs
                                                    (code, no. of elmts) where code contains global
                                                    row no. if  SetValues, and (-global row no. -1)
                                                    if  AddToValues */
   NALU_HYPRE_BigInt        *off_proc_j;              /* contains column indices
                                                  * ( global col id.)    if SetValues,
                                                  * (-global col id. -1) if AddToValues */
   NALU_HYPRE_Complex       *off_proc_data;           /* contains corresponding data */

   NALU_HYPRE_MemoryLocation memory_location;

#if defined(NALU_HYPRE_USING_GPU)
   NALU_HYPRE_BigInt         max_stack_elmts;
   NALU_HYPRE_BigInt         current_stack_elmts;
   NALU_HYPRE_BigInt        *stack_i;
   NALU_HYPRE_BigInt        *stack_j;
   NALU_HYPRE_Complex       *stack_data;
   char                *stack_sora;              /* Set (1) or Add (0) */
   NALU_HYPRE_Int            usr_on_proc_elmts;       /* user given num elmt on-proc */
   NALU_HYPRE_Int            usr_off_proc_elmts;      /* user given num elmt off-proc */
   NALU_HYPRE_BigInt         init_alloc_factor;
   NALU_HYPRE_BigInt         grow_factor;
#endif
} nalu_hypre_AuxParCSRMatrix;

/*--------------------------------------------------------------------------
 * Accessor functions for the Parallel CSR Matrix structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_AuxParCSRMatrixLocalNumRows(matrix)         ((matrix) -> local_num_rows)
#define nalu_hypre_AuxParCSRMatrixLocalNumRownnz(matrix)       ((matrix) -> local_num_rownnz)
#define nalu_hypre_AuxParCSRMatrixLocalNumCols(matrix)         ((matrix) -> local_num_cols)

#define nalu_hypre_AuxParCSRMatrixNeedAux(matrix)              ((matrix) -> need_aux)
#define nalu_hypre_AuxParCSRMatrixRownnz(matrix)               ((matrix) -> rownnz)
#define nalu_hypre_AuxParCSRMatrixRowLength(matrix)            ((matrix) -> row_length)
#define nalu_hypre_AuxParCSRMatrixRowSpace(matrix)             ((matrix) -> row_space)
#define nalu_hypre_AuxParCSRMatrixAuxJ(matrix)                 ((matrix) -> aux_j)
#define nalu_hypre_AuxParCSRMatrixAuxData(matrix)              ((matrix) -> aux_data)

#define nalu_hypre_AuxParCSRMatrixIndxDiag(matrix)             ((matrix) -> indx_diag)
#define nalu_hypre_AuxParCSRMatrixIndxOffd(matrix)             ((matrix) -> indx_offd)

#define nalu_hypre_AuxParCSRMatrixDiagSizes(matrix)            ((matrix) -> diag_sizes)
#define nalu_hypre_AuxParCSRMatrixOffdSizes(matrix)            ((matrix) -> offd_sizes)

#define nalu_hypre_AuxParCSRMatrixMaxOffProcElmts(matrix)      ((matrix) -> max_off_proc_elmts)
#define nalu_hypre_AuxParCSRMatrixCurrentOffProcElmts(matrix)  ((matrix) -> current_off_proc_elmts)
#define nalu_hypre_AuxParCSRMatrixOffProcIIndx(matrix)         ((matrix) -> off_proc_i_indx)
#define nalu_hypre_AuxParCSRMatrixOffProcI(matrix)             ((matrix) -> off_proc_i)
#define nalu_hypre_AuxParCSRMatrixOffProcJ(matrix)             ((matrix) -> off_proc_j)
#define nalu_hypre_AuxParCSRMatrixOffProcData(matrix)          ((matrix) -> off_proc_data)

#define nalu_hypre_AuxParCSRMatrixMemoryLocation(matrix)       ((matrix) -> memory_location)

#if defined(NALU_HYPRE_USING_GPU)
#define nalu_hypre_AuxParCSRMatrixMaxStackElmts(matrix)        ((matrix) -> max_stack_elmts)
#define nalu_hypre_AuxParCSRMatrixCurrentStackElmts(matrix)    ((matrix) -> current_stack_elmts)
#define nalu_hypre_AuxParCSRMatrixStackI(matrix)               ((matrix) -> stack_i)
#define nalu_hypre_AuxParCSRMatrixStackJ(matrix)               ((matrix) -> stack_j)
#define nalu_hypre_AuxParCSRMatrixStackData(matrix)            ((matrix) -> stack_data)
#define nalu_hypre_AuxParCSRMatrixStackSorA(matrix)            ((matrix) -> stack_sora)
#define nalu_hypre_AuxParCSRMatrixUsrOnProcElmts(matrix)       ((matrix) -> usr_on_proc_elmts)
#define nalu_hypre_AuxParCSRMatrixUsrOffProcElmts(matrix)      ((matrix) -> usr_off_proc_elmts)
#define nalu_hypre_AuxParCSRMatrixInitAllocFactor(matrix)      ((matrix) -> init_alloc_factor)
#define nalu_hypre_AuxParCSRMatrixGrowFactor(matrix)           ((matrix) -> grow_factor)
#endif

#endif /* #ifndef nalu_hypre_AUX_PARCSR_MATRIX_HEADER */
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for Auxiliary Parallel Vector data structures
 *
 * Note: this vector currently uses 0-based indexing.
 *
 *****************************************************************************/

#ifndef nalu_hypre_AUX_PAR_VECTOR_HEADER
#define nalu_hypre_AUX_PAR_VECTOR_HEADER

/*--------------------------------------------------------------------------
 * Auxiliary Parallel Vector
 *--------------------------------------------------------------------------*/

typedef struct
{
   NALU_HYPRE_Int            max_off_proc_elmts;      /* length of off processor stash for
                                                    SetValues and AddToValues*/
   NALU_HYPRE_Int            current_off_proc_elmts;  /* current no. of elements stored in stash */
   NALU_HYPRE_BigInt        *off_proc_i;              /* contains column indices */
   NALU_HYPRE_Complex       *off_proc_data;           /* contains corresponding data */

   NALU_HYPRE_MemoryLocation memory_location;

#if defined(NALU_HYPRE_USING_GPU)
   NALU_HYPRE_Int            max_stack_elmts;      /* length of stash for SetValues and AddToValues*/
   NALU_HYPRE_Int            current_stack_elmts;  /* current no. of elements stored in stash */
   NALU_HYPRE_BigInt        *stack_i;              /* contains row indices */
   NALU_HYPRE_BigInt        *stack_voff;           /* contains vector offsets for multivectors */
   NALU_HYPRE_Complex       *stack_data;           /* contains corresponding data */
   char                *stack_sora;
   NALU_HYPRE_Int            usr_off_proc_elmts;   /* the num of off-proc elements usr guided */
   NALU_HYPRE_Real           init_alloc_factor;
   NALU_HYPRE_Real           grow_factor;
#endif
} nalu_hypre_AuxParVector;

/*--------------------------------------------------------------------------
 * Accessor functions for the Parallel Vector structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_AuxParVectorMaxOffProcElmts(vector)      ((vector) -> max_off_proc_elmts)
#define nalu_hypre_AuxParVectorCurrentOffProcElmts(vector)  ((vector) -> current_off_proc_elmts)
#define nalu_hypre_AuxParVectorOffProcI(vector)             ((vector) -> off_proc_i)
#define nalu_hypre_AuxParVectorOffProcData(vector)          ((vector) -> off_proc_data)

#define nalu_hypre_AuxParVectorMemoryLocation(vector)       ((vector) -> memory_location)

#if defined(NALU_HYPRE_USING_GPU)
#define nalu_hypre_AuxParVectorMaxStackElmts(vector)        ((vector) -> max_stack_elmts)
#define nalu_hypre_AuxParVectorCurrentStackElmts(vector)    ((vector) -> current_stack_elmts)
#define nalu_hypre_AuxParVectorStackI(vector)               ((vector) -> stack_i)
#define nalu_hypre_AuxParVectorStackVoff(vector)            ((vector) -> stack_voff)
#define nalu_hypre_AuxParVectorStackData(vector)            ((vector) -> stack_data)
#define nalu_hypre_AuxParVectorStackSorA(vector)            ((vector) -> stack_sora)
#define nalu_hypre_AuxParVectorUsrOffProcElmts(vector)      ((vector) -> usr_off_proc_elmts)
#define nalu_hypre_AuxParVectorInitAllocFactor(vector)      ((vector) -> init_alloc_factor)
#define nalu_hypre_AuxParVectorGrowFactor(vector)           ((vector) -> grow_factor)
#endif

#endif /* #ifndef nalu_hypre_AUX_PAR_VECTOR_HEADER */
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_IJMatrix structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_IJ_MATRIX_HEADER
#define nalu_hypre_IJ_MATRIX_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_IJMatrix:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_IJMatrix_struct
{
   MPI_Comm      comm;

   NALU_HYPRE_BigInt  row_partitioning[2]; /* distribution of rows across processors */
   NALU_HYPRE_BigInt  col_partitioning[2]; /* distribution of columns */

   NALU_HYPRE_Int     object_type;         /* Indicates the type of "object" */
   void         *object;              /* Structure for storing local portion */
   void         *translator;          /* optional storage_type specific structure
                                         for holding additional local info */
   void         *assumed_part;        /* IJMatrix assumed partition */
   NALU_HYPRE_Int     assemble_flag;       /* indicates whether matrix has been
                                         assembled */

   NALU_HYPRE_BigInt  global_first_row;    /* these four data items are necessary */
   NALU_HYPRE_BigInt  global_first_col;    /* to be able to avoid using the global */
   NALU_HYPRE_BigInt  global_num_rows;     /* global partition */
   NALU_HYPRE_BigInt  global_num_cols;
   NALU_HYPRE_Int     omp_flag;
   NALU_HYPRE_Int     print_level;

} nalu_hypre_IJMatrix;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_IJMatrix
 *--------------------------------------------------------------------------*/

#define nalu_hypre_IJMatrixComm(matrix)             ((matrix) -> comm)
#define nalu_hypre_IJMatrixRowPartitioning(matrix)  ((matrix) -> row_partitioning)
#define nalu_hypre_IJMatrixColPartitioning(matrix)  ((matrix) -> col_partitioning)

#define nalu_hypre_IJMatrixObjectType(matrix)       ((matrix) -> object_type)
#define nalu_hypre_IJMatrixObject(matrix)           ((matrix) -> object)
#define nalu_hypre_IJMatrixTranslator(matrix)       ((matrix) -> translator)
#define nalu_hypre_IJMatrixAssumedPart(matrix)      ((matrix) -> assumed_part)

#define nalu_hypre_IJMatrixAssembleFlag(matrix)     ((matrix) -> assemble_flag)

#define nalu_hypre_IJMatrixGlobalFirstRow(matrix)   ((matrix) -> global_first_row)
#define nalu_hypre_IJMatrixGlobalFirstCol(matrix)   ((matrix) -> global_first_col)
#define nalu_hypre_IJMatrixGlobalNumRows(matrix)    ((matrix) -> global_num_rows)
#define nalu_hypre_IJMatrixGlobalNumCols(matrix)    ((matrix) -> global_num_cols)
#define nalu_hypre_IJMatrixOMPFlag(matrix)          ((matrix) -> omp_flag)
#define nalu_hypre_IJMatrixPrintLevel(matrix)       ((matrix) -> print_level)

static inline NALU_HYPRE_MemoryLocation
nalu_hypre_IJMatrixMemoryLocation(nalu_hypre_IJMatrix *matrix)
{
   if ( nalu_hypre_IJMatrixObject(matrix) && nalu_hypre_IJMatrixObjectType(matrix) == NALU_HYPRE_PARCSR)
   {
      return nalu_hypre_ParCSRMatrixMemoryLocation( (nalu_hypre_ParCSRMatrix *) nalu_hypre_IJMatrixObject(matrix) );
   }

   return NALU_HYPRE_MEMORY_UNDEFINED;
}

/*--------------------------------------------------------------------------
 * prototypes for operations on local objects
 *--------------------------------------------------------------------------*/

#ifdef PETSC_AVAILABLE
/* IJMatrix_petsc.c */
NALU_HYPRE_Int
nalu_hypre_GetIJMatrixParCSRMatrix( NALU_HYPRE_IJMatrix IJmatrix, Mat *reference )
#endif

#ifdef ISIS_AVAILABLE
/* IJMatrix_isis.c */
NALU_HYPRE_Int
nalu_hypre_GetIJMatrixISISMatrix( NALU_HYPRE_IJMatrix IJmatrix, RowMatrix *reference )
#endif

#endif /* #ifndef nalu_hypre_IJ_MATRIX_HEADER */
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_IJMatrix structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_IJ_VECTOR_HEADER
#define nalu_hypre_IJ_VECTOR_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_IJVector:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_IJVector_struct
{
   MPI_Comm      comm;
   NALU_HYPRE_BigInt  partitioning[2];   /* Indicates partitioning over tasks */
   NALU_HYPRE_Int     num_components;    /* Number of components of a multivector */
   NALU_HYPRE_Int     object_type;       /* Indicates the type of "local storage" */
   void         *object;            /* Structure for storing local portion */
   void         *translator;        /* Structure for storing off processor
                                       information */
   void         *assumed_part;      /* IJ Vector assumed partition */
   NALU_HYPRE_BigInt  global_first_row;  /* these for data items are necessary */
   NALU_HYPRE_BigInt  global_num_rows;   /* to be able to avoid using the global partition */
   NALU_HYPRE_Int     print_level;
} nalu_hypre_IJVector;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_IJVector
 *--------------------------------------------------------------------------*/

#define nalu_hypre_IJVectorComm(vector)            ((vector) -> comm)
#define nalu_hypre_IJVectorPartitioning(vector)    ((vector) -> partitioning)
#define nalu_hypre_IJVectorNumComponents(vector)   ((vector) -> num_components)
#define nalu_hypre_IJVectorObjectType(vector)      ((vector) -> object_type)
#define nalu_hypre_IJVectorObject(vector)          ((vector) -> object)
#define nalu_hypre_IJVectorTranslator(vector)      ((vector) -> translator)
#define nalu_hypre_IJVectorAssumedPart(vector)     ((vector) -> assumed_part)
#define nalu_hypre_IJVectorGlobalFirstRow(vector)  ((vector) -> global_first_row)
#define nalu_hypre_IJVectorGlobalNumRows(vector)   ((vector) -> global_num_rows)
#define nalu_hypre_IJVectorPrintLevel(vector)      ((vector) -> print_level)

static inline NALU_HYPRE_MemoryLocation
nalu_hypre_IJVectorMemoryLocation(nalu_hypre_IJVector *vector)
{
   if ( nalu_hypre_IJVectorObject(vector) && nalu_hypre_IJVectorObjectType(vector) == NALU_HYPRE_PARCSR)
   {
      return nalu_hypre_ParVectorMemoryLocation( (nalu_hypre_ParVector *) nalu_hypre_IJVectorObject(vector) );
   }

   return NALU_HYPRE_MEMORY_UNDEFINED;
}

/*--------------------------------------------------------------------------
 * prototypes for operations on local objects
 *--------------------------------------------------------------------------*/
/* #include "./internal_protos.h" */

#endif /* #ifndef nalu_hypre_IJ_VECTOR_HEADER */
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/* aux_parcsr_matrix.c */
NALU_HYPRE_Int nalu_hypre_AuxParCSRMatrixCreate ( nalu_hypre_AuxParCSRMatrix **aux_matrix,
                                        NALU_HYPRE_Int local_num_rows, NALU_HYPRE_Int local_num_cols, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_AuxParCSRMatrixDestroy ( nalu_hypre_AuxParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_AuxParCSRMatrixSetRownnz ( nalu_hypre_AuxParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_AuxParCSRMatrixInitialize ( nalu_hypre_AuxParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_AuxParCSRMatrixInitialize_v2( nalu_hypre_AuxParCSRMatrix *matrix,
                                              NALU_HYPRE_MemoryLocation memory_location );

/* aux_par_vector.c */
NALU_HYPRE_Int nalu_hypre_AuxParVectorCreate ( nalu_hypre_AuxParVector **aux_vector );
NALU_HYPRE_Int nalu_hypre_AuxParVectorDestroy ( nalu_hypre_AuxParVector *vector );
NALU_HYPRE_Int nalu_hypre_AuxParVectorInitialize ( nalu_hypre_AuxParVector *vector );
NALU_HYPRE_Int nalu_hypre_AuxParVectorInitialize_v2( nalu_hypre_AuxParVector *vector,
                                           NALU_HYPRE_MemoryLocation memory_location );

/* IJ_assumed_part.c */
NALU_HYPRE_Int nalu_hypre_IJMatrixCreateAssumedPartition ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJVectorCreateAssumedPartition ( nalu_hypre_IJVector *vector );

/* IJMatrix.c */
NALU_HYPRE_Int nalu_hypre_IJMatrixGetRowPartitioning ( NALU_HYPRE_IJMatrix matrix,
                                             NALU_HYPRE_BigInt **row_partitioning );
NALU_HYPRE_Int nalu_hypre_IJMatrixGetColPartitioning ( NALU_HYPRE_IJMatrix matrix,
                                             NALU_HYPRE_BigInt **col_partitioning );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetObject ( NALU_HYPRE_IJMatrix matrix, void *object );
NALU_HYPRE_Int nalu_hypre_IJMatrixRead( const char *filename, MPI_Comm comm, NALU_HYPRE_Int type,
                              NALU_HYPRE_IJMatrix *matrix_ptr, NALU_HYPRE_Int is_mm );

/* IJMatrix_isis.c */
NALU_HYPRE_Int nalu_hypre_IJMatrixSetLocalSizeISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int local_m,
                                           NALU_HYPRE_Int local_n );
NALU_HYPRE_Int nalu_hypre_IJMatrixCreateISIS ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetRowSizesISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetDiagRowSizesISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetOffDiagRowSizesISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixInitializeISIS ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixInsertBlockISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int m, NALU_HYPRE_Int n,
                                          NALU_HYPRE_Int *rows, NALU_HYPRE_Int *cols, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddToBlockISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int m, NALU_HYPRE_Int n,
                                         NALU_HYPRE_BigInt *rows, NALU_HYPRE_BigInt *cols, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixInsertRowISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int n, NALU_HYPRE_BigInt row,
                                        NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddToRowISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int n, NALU_HYPRE_BigInt row,
                                       NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixAssembleISIS ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixDistributeISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_BigInt *row_starts,
                                         NALU_HYPRE_BigInt *col_starts );
NALU_HYPRE_Int nalu_hypre_IJMatrixApplyISIS ( nalu_hypre_IJMatrix *matrix, nalu_hypre_ParVector *x,
                                    nalu_hypre_ParVector *b );
NALU_HYPRE_Int nalu_hypre_IJMatrixDestroyISIS ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetTotalSizeISIS ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int size );

/* IJMatrix_parcsr.c */
NALU_HYPRE_Int nalu_hypre_IJMatrixCreateParCSR ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetRowSizesParCSR ( nalu_hypre_IJMatrix *matrix, const NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetDiagOffdSizesParCSR ( nalu_hypre_IJMatrix *matrix,
                                                 const NALU_HYPRE_Int *diag_sizes, const NALU_HYPRE_Int *offdiag_sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetMaxOffProcElmtsParCSR ( nalu_hypre_IJMatrix *matrix,
                                                   NALU_HYPRE_Int max_off_proc_elmts );
NALU_HYPRE_Int nalu_hypre_IJMatrixInitializeParCSR ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixGetRowCountsParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows,
                                             NALU_HYPRE_BigInt *rows, NALU_HYPRE_Int *ncols );
NALU_HYPRE_Int nalu_hypre_IJMatrixGetValuesParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows, NALU_HYPRE_Int *ncols,
                                          NALU_HYPRE_BigInt *rows, NALU_HYPRE_BigInt *cols, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetValuesParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows, NALU_HYPRE_Int *ncols,
                                          const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_Int *row_indexes, const NALU_HYPRE_BigInt *cols,
                                          const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetAddValuesParCSRDevice ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows,
                                                   NALU_HYPRE_Int *ncols, const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_Int *row_indexes, const NALU_HYPRE_BigInt *cols,
                                                   const NALU_HYPRE_Complex *values, const char *action );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetConstantValuesParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Complex value );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddToValuesParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows,
                                            NALU_HYPRE_Int *ncols, const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_Int *row_indexes, const NALU_HYPRE_BigInt *cols,
                                            const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJMatrixDestroyParCSR ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixTransposeParCSR ( nalu_hypre_IJMatrix  *matrix_A, nalu_hypre_IJMatrix *matrix_AT );
NALU_HYPRE_Int nalu_hypre_IJMatrixNormParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Real *norm );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddParCSR ( NALU_HYPRE_Complex alpha, nalu_hypre_IJMatrix *matrix_A,
                                    NALU_HYPRE_Complex beta, nalu_hypre_IJMatrix *matrix_B, nalu_hypre_IJMatrix *matrix_C );
NALU_HYPRE_Int nalu_hypre_IJMatrixAssembleOffProcValsParCSR ( nalu_hypre_IJMatrix *matrix,
                                                    NALU_HYPRE_Int off_proc_i_indx, NALU_HYPRE_Int max_off_proc_elmts, NALU_HYPRE_Int current_num_elmts,
                                                    NALU_HYPRE_MemoryLocation memory_location, NALU_HYPRE_BigInt *off_proc_i, NALU_HYPRE_BigInt *off_proc_j,
                                                    NALU_HYPRE_Complex *off_proc_data );
NALU_HYPRE_Int nalu_hypre_FillResponseIJOffProcVals ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                            NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                            NALU_HYPRE_Int *response_message_size );
NALU_HYPRE_Int nalu_hypre_FindProc ( NALU_HYPRE_BigInt *list, NALU_HYPRE_BigInt value, NALU_HYPRE_Int list_length );
NALU_HYPRE_Int nalu_hypre_IJMatrixAssembleParCSR ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetValuesOMPParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows,
                                             NALU_HYPRE_Int *ncols, const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_Int *row_indexes, const NALU_HYPRE_BigInt *cols,
                                             const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddToValuesOMPParCSR ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int nrows,
                                               NALU_HYPRE_Int *ncols, const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_Int *row_indexes, const NALU_HYPRE_BigInt *cols,
                                               const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJMatrixAssembleParCSRDevice(nalu_hypre_IJMatrix *matrix);
NALU_HYPRE_Int nalu_hypre_IJMatrixInitializeParCSR_v2(nalu_hypre_IJMatrix *matrix,
                                            NALU_HYPRE_MemoryLocation memory_location);
NALU_HYPRE_Int nalu_hypre_IJMatrixSetConstantValuesParCSRDevice( nalu_hypre_IJMatrix *matrix,
                                                       NALU_HYPRE_Complex value );

/* IJMatrix_petsc.c */
NALU_HYPRE_Int nalu_hypre_IJMatrixSetLocalSizePETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int local_m,
                                            NALU_HYPRE_Int local_n );
NALU_HYPRE_Int nalu_hypre_IJMatrixCreatePETSc ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetRowSizesPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetDiagRowSizesPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetOffDiagRowSizesPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int nalu_hypre_IJMatrixInitializePETSc ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixInsertBlockPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int m, NALU_HYPRE_Int n,
                                           NALU_HYPRE_BigInt *rows, NALU_HYPRE_BigInt *cols, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddToBlockPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int m, NALU_HYPRE_Int n,
                                          NALU_HYPRE_Int *rows, NALU_HYPRE_Int *cols, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixInsertRowPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int n, NALU_HYPRE_BigInt row,
                                         NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixAddToRowPETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int n, NALU_HYPRE_BigInt row,
                                        NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *coeffs );
NALU_HYPRE_Int nalu_hypre_IJMatrixAssemblePETSc ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixDistributePETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_BigInt *row_starts,
                                          NALU_HYPRE_BigInt *col_starts );
NALU_HYPRE_Int nalu_hypre_IJMatrixApplyPETSc ( nalu_hypre_IJMatrix *matrix, nalu_hypre_ParVector *x,
                                     nalu_hypre_ParVector *b );
NALU_HYPRE_Int nalu_hypre_IJMatrixDestroyPETSc ( nalu_hypre_IJMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_IJMatrixSetTotalSizePETSc ( nalu_hypre_IJMatrix *matrix, NALU_HYPRE_Int size );

/* IJVector.c */
NALU_HYPRE_Int nalu_hypre_IJVectorDistribute ( NALU_HYPRE_IJVector vector, const NALU_HYPRE_Int *vec_starts );
NALU_HYPRE_Int nalu_hypre_IJVectorZeroValues ( NALU_HYPRE_IJVector vector );

/* IJVector_parcsr.c */
NALU_HYPRE_Int nalu_hypre_IJVectorCreatePar ( nalu_hypre_IJVector *vector, NALU_HYPRE_BigInt *IJpartitioning );
NALU_HYPRE_Int nalu_hypre_IJVectorDestroyPar ( nalu_hypre_IJVector *vector );
NALU_HYPRE_Int nalu_hypre_IJVectorInitializePar ( nalu_hypre_IJVector *vector );
NALU_HYPRE_Int nalu_hypre_IJVectorInitializePar_v2(nalu_hypre_IJVector *vector,
                                         NALU_HYPRE_MemoryLocation memory_location);
NALU_HYPRE_Int nalu_hypre_IJVectorSetMaxOffProcElmtsPar ( nalu_hypre_IJVector *vector,
                                                NALU_HYPRE_Int max_off_proc_elmts );
NALU_HYPRE_Int nalu_hypre_IJVectorDistributePar ( nalu_hypre_IJVector *vector, const NALU_HYPRE_Int *vec_starts );
NALU_HYPRE_Int nalu_hypre_IJVectorZeroValuesPar ( nalu_hypre_IJVector *vector );
NALU_HYPRE_Int nalu_hypre_IJVectorSetComponentPar ( nalu_hypre_IJVector *vector, NALU_HYPRE_Int component);
NALU_HYPRE_Int nalu_hypre_IJVectorSetValuesPar ( nalu_hypre_IJVector *vector, NALU_HYPRE_Int num_values,
                                       const NALU_HYPRE_BigInt *indices, const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJVectorAddToValuesPar ( nalu_hypre_IJVector *vector, NALU_HYPRE_Int num_values,
                                         const NALU_HYPRE_BigInt *indices, const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJVectorAssemblePar ( nalu_hypre_IJVector *vector );
NALU_HYPRE_Int nalu_hypre_IJVectorGetValuesPar ( nalu_hypre_IJVector *vector, NALU_HYPRE_Int num_values,
                                       const NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_IJVectorAssembleOffProcValsPar ( nalu_hypre_IJVector *vector,
                                                 NALU_HYPRE_Int max_off_proc_elmts, NALU_HYPRE_Int current_num_elmts, NALU_HYPRE_MemoryLocation memory_location,
                                                 NALU_HYPRE_BigInt *off_proc_i, NALU_HYPRE_Complex *off_proc_data );
NALU_HYPRE_Int nalu_hypre_IJVectorSetAddValuesParDevice(nalu_hypre_IJVector *vector, NALU_HYPRE_Int num_values,
                                              const NALU_HYPRE_BigInt *indices, const NALU_HYPRE_Complex *values, const char *action);
NALU_HYPRE_Int nalu_hypre_IJVectorAssembleParDevice(nalu_hypre_IJVector *vector);

NALU_HYPRE_Int nalu_hypre_IJVectorUpdateValuesDevice( nalu_hypre_IJVector *vector, NALU_HYPRE_Int num_values,
                                            const NALU_HYPRE_BigInt *indices, const NALU_HYPRE_Complex *values, NALU_HYPRE_Int action);

/* NALU_HYPRE_IJMatrix.c */
NALU_HYPRE_Int NALU_HYPRE_IJMatrixCreate ( MPI_Comm comm, NALU_HYPRE_BigInt ilower, NALU_HYPRE_BigInt iupper,
                                 NALU_HYPRE_BigInt jlower, NALU_HYPRE_BigInt jupper, NALU_HYPRE_IJMatrix *matrix );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixDestroy ( NALU_HYPRE_IJMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixInitialize ( NALU_HYPRE_IJMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetPrintLevel ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int print_level );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetValues ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int nrows, NALU_HYPRE_Int *ncols,
                                    const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_BigInt *cols, const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetConstantValues ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Complex value );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixAddToValues ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int nrows, NALU_HYPRE_Int *ncols,
                                      const NALU_HYPRE_BigInt *rows, const NALU_HYPRE_BigInt *cols, const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixAssemble ( NALU_HYPRE_IJMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixGetRowCounts ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int nrows, NALU_HYPRE_BigInt *rows,
                                       NALU_HYPRE_Int *ncols );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixGetValues ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int nrows, NALU_HYPRE_Int *ncols,
                                    NALU_HYPRE_BigInt *rows, NALU_HYPRE_BigInt *cols, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetObjectType ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int type );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixGetObjectType ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int *type );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixGetLocalRange ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_BigInt *ilower,
                                        NALU_HYPRE_BigInt *iupper, NALU_HYPRE_BigInt *jlower, NALU_HYPRE_BigInt *jupper );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixGetObject ( NALU_HYPRE_IJMatrix matrix, void **object );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetRowSizes ( NALU_HYPRE_IJMatrix matrix, const NALU_HYPRE_Int *sizes );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetDiagOffdSizes ( NALU_HYPRE_IJMatrix matrix, const NALU_HYPRE_Int *diag_sizes,
                                           const NALU_HYPRE_Int *offdiag_sizes );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetMaxOffProcElmts ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int max_off_proc_elmts );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixRead ( const char *filename, MPI_Comm comm, NALU_HYPRE_Int type,
                               NALU_HYPRE_IJMatrix *matrix_ptr );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixReadMM( const char *filename, MPI_Comm comm, NALU_HYPRE_Int type,
                                NALU_HYPRE_IJMatrix *matrix_ptr );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixPrint ( NALU_HYPRE_IJMatrix matrix, const char *filename );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixSetOMPFlag ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Int omp_flag );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixTranspose ( NALU_HYPRE_IJMatrix  matrix_A, NALU_HYPRE_IJMatrix *matrix_AT );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixNorm ( NALU_HYPRE_IJMatrix matrix, NALU_HYPRE_Real *norm );
NALU_HYPRE_Int NALU_HYPRE_IJMatrixAdd ( NALU_HYPRE_Complex alpha, NALU_HYPRE_IJMatrix matrix_A, NALU_HYPRE_Complex beta,
                              NALU_HYPRE_IJMatrix matrix_B, NALU_HYPRE_IJMatrix *matrix_C );

/* NALU_HYPRE_IJVector.c */
NALU_HYPRE_Int NALU_HYPRE_IJVectorCreate ( MPI_Comm comm, NALU_HYPRE_BigInt jlower, NALU_HYPRE_BigInt jupper,
                                 NALU_HYPRE_IJVector *vector );
NALU_HYPRE_Int NALU_HYPRE_IJVectorSetNumComponents ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int num_components );
NALU_HYPRE_Int NALU_HYPRE_IJVectorSetComponent ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int component );
NALU_HYPRE_Int NALU_HYPRE_IJVectorDestroy ( NALU_HYPRE_IJVector vector );
NALU_HYPRE_Int NALU_HYPRE_IJVectorInitialize ( NALU_HYPRE_IJVector vector );
NALU_HYPRE_Int NALU_HYPRE_IJVectorSetPrintLevel ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int print_level );
NALU_HYPRE_Int NALU_HYPRE_IJVectorSetValues ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int nvalues,
                                    const NALU_HYPRE_BigInt *indices, const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_IJVectorAddToValues ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int nvalues,
                                      const NALU_HYPRE_BigInt *indices, const NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_IJVectorAssemble ( NALU_HYPRE_IJVector vector );
NALU_HYPRE_Int NALU_HYPRE_IJVectorGetValues ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int nvalues,
                                    const NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_IJVectorSetMaxOffProcElmts ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int max_off_proc_elmts );
NALU_HYPRE_Int NALU_HYPRE_IJVectorSetObjectType ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int type );
NALU_HYPRE_Int NALU_HYPRE_IJVectorGetObjectType ( NALU_HYPRE_IJVector vector, NALU_HYPRE_Int *type );
NALU_HYPRE_Int NALU_HYPRE_IJVectorGetLocalRange ( NALU_HYPRE_IJVector vector, NALU_HYPRE_BigInt *jlower,
                                        NALU_HYPRE_BigInt *jupper );
NALU_HYPRE_Int NALU_HYPRE_IJVectorGetObject ( NALU_HYPRE_IJVector vector, void **object );
NALU_HYPRE_Int NALU_HYPRE_IJVectorRead ( const char *filename, MPI_Comm comm, NALU_HYPRE_Int type,
                               NALU_HYPRE_IJVector *vector_ptr );
NALU_HYPRE_Int NALU_HYPRE_IJVectorPrint ( NALU_HYPRE_IJVector vector, const char *filename );
NALU_HYPRE_Int NALU_HYPRE_IJVectorInnerProd ( NALU_HYPRE_IJVector x, NALU_HYPRE_IJVector y, NALU_HYPRE_Real *prod );

#ifdef __cplusplus
}
#endif

#endif

