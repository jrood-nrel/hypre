
/*** DO NOT EDIT THIS FILE DIRECTLY (use 'headers' to generate) ***/


#ifndef nalu_hypre_STRUCT_MV_HEADER
#define nalu_hypre_STRUCT_MV_HEADER

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "NALU_HYPRE_struct_mv.h"
#include "_nalu_hypre_utilities.h"

#ifdef __cplusplus
extern "C" {
#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the Box structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_BOX_HEADER
#define nalu_hypre_BOX_HEADER

#ifndef NALU_HYPRE_MAXDIM
#define NALU_HYPRE_MAXDIM 3
#endif

/*--------------------------------------------------------------------------
 * nalu_hypre_Index:
 *   This is used to define indices in index space, or dimension
 *   sizes of boxes.
 *
 *   The spatial dimensions x, y, and z may be specified by the
 *   integers 0, 1, and 2, respectively (see the nalu_hypre_IndexD macro below).
 *   This simplifies the code in the nalu_hypre_Box class by reducing code
 *   replication.
 *--------------------------------------------------------------------------*/

typedef NALU_HYPRE_Int  nalu_hypre_Index[NALU_HYPRE_MAXDIM];
typedef NALU_HYPRE_Int *nalu_hypre_IndexRef;

/*--------------------------------------------------------------------------
 * nalu_hypre_Box:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_Box_struct
{
   nalu_hypre_Index imin;           /* min bounding indices */
   nalu_hypre_Index imax;           /* max bounding indices */
   NALU_HYPRE_Int   ndim;           /* number of dimensions */

} nalu_hypre_Box;

/*--------------------------------------------------------------------------
 * nalu_hypre_BoxArray:
 *   An array of boxes.
 *   Since size can be zero, need to store ndim separately.
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_BoxArray_struct
{
   nalu_hypre_Box  *boxes;         /* Array of boxes */
   NALU_HYPRE_Int   size;          /* Size of box array */
   NALU_HYPRE_Int   alloc_size;    /* Size of currently alloced space */
   NALU_HYPRE_Int   ndim;          /* number of dimensions */

} nalu_hypre_BoxArray;

#define nalu_hypre_BoxArrayExcess 10

/*--------------------------------------------------------------------------
 * nalu_hypre_BoxArrayArray:
 *   An array of box arrays.
 *   Since size can be zero, need to store ndim separately.
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_BoxArrayArray_struct
{
   nalu_hypre_BoxArray  **box_arrays;    /* Array of pointers to box arrays */
   NALU_HYPRE_Int         size;          /* Size of box array array */
   NALU_HYPRE_Int         ndim;          /* number of dimensions */

} nalu_hypre_BoxArrayArray;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_Index
 *--------------------------------------------------------------------------*/

#define nalu_hypre_IndexD(index, d)  (index[d])

/* Avoid using these macros */
#define nalu_hypre_IndexX(index)     nalu_hypre_IndexD(index, 0)
#define nalu_hypre_IndexY(index)     nalu_hypre_IndexD(index, 1)
#define nalu_hypre_IndexZ(index)     nalu_hypre_IndexD(index, 2)

/*--------------------------------------------------------------------------
 * Member functions: nalu_hypre_Index
 *--------------------------------------------------------------------------*/

/*----- Avoid using these Index macros -----*/

#define nalu_hypre_SetIndex3(index, ix, iy, iz) \
( nalu_hypre_IndexD(index, 0) = ix,\
  nalu_hypre_IndexD(index, 1) = iy,\
  nalu_hypre_IndexD(index, 2) = iz )

#define nalu_hypre_ClearIndex(index)  nalu_hypre_SetIndex(index, 0)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_Box
 *--------------------------------------------------------------------------*/

#define nalu_hypre_BoxIMin(box)     ((box) -> imin)
#define nalu_hypre_BoxIMax(box)     ((box) -> imax)
#define nalu_hypre_BoxNDim(box)     ((box) -> ndim)

#define nalu_hypre_BoxIMinD(box, d) (nalu_hypre_IndexD(nalu_hypre_BoxIMin(box), d))
#define nalu_hypre_BoxIMaxD(box, d) (nalu_hypre_IndexD(nalu_hypre_BoxIMax(box), d))
#define nalu_hypre_BoxSizeD(box, d) \
nalu_hypre_max(0, (nalu_hypre_BoxIMaxD(box, d) - nalu_hypre_BoxIMinD(box, d) + 1))

#define nalu_hypre_IndexDInBox(index, d, box) \
( nalu_hypre_IndexD(index, d) >= nalu_hypre_BoxIMinD(box, d) && \
  nalu_hypre_IndexD(index, d) <= nalu_hypre_BoxIMaxD(box, d) )

/* The first nalu_hypre_CCBoxIndexRank is better style because it is similar to
   nalu_hypre_BoxIndexRank.  The second one sometimes avoids compiler warnings. */
#define nalu_hypre_CCBoxIndexRank(box, index) 0
#define nalu_hypre_CCBoxIndexRank_noargs() 0
#define nalu_hypre_CCBoxOffsetDistance(box, index) 0

/*----- Avoid using these Box macros -----*/

#define nalu_hypre_BoxSizeX(box)    nalu_hypre_BoxSizeD(box, 0)
#define nalu_hypre_BoxSizeY(box)    nalu_hypre_BoxSizeD(box, 1)
#define nalu_hypre_BoxSizeZ(box)    nalu_hypre_BoxSizeD(box, 2)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_BoxArray
 *--------------------------------------------------------------------------*/

#define nalu_hypre_BoxArrayBoxes(box_array)     ((box_array) -> boxes)
#define nalu_hypre_BoxArrayBox(box_array, i)    &((box_array) -> boxes[(i)])
#define nalu_hypre_BoxArraySize(box_array)      ((box_array) -> size)
#define nalu_hypre_BoxArrayAllocSize(box_array) ((box_array) -> alloc_size)
#define nalu_hypre_BoxArrayNDim(box_array)      ((box_array) -> ndim)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_BoxArrayArray
 *--------------------------------------------------------------------------*/

#define nalu_hypre_BoxArrayArrayBoxArrays(box_array_array) \
((box_array_array) -> box_arrays)
#define nalu_hypre_BoxArrayArrayBoxArray(box_array_array, i) \
((box_array_array) -> box_arrays[(i)])
#define nalu_hypre_BoxArrayArraySize(box_array_array) \
((box_array_array) -> size)
#define nalu_hypre_BoxArrayArrayNDim(box_array_array) \
((box_array_array) -> ndim)

/*--------------------------------------------------------------------------
 * Looping macros:
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ForBoxI(i, box_array) \
for (i = 0; i < nalu_hypre_BoxArraySize(box_array); i++)

#define nalu_hypre_ForBoxArrayI(i, box_array_array) \
for (i = 0; i < nalu_hypre_BoxArrayArraySize(box_array_array); i++)

#define ZYPRE_BOX_PRIVATE nalu_hypre__IN,nalu_hypre__JN,nalu_hypre__I,nalu_hypre__J,nalu_hypre__d,nalu_hypre__i
#define NALU_HYPRE_BOX_PRIVATE ZYPRE_BOX_PRIVATE

#define zypre_BoxLoopDeclare() \
NALU_HYPRE_Int  nalu_hypre__tot, nalu_hypre__div, nalu_hypre__mod;\
NALU_HYPRE_Int  nalu_hypre__block, nalu_hypre__num_blocks;\
NALU_HYPRE_Int  nalu_hypre__d, nalu_hypre__ndim;\
NALU_HYPRE_Int  nalu_hypre__I, nalu_hypre__J, nalu_hypre__IN, nalu_hypre__JN;\
NALU_HYPRE_Int  nalu_hypre__i[NALU_HYPRE_MAXDIM+1], nalu_hypre__n[NALU_HYPRE_MAXDIM+1]

#define zypre_BoxLoopDeclareK(k) \
NALU_HYPRE_Int  nalu_hypre__ikstart##k, nalu_hypre__i0inc##k;\
NALU_HYPRE_Int  nalu_hypre__sk##k[NALU_HYPRE_MAXDIM], nalu_hypre__ikinc##k[NALU_HYPRE_MAXDIM+1]

#define zypre_BoxLoopInit(ndim, loop_size) \
nalu_hypre__ndim = ndim;\
nalu_hypre__n[0] = loop_size[0];\
nalu_hypre__tot = 1;\
for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
{\
   nalu_hypre__n[nalu_hypre__d] = loop_size[nalu_hypre__d];\
   nalu_hypre__tot *= nalu_hypre__n[nalu_hypre__d];\
}\
nalu_hypre__n[nalu_hypre__ndim] = 2;\
nalu_hypre__num_blocks = nalu_hypre_NumThreads();\
if (nalu_hypre__tot < nalu_hypre__num_blocks)\
{\
   nalu_hypre__num_blocks = nalu_hypre__tot;\
}\
if (nalu_hypre__num_blocks > 0)\
{\
   nalu_hypre__div = nalu_hypre__tot / nalu_hypre__num_blocks;\
   nalu_hypre__mod = nalu_hypre__tot % nalu_hypre__num_blocks;\
}

#define zypre_BoxLoopInitK(k, dboxk, startk, stridek, ik) \
nalu_hypre__sk##k[0] = stridek[0];\
nalu_hypre__ikinc##k[0] = 0;\
ik = nalu_hypre_BoxSizeD(dboxk, 0); /* temporarily use ik */\
for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
{\
   nalu_hypre__sk##k[nalu_hypre__d] = ik*stridek[nalu_hypre__d];\
   nalu_hypre__ikinc##k[nalu_hypre__d] = nalu_hypre__ikinc##k[nalu_hypre__d-1] +\
      nalu_hypre__sk##k[nalu_hypre__d] - nalu_hypre__n[nalu_hypre__d-1]*nalu_hypre__sk##k[nalu_hypre__d-1];\
   ik *= nalu_hypre_BoxSizeD(dboxk, nalu_hypre__d);\
}\
nalu_hypre__i0inc##k = nalu_hypre__sk##k[0];\
nalu_hypre__ikinc##k[nalu_hypre__ndim] = 0;\
nalu_hypre__ikstart##k = nalu_hypre_BoxIndexRank(dboxk, startk)

#define zypre_BoxLoopSet() \
nalu_hypre__IN = nalu_hypre__n[0];\
if (nalu_hypre__num_blocks > 1)/* in case user sets num_blocks to 1 */\
{\
   nalu_hypre__JN = nalu_hypre__div + ((nalu_hypre__mod > nalu_hypre__block) ? 1 : 0);\
   nalu_hypre__J = nalu_hypre__block * nalu_hypre__div + nalu_hypre_min(nalu_hypre__mod, nalu_hypre__block);\
   for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
   {\
      nalu_hypre__i[nalu_hypre__d] = nalu_hypre__J % nalu_hypre__n[nalu_hypre__d];\
      nalu_hypre__J /= nalu_hypre__n[nalu_hypre__d];\
   }\
}\
else\
{\
   nalu_hypre__JN = nalu_hypre__tot;\
   for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
   {\
      nalu_hypre__i[nalu_hypre__d] = 0;\
   }\
}\
nalu_hypre__i[nalu_hypre__ndim] = 0

#define zypre_BoxLoopSetK(k, ik) \
ik = nalu_hypre__ikstart##k;\
for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
{\
   ik += nalu_hypre__i[nalu_hypre__d]*nalu_hypre__sk##k[nalu_hypre__d];\
}

#define zypre_BoxLoopInc1() \
nalu_hypre__d = 1;\
while ((nalu_hypre__i[nalu_hypre__d]+2) > nalu_hypre__n[nalu_hypre__d])\
{\
   nalu_hypre__d++;\
}

#define zypre_BoxLoopInc2() \
nalu_hypre__i[nalu_hypre__d]++;\
while (nalu_hypre__d > 1)\
{\
   nalu_hypre__d--;\
   nalu_hypre__i[nalu_hypre__d] = 0;\
}

/* This returns the loop index (of type nalu_hypre_Index) for the current iteration,
 * where the numbering starts at 0.  It works even when threading is turned on,
 * as long as 'index' is declared to be private. */
#define zypre_BoxLoopGetIndex(index) \
index[0] = nalu_hypre__I;\
for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
{\
   index[nalu_hypre__d] = nalu_hypre__i[nalu_hypre__d];\
}

/* Use this before the For macros below to force only one block */
#define zypre_BoxLoopSetOneBlock() nalu_hypre__num_blocks = 1

/* Use this to get the block iteration inside a BoxLoop */
#define zypre_BoxLoopBlock() nalu_hypre__block

#define zypre_BasicBoxLoopInitK(k, stridek) \
nalu_hypre__sk##k[0] = stridek[0];\
nalu_hypre__ikinc##k[0] = 0;\
for (nalu_hypre__d = 1; nalu_hypre__d < nalu_hypre__ndim; nalu_hypre__d++)\
{\
   nalu_hypre__sk##k[nalu_hypre__d] = stridek[nalu_hypre__d];\
   nalu_hypre__ikinc##k[nalu_hypre__d] = nalu_hypre__ikinc##k[nalu_hypre__d-1] +\
      nalu_hypre__sk##k[nalu_hypre__d] - nalu_hypre__n[nalu_hypre__d-1]*nalu_hypre__sk##k[nalu_hypre__d-1];\
}\
nalu_hypre__i0inc##k = nalu_hypre__sk##k[0];\
nalu_hypre__ikinc##k[nalu_hypre__ndim] = 0;\
nalu_hypre__ikstart##k = 0

/*--------------------------------------------------------------------------
 * NOTES - Keep these for reference here and elsewhere in the code
 *--------------------------------------------------------------------------*/

#if 0

#define nalu_hypre_BoxLoop2Begin(loop_size,
dbox1, start1, stride1, i1,
       dbox2, start2, stride2, i2)
{
   /* init nalu_hypre__i1start */
   NALU_HYPRE_Int  nalu_hypre__i1start = nalu_hypre_BoxIndexRank(dbox1, start1);
   NALU_HYPRE_Int  nalu_hypre__i2start = nalu_hypre_BoxIndexRank(dbox2, start2);
   /* declare and set nalu_hypre__s1 */
   nalu_hypre_BoxLoopDeclareS(dbox1, stride1, nalu_hypre__sx1, nalu_hypre__sy1, nalu_hypre__sz1);
   nalu_hypre_BoxLoopDeclareS(dbox2, stride2, nalu_hypre__sx2, nalu_hypre__sy2, nalu_hypre__sz2);
   /* declare and set nalu_hypre__n, nalu_hypre__m, nalu_hypre__dir, nalu_hypre__max,
    *                 nalu_hypre__div, nalu_hypre__mod, nalu_hypre__block, nalu_hypre__num_blocks */
   nalu_hypre_BoxLoopDeclareN(loop_size);

#define nalu_hypre_BoxLoop2For(i, j, k, i1, i2)
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)
   {
      /* set i and nalu_hypre__n */
      nalu_hypre_BoxLoopSet(i, j, k);
      /* set i1 */
      i1 = nalu_hypre__i1start + i * nalu_hypre__sx1 + j * nalu_hypre__sy1 + k * nalu_hypre__sz1;
      i2 = nalu_hypre__i2start + i * nalu_hypre__sx2 + j * nalu_hypre__sy2 + k * nalu_hypre__sz2;
      for (k = 0; k < nalu_hypre__nz; k++)
      {
         for (j = 0; j < nalu_hypre__ny; j++)
         {
            for (i = 0; i < nalu_hypre__nx; i++)
            {

#define nalu_hypre_BoxLoop2End(i1, i2)
               i1 += nalu_hypre__sx1;
               i2 += nalu_hypre__sx2;
            }
            i1 += nalu_hypre__sy1 - nalu_hypre__nx * nalu_hypre__sx1;
            i2 += nalu_hypre__sy2 - nalu_hypre__nx * nalu_hypre__sx2;
         }
         i1 += nalu_hypre__sz1 - nalu_hypre__ny * nalu_hypre__sy1;
         i2 += nalu_hypre__sz2 - nalu_hypre__ny * nalu_hypre__sy2;
      }
   }
}

/*----------------------------------------
 * Idea 2: Simple version of Idea 3 below
 *----------------------------------------*/

N = 1;
for (d = 0; d < ndim; d++)
{
N *= n[d];
   i[d] = 0;
   n[d] -= 2; /* this produces a simpler comparison below */
}
i[ndim] = 0;
n[ndim] = 0;
for (I = 0; I < N; I++)
{
/* loop body */

for (d = 0; i[d] > n[d]; d++)
   {
      i[d] = 0;
   }
   i[d]++;
   i1 += s1[d]; /* NOTE: These are different from nalu_hypre__sx1, etc. above */
   i2 += s2[d]; /* The lengths of i, n, and s must be (ndim+1) */
}

/*----------------------------------------
 * Idea 3: Approach used in the box loops
 *----------------------------------------*/

N = 1;
for (d = 1; d < ndim; d++)
{
N *= n[d];
   i[d] = 0;
   n[d] -= 2; /* this produces a simpler comparison below */
}
i[ndim] = 0;
n[ndim] = 0;
for (J = 0; J < N; J++)
{
for (I = 0; I < n[0]; I++)
   {
      /* loop body */

      i1 += s1[0];
      i2 += s2[0];
   }
   for (d = 1; i[d] > n[d]; d++)
   {
      i[d] = 0;
   }
   i[d]++;
   i1 += s1[d]; /* NOTE: These are different from nalu_hypre__sx1, etc. above */
   i2 += s2[d]; /* The lengths of i, n, and s must be (ndim+1) */
}

#endif
#endif /* #ifndef nalu_hypre_BOX_HEADER */

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the struct assumed partition
 *
 *****************************************************************************/

#ifndef nalu_hypre_ASSUMED_PART_HEADER
#define nalu_hypre_ASSUMED_PART_HEADER

typedef struct
{
   /* the entries will be the same for all procs */
   NALU_HYPRE_Int           ndim;             /* number of dimensions */
   nalu_hypre_BoxArray     *regions;          /* areas of the grid with boxes */
   NALU_HYPRE_Int           num_regions;      /* how many regions */
   NALU_HYPRE_Int          *proc_partitions;  /* proc ids assigned to each region
                                            (this is size num_regions +1) */
   nalu_hypre_Index        *divisions;        /* number of proc divisions in each
                                            direction for each region */
   /* these entries are specific to each proc */
   nalu_hypre_BoxArray     *my_partition;        /* my portion of grid (at most 2) */
   nalu_hypre_BoxArray     *my_partition_boxes;  /* boxes in my portion */
   NALU_HYPRE_Int          *my_partition_proc_ids;
   NALU_HYPRE_Int          *my_partition_boxnums;
   NALU_HYPRE_Int           my_partition_ids_size;
   NALU_HYPRE_Int           my_partition_ids_alloc;
   NALU_HYPRE_Int           my_partition_num_distinct_procs;

} nalu_hypre_StructAssumedPart;


/*Accessor macros */

#define nalu_hypre_StructAssumedPartNDim(apart) ((apart)->ndim)
#define nalu_hypre_StructAssumedPartRegions(apart) ((apart)->regions)
#define nalu_hypre_StructAssumedPartNumRegions(apart) ((apart)->num_regions)
#define nalu_hypre_StructAssumedPartDivisions(apart) ((apart)->divisions)
#define nalu_hypre_StructAssumedPartDivision(apart, i) ((apart)->divisions[i])
#define nalu_hypre_StructAssumedPartProcPartitions(apart) ((apart)->proc_partitions)
#define nalu_hypre_StructAssumedPartProcPartition(apart, i) ((apart)->proc_partitions[i])
#define nalu_hypre_StructAssumedPartMyPartition(apart) ((apart)->my_partition)
#define nalu_hypre_StructAssumedPartMyPartitionBoxes(apart) ((apart)->my_partition_boxes)
#define nalu_hypre_StructAssumedPartMyPartitionProcIds(apart) ((apart)->my_partition_proc_ids)
#define nalu_hypre_StructAssumedPartMyPartitionIdsSize(apart) ((apart)->my_partition_ids_size)
#define nalu_hypre_StructAssumedPartMyPartitionIdsAlloc(apart) ((apart)->my_partition_ids_alloc)
#define nalu_hypre_StructAssumedPartMyPartitionNumDistinctProcs(apart) ((apart)->my_partition_num_distinct_procs)
#define nalu_hypre_StructAssumedPartMyPartitionBoxnums(apart) ((apart)->my_partition_boxnums)

#define nalu_hypre_StructAssumedPartMyPartitionProcId(apart, i) ((apart)->my_partition_proc_ids[i])
#define nalu_hypre_StructAssumedPartMyPartitionBoxnum(apart, i) ((apart)->my_partition_boxnums[i])
#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

#ifndef nalu_hypre_BOX_MANAGER_HEADER
#define nalu_hypre_BOX_MANAGER_HEADER

/*--------------------------------------------------------------------------
 * BoxManEntry
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_BoxManEntry_struct
{
   nalu_hypre_Index imin; /* Extents of box */
   nalu_hypre_Index imax;
   NALU_HYPRE_Int   ndim; /* Number of dimensions */

   NALU_HYPRE_Int proc; /* This is a two-part unique id: (proc, id) */
   NALU_HYPRE_Int id;
   NALU_HYPRE_Int num_ghost[2 * NALU_HYPRE_MAXDIM];

   NALU_HYPRE_Int position; /* This indicates the location of the entry in the the
                        * box manager entries array and is used for pairing with
                        * the info object (populated in addentry) */

   void *boxman; /* The owning manager (populated in addentry) */

   struct nalu_hypre_BoxManEntry_struct  *next;

} nalu_hypre_BoxManEntry;

/*---------------------------------------------------------------------------
 * Box Manager: organizes arbitrary information in a spatial way
 *----------------------------------------------------------------------------*/

typedef struct
{
   MPI_Comm            comm;

   NALU_HYPRE_Int           max_nentries; /* storage allocated for entries */

   NALU_HYPRE_Int           is_gather_called; /* Boolean to indicate whether
                                            GatherEntries function has been
                                            called (prior to assemble) - may not
                                            want this (can tell by the size of
                                            gather_regions array) */

   nalu_hypre_BoxArray     *gather_regions; /* This is where we collect boxes input
                                          by calls to BoxManGatherEntries - to
                                          be gathered in the assemble.  These
                                          are then deleted after the assemble */


   NALU_HYPRE_Int           all_global_known; /* Boolean to say that every processor
                                            already has all of the global data
                                            for this manager (this could be
                                            accessed by a coarsening routine,
                                            for example) */

   NALU_HYPRE_Int           is_entries_sort; /* Boolean to say that entries were
                                           added in sorted order (id, proc)
                                           (this could be accessed by a
                                           coarsening routine, for example) */

   NALU_HYPRE_Int           entry_info_size; /* In bytes, the (max) size of the info
                                           object for the entries */

   NALU_HYPRE_Int           is_assembled; /* Flag to indicate if the box manager has
                                        been assembled (used to control whether
                                        or not functions can be used prior to
                                        assemble) */

   /* Storing the entries */
   NALU_HYPRE_Int          nentries; /* Number of entries stored */
   nalu_hypre_BoxManEntry *entries;  /* Actual box manager entries - sorted by
                                   (proc, id) at the end of the assemble) */

   NALU_HYPRE_Int         *procs_sort; /* The sorted procs corresponding to entries */
   NALU_HYPRE_Int         *ids_sort; /* Sorted ids corresponding to the entries */

   NALU_HYPRE_Int          num_procs_sort; /* Number of distinct procs in entries */
   NALU_HYPRE_Int         *procs_sort_offsets; /* Offsets for procs into the
                                             entry_sort array */
   NALU_HYPRE_Int          first_local; /* Position of local infomation in entries */
   NALU_HYPRE_Int          local_proc_offset; /* Position of local information in
                                            offsets */

   /* Here is the table  that organizes the entries spatially (by index) */
   nalu_hypre_BoxManEntry **index_table; /* This points into 'entries' array and
                                       corresponds to the index arays */

   NALU_HYPRE_Int          *indexes[NALU_HYPRE_MAXDIM]; /* Indexes (ordered) for imin and
                                                 imax of each box in the entries
                                                 array */
   NALU_HYPRE_Int           size[NALU_HYPRE_MAXDIM]; /* How many indexes in each
                                              direction */

   NALU_HYPRE_Int           last_index[NALU_HYPRE_MAXDIM]; /* Last index used in the
                                                    indexes map */

   NALU_HYPRE_Int           num_my_entries; /* Num entries with proc_id = myid */
   NALU_HYPRE_Int          *my_ids; /* Array of ids corresponding to my entries */
   nalu_hypre_BoxManEntry **my_entries; /* Points into entries that are mine and
                                      corresponds to my_ids array.  This is
                                      destroyed in the assemble. */

   void               *info_objects; /* Array of info objects (each of size
                                        entry_info_size), managed byte-wise */

   nalu_hypre_StructAssumedPart *assumed_partition; /* The assumed partition object.
                                                  For now this is only used
                                                  during the assemble (where it
                                                  is created). */
   NALU_HYPRE_Int           ndim; /* Problem dimension (known in the grid) */

   nalu_hypre_Box          *bounding_box; /* Bounding box from associated grid */

   NALU_HYPRE_Int           next_id; /* Counter to indicate the next id that would be
                                   unique (regardless of proc id) */

   /* Ghost stuff  */
   NALU_HYPRE_Int           num_ghost[2 * NALU_HYPRE_MAXDIM];

} nalu_hypre_BoxManager;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_BoxMan
 *--------------------------------------------------------------------------*/

#define nalu_hypre_BoxManComm(manager)               ((manager) -> comm)

#define nalu_hypre_BoxManMaxNEntries(manager)        ((manager) -> max_nentries)

#define nalu_hypre_BoxManIsGatherCalled(manager)     ((manager) -> is_gather_called)
#define nalu_hypre_BoxManIsEntriesSort(manager)      ((manager) -> is_entries_sort)
#define nalu_hypre_BoxManGatherRegions(manager)      ((manager) -> gather_regions)
#define nalu_hypre_BoxManAllGlobalKnown(manager)     ((manager) -> all_global_known)
#define nalu_hypre_BoxManEntryInfoSize(manager)      ((manager) -> entry_info_size)
#define nalu_hypre_BoxManNEntries(manager)           ((manager) -> nentries)
#define nalu_hypre_BoxManEntries(manager)            ((manager) -> entries)
#define nalu_hypre_BoxManInfoObjects(manager)        ((manager) -> info_objects)
#define nalu_hypre_BoxManIsAssembled(manager)        ((manager) -> is_assembled)

#define nalu_hypre_BoxManProcsSort(manager)          ((manager) -> procs_sort)
#define nalu_hypre_BoxManIdsSort(manager)            ((manager) -> ids_sort)
#define nalu_hypre_BoxManNumProcsSort(manager)       ((manager) -> num_procs_sort)
#define nalu_hypre_BoxManProcsSortOffsets(manager)   ((manager) -> procs_sort_offsets)
#define nalu_hypre_BoxManLocalProcOffset(manager)    ((manager) -> local_proc_offset)

#define nalu_hypre_BoxManFirstLocal(manager)         ((manager) -> first_local)

#define nalu_hypre_BoxManIndexTable(manager)         ((manager) -> index_table)
#define nalu_hypre_BoxManIndexes(manager)            ((manager) -> indexes)
#define nalu_hypre_BoxManSize(manager)               ((manager) -> size)
#define nalu_hypre_BoxManLastIndex(manager)          ((manager) -> last_index)

#define nalu_hypre_BoxManNumMyEntries(manager)       ((manager) -> num_my_entries)
#define nalu_hypre_BoxManMyIds(manager)              ((manager) -> my_ids)
#define nalu_hypre_BoxManMyEntries(manager)          ((manager) -> my_entries)
#define nalu_hypre_BoxManAssumedPartition(manager)   ((manager) -> assumed_partition)
#define nalu_hypre_BoxManNDim(manager)               ((manager) -> ndim)
#define nalu_hypre_BoxManBoundingBox(manager)        ((manager) -> bounding_box)

#define nalu_hypre_BoxManNextId(manager)             ((manager) -> next_id)

#define nalu_hypre_BoxManNumGhost(manager)           ((manager) -> num_ghost)

#define nalu_hypre_BoxManIndexesD(manager, d)    nalu_hypre_BoxManIndexes(manager)[d]
#define nalu_hypre_BoxManSizeD(manager, d)       nalu_hypre_BoxManSize(manager)[d]
#define nalu_hypre_BoxManLastIndexD(manager, d)  nalu_hypre_BoxManLastIndex(manager)[d]

#define nalu_hypre_BoxManInfoObject(manager, i) \
(void *) ((char *)nalu_hypre_BoxManInfoObjects(manager) + i* nalu_hypre_BoxManEntryInfoSize(manager))

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_BoxManEntry
 *--------------------------------------------------------------------------*/

#define nalu_hypre_BoxManEntryIMin(entry)     ((entry) -> imin)
#define nalu_hypre_BoxManEntryIMax(entry)     ((entry) -> imax)
#define nalu_hypre_BoxManEntryNDim(entry)     ((entry) -> ndim)
#define nalu_hypre_BoxManEntryProc(entry)     ((entry) -> proc)
#define nalu_hypre_BoxManEntryId(entry)       ((entry) -> id)
#define nalu_hypre_BoxManEntryPosition(entry) ((entry) -> position)
#define nalu_hypre_BoxManEntryNumGhost(entry) ((entry) -> num_ghost)
#define nalu_hypre_BoxManEntryNext(entry)     ((entry) -> next)
#define nalu_hypre_BoxManEntryBoxMan(entry)   ((entry) -> boxman)

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_StructGrid structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_STRUCT_GRID_HEADER
#define nalu_hypre_STRUCT_GRID_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_StructGrid:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_StructGrid_struct
{
   MPI_Comm             comm;

   NALU_HYPRE_Int            ndim;         /* Number of grid dimensions */

   nalu_hypre_BoxArray      *boxes;        /* Array of boxes in this process */
   NALU_HYPRE_Int           *ids;          /* Unique IDs for boxes */
   nalu_hypre_Index          max_distance; /* Neighborhood size - in each dimension*/

   nalu_hypre_Box           *bounding_box; /* Bounding box around grid */

   NALU_HYPRE_Int            local_size;   /* Number of grid points locally */
   NALU_HYPRE_BigInt         global_size;  /* Total number of grid points */

   nalu_hypre_Index          periodic;     /* Indicates if grid is periodic */
   NALU_HYPRE_Int            num_periods;  /* number of box set periods */

   nalu_hypre_Index         *pshifts;      /* shifts of periodicity */


   NALU_HYPRE_Int            ref_count;


   NALU_HYPRE_Int            ghlocal_size; /* Number of vars in box including ghosts */
   NALU_HYPRE_Int            num_ghost[2 * NALU_HYPRE_MAXDIM]; /* ghost layer size */

   nalu_hypre_BoxManager    *boxman;
} nalu_hypre_StructGrid;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_StructGrid
 *--------------------------------------------------------------------------*/

#define nalu_hypre_StructGridComm(grid)          ((grid) -> comm)
#define nalu_hypre_StructGridNDim(grid)          ((grid) -> ndim)
#define nalu_hypre_StructGridBoxes(grid)         ((grid) -> boxes)
#define nalu_hypre_StructGridIDs(grid)           ((grid) -> ids)
#define nalu_hypre_StructGridMaxDistance(grid)   ((grid) -> max_distance)
#define nalu_hypre_StructGridBoundingBox(grid)   ((grid) -> bounding_box)
#define nalu_hypre_StructGridLocalSize(grid)     ((grid) -> local_size)
#define nalu_hypre_StructGridGlobalSize(grid)    ((grid) -> global_size)
#define nalu_hypre_StructGridPeriodic(grid)      ((grid) -> periodic)
#define nalu_hypre_StructGridNumPeriods(grid)    ((grid) -> num_periods)
#define nalu_hypre_StructGridPShifts(grid)       ((grid) -> pshifts)
#define nalu_hypre_StructGridPShift(grid, i)     ((grid) -> pshifts[i])
#define nalu_hypre_StructGridRefCount(grid)      ((grid) -> ref_count)
#define nalu_hypre_StructGridGhlocalSize(grid)   ((grid) -> ghlocal_size)
#define nalu_hypre_StructGridNumGhost(grid)      ((grid) -> num_ghost)
#define nalu_hypre_StructGridBoxMan(grid)        ((grid) -> boxman)

#define nalu_hypre_StructGridBox(grid, i)        (nalu_hypre_BoxArrayBox(nalu_hypre_StructGridBoxes(grid), i))
#define nalu_hypre_StructGridNumBoxes(grid)      (nalu_hypre_BoxArraySize(nalu_hypre_StructGridBoxes(grid)))

#define nalu_hypre_StructGridIDPeriod(grid)      nalu_hypre_BoxNeighborsIDPeriod(nalu_hypre_StructGridNeighbors(grid))
#if 0 //defined(NALU_HYPRE_USING_CUDA) || defined(NALU_HYPRE_USING_HIP)
#define nalu_hypre_StructGridDataLocation(grid)  ((grid) -> data_location)
#endif
/*--------------------------------------------------------------------------
 * Looping macros:
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ForStructGridBoxI(i, grid)    nalu_hypre_ForBoxI(i, nalu_hypre_StructGridBoxes(grid))

#if 0 //defined(NALU_HYPRE_USING_CUDA) || defined(NALU_HYPRE_USING_HIP)
#define NALU_HYPRE_MIN_GPU_SIZE                  (131072)
#define nalu_hypre_SetDeviceOn()                 nalu_hypre_HandleStructExecPolicy(nalu_hypre_handle()) = NALU_HYPRE_EXEC_DEVICE
#define nalu_hypre_SetDeviceOff()                nalu_hypre_HandleStructExecPolicy(nalu_hypre_handle()) = NALU_HYPRE_EXEC_HOST
#endif

#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for nalu_hypre_StructStencil data structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_STRUCT_STENCIL_HEADER
#define nalu_hypre_STRUCT_STENCIL_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_StructStencil
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_StructStencil_struct
{
   nalu_hypre_Index   *shape;   /* Description of a stencil's shape */
   NALU_HYPRE_Int      size;    /* Number of stencil coefficients */

   NALU_HYPRE_Int      ndim;    /* Number of dimensions */

   NALU_HYPRE_Int      ref_count;
} nalu_hypre_StructStencil;

/*--------------------------------------------------------------------------
 * Accessor functions for the nalu_hypre_StructStencil structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_StructStencilShape(stencil)      ((stencil) -> shape)
#define nalu_hypre_StructStencilSize(stencil)       ((stencil) -> size)
#define nalu_hypre_StructStencilNDim(stencil)       ((stencil) -> ndim)
#define nalu_hypre_StructStencilRefCount(stencil)   ((stencil) -> ref_count)
#define nalu_hypre_StructStencilElement(stencil, i) nalu_hypre_StructStencilShape(stencil)[i]

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

#ifndef nalu_hypre_COMMUNICATION_HEADER
#define nalu_hypre_COMMUNICATION_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_CommInfo:
 *
 * For "reverse" communication, send_transforms is not needed (may be NULL).
 * For "forward" communication, recv_transforms is not needed (may be NULL).
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_CommInfo_struct
{
   NALU_HYPRE_Int              ndim;
   nalu_hypre_BoxArrayArray   *send_boxes;
   nalu_hypre_Index            send_stride;
   NALU_HYPRE_Int            **send_processes;
   NALU_HYPRE_Int            **send_rboxnums;
   nalu_hypre_BoxArrayArray   *send_rboxes;  /* send_boxes, some with periodic shift */

   nalu_hypre_BoxArrayArray   *recv_boxes;
   nalu_hypre_Index            recv_stride;
   NALU_HYPRE_Int            **recv_processes;
   NALU_HYPRE_Int            **recv_rboxnums;
   nalu_hypre_BoxArrayArray   *recv_rboxes;  /* recv_boxes, some with periodic shift */

   NALU_HYPRE_Int              num_transforms;  /* may be 0    = identity transform */
   nalu_hypre_Index           *coords;          /* may be NULL = identity transform */
   nalu_hypre_Index           *dirs;            /* may be NULL = identity transform */
   NALU_HYPRE_Int            **send_transforms; /* may be NULL = identity transform */
   NALU_HYPRE_Int            **recv_transforms; /* may be NULL = identity transform */

   NALU_HYPRE_Int              boxes_match;  /* true (>0) if each send box has a
                                         * matching box on the recv processor */

} nalu_hypre_CommInfo;

/*--------------------------------------------------------------------------
 * nalu_hypre_CommEntryType:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_CommEntryType_struct
{
   NALU_HYPRE_Int  offset;                       /* offset for the data */
   NALU_HYPRE_Int  dim;                          /* dimension of the communication */
   NALU_HYPRE_Int  length_array[NALU_HYPRE_MAXDIM];   /* last dim has length num_values */
   NALU_HYPRE_Int  stride_array[NALU_HYPRE_MAXDIM + 1];
   NALU_HYPRE_Int *order;                        /* order of last dim values */

} nalu_hypre_CommEntryType;

/*--------------------------------------------------------------------------
 * nalu_hypre_CommType:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_CommType_struct
{
   NALU_HYPRE_Int             proc;
   NALU_HYPRE_Int             bufsize;     /* message buffer size (in doubles) */
   NALU_HYPRE_Int             num_entries;
   nalu_hypre_CommEntryType  *entries;

   /* this is only needed until first send buffer prefix is packed */
   NALU_HYPRE_Int            *rem_boxnums; /* entry remote box numbers */
   nalu_hypre_Box            *rem_boxes;   /* entry remote boxes */

} nalu_hypre_CommType;

/*--------------------------------------------------------------------------
 * nalu_hypre_CommPkg:
 *   Structure containing information for doing communications
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_CommPkg_struct
{
   MPI_Comm             comm;

   /* is this the first communication? */
   NALU_HYPRE_Int            first_comm;

   NALU_HYPRE_Int            ndim;
   NALU_HYPRE_Int            num_values;
   nalu_hypre_Index          send_stride;
   nalu_hypre_Index          recv_stride;

   /* total send buffer size (in doubles) */
   NALU_HYPRE_Int            send_bufsize;
   /* total recv buffer size (in doubles) */
   NALU_HYPRE_Int            recv_bufsize;
   /* total send buffer size (in doubles) at the first comm. */
   NALU_HYPRE_Int            send_bufsize_first_comm;
   /* total recv buffer size (in doubles) at the first comm. */
   NALU_HYPRE_Int            recv_bufsize_first_comm;

   NALU_HYPRE_Int            num_sends;
   NALU_HYPRE_Int            num_recvs;
   nalu_hypre_CommType      *send_types;
   nalu_hypre_CommType      *recv_types;

   nalu_hypre_CommType      *copy_from_type;
   nalu_hypre_CommType      *copy_to_type;

   /* these pointers are just to help free up memory for send/from types */
   nalu_hypre_CommEntryType *entries;
   NALU_HYPRE_Int           *rem_boxnums;
   nalu_hypre_Box           *rem_boxes;

   NALU_HYPRE_Int            num_orders;
   /* num_orders x num_values */
   NALU_HYPRE_Int          **orders;

   /* offsets into recv data (by box) */
   NALU_HYPRE_Int           *recv_data_offsets;
   /* recv data dimensions (by box) */
   nalu_hypre_BoxArray      *recv_data_space;

   nalu_hypre_Index          identity_coord;
   nalu_hypre_Index          identity_dir;
   NALU_HYPRE_Int           *identity_order;
} nalu_hypre_CommPkg;

/*--------------------------------------------------------------------------
 * CommHandle:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_CommHandle_struct
{
   nalu_hypre_CommPkg     *comm_pkg;
   NALU_HYPRE_Complex     *send_data;
   NALU_HYPRE_Complex     *recv_data;

   NALU_HYPRE_Int          num_requests;
   nalu_hypre_MPI_Request *requests;
   nalu_hypre_MPI_Status  *status;

   NALU_HYPRE_Complex    **send_buffers;
   NALU_HYPRE_Complex    **recv_buffers;

   NALU_HYPRE_Complex    **send_buffers_mpi;
   NALU_HYPRE_Complex    **recv_buffers_mpi;

   /* set = 0, add = 1 */
   NALU_HYPRE_Int          action;

} nalu_hypre_CommHandle;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_CommInto
 *--------------------------------------------------------------------------*/

#define nalu_hypre_CommInfoNDim(info)           (info -> ndim)
#define nalu_hypre_CommInfoSendBoxes(info)      (info -> send_boxes)
#define nalu_hypre_CommInfoSendStride(info)     (info -> send_stride)
#define nalu_hypre_CommInfoSendProcesses(info)  (info -> send_processes)
#define nalu_hypre_CommInfoSendRBoxnums(info)   (info -> send_rboxnums)
#define nalu_hypre_CommInfoSendRBoxes(info)     (info -> send_rboxes)

#define nalu_hypre_CommInfoRecvBoxes(info)      (info -> recv_boxes)
#define nalu_hypre_CommInfoRecvStride(info)     (info -> recv_stride)
#define nalu_hypre_CommInfoRecvProcesses(info)  (info -> recv_processes)
#define nalu_hypre_CommInfoRecvRBoxnums(info)   (info -> recv_rboxnums)
#define nalu_hypre_CommInfoRecvRBoxes(info)     (info -> recv_rboxes)

#define nalu_hypre_CommInfoNumTransforms(info)  (info -> num_transforms)
#define nalu_hypre_CommInfoCoords(info)         (info -> coords)
#define nalu_hypre_CommInfoDirs(info)           (info -> dirs)
#define nalu_hypre_CommInfoSendTransforms(info) (info -> send_transforms)
#define nalu_hypre_CommInfoRecvTransforms(info) (info -> recv_transforms)

#define nalu_hypre_CommInfoBoxesMatch(info)     (info -> boxes_match)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_CommEntryType
 *--------------------------------------------------------------------------*/

#define nalu_hypre_CommEntryTypeOffset(entry)       (entry -> offset)
#define nalu_hypre_CommEntryTypeDim(entry)          (entry -> dim)
#define nalu_hypre_CommEntryTypeLengthArray(entry)  (entry -> length_array)
#define nalu_hypre_CommEntryTypeStrideArray(entry)  (entry -> stride_array)
#define nalu_hypre_CommEntryTypeOrder(entry)        (entry -> order)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_CommType
 *--------------------------------------------------------------------------*/

#define nalu_hypre_CommTypeProc(type)          (type -> proc)
#define nalu_hypre_CommTypeBufsize(type)       (type -> bufsize)
#define nalu_hypre_CommTypeNumEntries(type)    (type -> num_entries)
#define nalu_hypre_CommTypeEntries(type)       (type -> entries)
#define nalu_hypre_CommTypeEntry(type, i)    (&(type -> entries[i]))

#define nalu_hypre_CommTypeRemBoxnums(type)    (type -> rem_boxnums)
#define nalu_hypre_CommTypeRemBoxnum(type, i)  (type -> rem_boxnums[i])
#define nalu_hypre_CommTypeRemBoxes(type)      (type -> rem_boxes)
#define nalu_hypre_CommTypeRemBox(type, i)   (&(type -> rem_boxes[i]))

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_CommPkg
 *--------------------------------------------------------------------------*/

#define nalu_hypre_CommPkgComm(comm_pkg)                       (comm_pkg -> comm)

#define nalu_hypre_CommPkgFirstComm(comm_pkg)                  (comm_pkg -> first_comm)

#define nalu_hypre_CommPkgNDim(comm_pkg)                       (comm_pkg -> ndim)
#define nalu_hypre_CommPkgNumValues(comm_pkg)                  (comm_pkg -> num_values)
#define nalu_hypre_CommPkgSendStride(comm_pkg)                 (comm_pkg -> send_stride)
#define nalu_hypre_CommPkgRecvStride(comm_pkg)                 (comm_pkg -> recv_stride)
#define nalu_hypre_CommPkgSendBufsize(comm_pkg)                (comm_pkg -> send_bufsize)
#define nalu_hypre_CommPkgRecvBufsize(comm_pkg)                (comm_pkg -> recv_bufsize)
#define nalu_hypre_CommPkgSendBufsizeFirstComm(comm_pkg)       (comm_pkg -> send_bufsize_first_comm)
#define nalu_hypre_CommPkgRecvBufsizeFirstComm(comm_pkg)       (comm_pkg -> recv_bufsize_first_comm)

#define nalu_hypre_CommPkgNumSends(comm_pkg)                   (comm_pkg -> num_sends)
#define nalu_hypre_CommPkgNumRecvs(comm_pkg)                   (comm_pkg -> num_recvs)
#define nalu_hypre_CommPkgSendTypes(comm_pkg)                  (comm_pkg -> send_types)
#define nalu_hypre_CommPkgSendType(comm_pkg, i)              (&(comm_pkg -> send_types[i]))
#define nalu_hypre_CommPkgRecvTypes(comm_pkg)                  (comm_pkg -> recv_types)
#define nalu_hypre_CommPkgRecvType(comm_pkg, i)              (&(comm_pkg -> recv_types[i]))

#define nalu_hypre_CommPkgCopyFromType(comm_pkg)               (comm_pkg -> copy_from_type)
#define nalu_hypre_CommPkgCopyToType(comm_pkg)                 (comm_pkg -> copy_to_type)

#define nalu_hypre_CommPkgEntries(comm_pkg)                    (comm_pkg -> entries)
#define nalu_hypre_CommPkgRemBoxnums(comm_pkg)                 (comm_pkg -> rem_boxnums)
#define nalu_hypre_CommPkgRemBoxes(comm_pkg)                   (comm_pkg -> rem_boxes)

#define nalu_hypre_CommPkgNumOrders(comm_pkg)                  (comm_pkg -> num_orders)
#define nalu_hypre_CommPkgOrders(comm_pkg)                     (comm_pkg -> orders)

#define nalu_hypre_CommPkgRecvDataOffsets(comm_pkg)            (comm_pkg -> recv_data_offsets)
#define nalu_hypre_CommPkgRecvDataSpace(comm_pkg)              (comm_pkg -> recv_data_space)

#define nalu_hypre_CommPkgIdentityCoord(comm_pkg)              (comm_pkg -> identity_coord)
#define nalu_hypre_CommPkgIdentityDir(comm_pkg)                (comm_pkg -> identity_dir)
#define nalu_hypre_CommPkgIdentityOrder(comm_pkg)              (comm_pkg -> identity_order)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_CommHandle
 *--------------------------------------------------------------------------*/

#define nalu_hypre_CommHandleCommPkg(comm_handle)              (comm_handle -> comm_pkg)
#define nalu_hypre_CommHandleSendData(comm_handle)             (comm_handle -> send_data)
#define nalu_hypre_CommHandleRecvData(comm_handle)             (comm_handle -> recv_data)
#define nalu_hypre_CommHandleNumRequests(comm_handle)          (comm_handle -> num_requests)
#define nalu_hypre_CommHandleRequests(comm_handle)             (comm_handle -> requests)
#define nalu_hypre_CommHandleStatus(comm_handle)               (comm_handle -> status)
#define nalu_hypre_CommHandleSendBuffers(comm_handle)          (comm_handle -> send_buffers)
#define nalu_hypre_CommHandleRecvBuffers(comm_handle)          (comm_handle -> recv_buffers)
#define nalu_hypre_CommHandleAction(comm_handle)               (comm_handle -> action)
#define nalu_hypre_CommHandleSendBuffersMPI(comm_handle)       (comm_handle -> send_buffers_mpi)
#define nalu_hypre_CommHandleRecvBuffersMPI(comm_handle)       (comm_handle -> recv_buffers_mpi)

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for computation
 *
 *****************************************************************************/

#ifndef nalu_hypre_COMPUTATION_HEADER
#define nalu_hypre_COMPUTATION_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_ComputeInfo:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_ComputeInfo_struct
{
   nalu_hypre_CommInfo        *comm_info;

   nalu_hypre_BoxArrayArray   *indt_boxes;
   nalu_hypre_BoxArrayArray   *dept_boxes;
   nalu_hypre_Index            stride;

} nalu_hypre_ComputeInfo;

/*--------------------------------------------------------------------------
 * nalu_hypre_ComputePkg:
 *   Structure containing information for doing computations.
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_ComputePkg_struct
{
   nalu_hypre_CommPkg         *comm_pkg;

   nalu_hypre_BoxArrayArray   *indt_boxes;
   nalu_hypre_BoxArrayArray   *dept_boxes;
   nalu_hypre_Index            stride;

   nalu_hypre_StructGrid      *grid;
   nalu_hypre_BoxArray        *data_space;
   NALU_HYPRE_Int              num_values;

} nalu_hypre_ComputePkg;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_ComputeInfo
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ComputeInfoCommInfo(info)     (info -> comm_info)
#define nalu_hypre_ComputeInfoIndtBoxes(info)    (info -> indt_boxes)
#define nalu_hypre_ComputeInfoDeptBoxes(info)    (info -> dept_boxes)
#define nalu_hypre_ComputeInfoStride(info)       (info -> stride)

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_ComputePkg
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ComputePkgCommPkg(compute_pkg)      (compute_pkg -> comm_pkg)

#define nalu_hypre_ComputePkgIndtBoxes(compute_pkg)    (compute_pkg -> indt_boxes)
#define nalu_hypre_ComputePkgDeptBoxes(compute_pkg)    (compute_pkg -> dept_boxes)
#define nalu_hypre_ComputePkgStride(compute_pkg)       (compute_pkg -> stride)

#define nalu_hypre_ComputePkgGrid(compute_pkg)         (compute_pkg -> grid)
#define nalu_hypre_ComputePkgDataSpace(compute_pkg)    (compute_pkg -> data_space)
#define nalu_hypre_ComputePkgNumValues(compute_pkg)    (compute_pkg -> num_values)

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_StructMatrix structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_STRUCT_MATRIX_HEADER
#define nalu_hypre_STRUCT_MATRIX_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_StructMatrix:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_StructMatrix_struct
{
   MPI_Comm              comm;

   nalu_hypre_StructGrid     *grid;
   nalu_hypre_StructStencil  *user_stencil;
   nalu_hypre_StructStencil  *stencil;
   NALU_HYPRE_Int             num_values;                /* Number of "stored" coefficients */

   nalu_hypre_BoxArray       *data_space;

   NALU_HYPRE_MemoryLocation  memory_location;           /* memory location of data */
   NALU_HYPRE_Complex        *data;                      /* Pointer to variable matrix data */
   NALU_HYPRE_Complex        *data_const;                /* Pointer to constant matrix data */
   NALU_HYPRE_Complex       **stencil_data;              /* Pointer for each stencil */
   NALU_HYPRE_Int             data_alloced;              /* Boolean used for freeing data */
   NALU_HYPRE_Int             data_size;                 /* Size of variable matrix data */
   NALU_HYPRE_Int             data_const_size;           /* Size of constant matrix data */
   NALU_HYPRE_Int           **data_indices;              /* num-boxes by stencil-size array
                                                       of indices into the data array.
                                                       data_indices[b][s] is the starting
                                                       index of matrix data corresponding
                                                       to box b and stencil coefficient s */
   NALU_HYPRE_Int             constant_coefficient;      /* normally 0; set to 1 for
                                                       constant coefficient matrices
                                                       or 2 for constant coefficient
                                                       with variable diagonal */

   NALU_HYPRE_Int             symmetric;                 /* Is the matrix symmetric */
   NALU_HYPRE_Int            *symm_elements;             /* Which elements are "symmetric" */
   NALU_HYPRE_Int             num_ghost[2 * NALU_HYPRE_MAXDIM]; /* Num ghost layers in each direction */

   NALU_HYPRE_BigInt          global_size;               /* Total number of nonzero coeffs */

   nalu_hypre_CommPkg        *comm_pkg;                  /* Info on how to update ghost data */

   NALU_HYPRE_Int             ref_count;

} nalu_hypre_StructMatrix;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_StructMatrix
 *--------------------------------------------------------------------------*/

#define nalu_hypre_StructMatrixComm(matrix)                ((matrix) -> comm)
#define nalu_hypre_StructMatrixGrid(matrix)                ((matrix) -> grid)
#define nalu_hypre_StructMatrixUserStencil(matrix)         ((matrix) -> user_stencil)
#define nalu_hypre_StructMatrixStencil(matrix)             ((matrix) -> stencil)
#define nalu_hypre_StructMatrixNumValues(matrix)           ((matrix) -> num_values)
#define nalu_hypre_StructMatrixDataSpace(matrix)           ((matrix) -> data_space)
#define nalu_hypre_StructMatrixMemoryLocation(matrix)      ((matrix) -> memory_location)
#define nalu_hypre_StructMatrixData(matrix)                ((matrix) -> data)
#define nalu_hypre_StructMatrixDataConst(matrix)           ((matrix) -> data_const)
#define nalu_hypre_StructMatrixStencilData(matrix)         ((matrix) -> stencil_data)
#define nalu_hypre_StructMatrixDataAlloced(matrix)         ((matrix) -> data_alloced)
#define nalu_hypre_StructMatrixDataSize(matrix)            ((matrix) -> data_size)
#define nalu_hypre_StructMatrixDataConstSize(matrix)       ((matrix) -> data_const_size)
#define nalu_hypre_StructMatrixDataIndices(matrix)         ((matrix) -> data_indices)
#define nalu_hypre_StructMatrixConstantCoefficient(matrix) ((matrix) -> constant_coefficient)
#define nalu_hypre_StructMatrixSymmetric(matrix)           ((matrix) -> symmetric)
#define nalu_hypre_StructMatrixSymmElements(matrix)        ((matrix) -> symm_elements)
#define nalu_hypre_StructMatrixNumGhost(matrix)            ((matrix) -> num_ghost)
#define nalu_hypre_StructMatrixGlobalSize(matrix)          ((matrix) -> global_size)
#define nalu_hypre_StructMatrixCommPkg(matrix)             ((matrix) -> comm_pkg)
#define nalu_hypre_StructMatrixRefCount(matrix)            ((matrix) -> ref_count)

#define nalu_hypre_StructMatrixNDim(matrix) \
nalu_hypre_StructGridNDim(nalu_hypre_StructMatrixGrid(matrix))

#define nalu_hypre_StructMatrixBox(matrix, b) \
nalu_hypre_BoxArrayBox(nalu_hypre_StructMatrixDataSpace(matrix), b)

#define nalu_hypre_StructMatrixBoxData(matrix, b, s) \
(nalu_hypre_StructMatrixStencilData(matrix)[s] + nalu_hypre_StructMatrixDataIndices(matrix)[b][s])

#define nalu_hypre_StructMatrixBoxDataValue(matrix, b, s, index) \
(nalu_hypre_StructMatrixBoxData(matrix, b, s) + \
 nalu_hypre_BoxIndexRank(nalu_hypre_StructMatrixBox(matrix, b), index))

#define nalu_hypre_CCStructMatrixBoxDataValue(matrix, b, s, index) \
(nalu_hypre_StructMatrixBoxData(matrix, b, s) + \
 nalu_hypre_CCBoxIndexRank(nalu_hypre_StructMatrixBox(matrix, b), index))

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the nalu_hypre_StructVector structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_STRUCT_VECTOR_HEADER
#define nalu_hypre_STRUCT_VECTOR_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_StructVector:
 *--------------------------------------------------------------------------*/

typedef struct nalu_hypre_StructVector_struct
{
   MPI_Comm              comm;

   nalu_hypre_StructGrid     *grid;

   nalu_hypre_BoxArray       *data_space;

   NALU_HYPRE_MemoryLocation  memory_location;             /* memory location of data */
   NALU_HYPRE_Complex        *data;                        /* Pointer to vector data on device*/
   NALU_HYPRE_Int             data_alloced;                /* Boolean used for freeing data */
   NALU_HYPRE_Int             data_size;                   /* Size of vector data */
   NALU_HYPRE_Int            *data_indices;                /* num-boxes array of indices into
                                                         the data array.  data_indices[b]
                                                         is the starting index of vector
                                                         data corresponding to box b. */

   NALU_HYPRE_Int             num_ghost[2 * NALU_HYPRE_MAXDIM]; /* Num ghost layers in each
                                                       * direction */
   NALU_HYPRE_Int             bghost_not_clear;            /* Are boundary ghosts clear? */

   NALU_HYPRE_BigInt          global_size;                 /* Total number coefficients */

   NALU_HYPRE_Int             ref_count;

} nalu_hypre_StructVector;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_StructVector
 *--------------------------------------------------------------------------*/

#define nalu_hypre_StructVectorComm(vector)           ((vector) -> comm)
#define nalu_hypre_StructVectorGrid(vector)           ((vector) -> grid)
#define nalu_hypre_StructVectorDataSpace(vector)      ((vector) -> data_space)
#define nalu_hypre_StructVectorMemoryLocation(vector) ((vector) -> memory_location)
#define nalu_hypre_StructVectorData(vector)           ((vector) -> data)
#define nalu_hypre_StructVectorDataAlloced(vector)    ((vector) -> data_alloced)
#define nalu_hypre_StructVectorDataSize(vector)       ((vector) -> data_size)
#define nalu_hypre_StructVectorDataIndices(vector)    ((vector) -> data_indices)
#define nalu_hypre_StructVectorNumGhost(vector)       ((vector) -> num_ghost)
#define nalu_hypre_StructVectorBGhostNotClear(vector) ((vector) -> bghost_not_clear)
#define nalu_hypre_StructVectorGlobalSize(vector)     ((vector) -> global_size)
#define nalu_hypre_StructVectorRefCount(vector)       ((vector) -> ref_count)

#define nalu_hypre_StructVectorNDim(vector) \
nalu_hypre_StructGridNDim(nalu_hypre_StructVectorGrid(vector))

#define nalu_hypre_StructVectorBox(vector, b) \
nalu_hypre_BoxArrayBox(nalu_hypre_StructVectorDataSpace(vector), b)

#define nalu_hypre_StructVectorBoxData(vector, b) \
(nalu_hypre_StructVectorData(vector) + nalu_hypre_StructVectorDataIndices(vector)[b])

#define nalu_hypre_StructVectorBoxDataValue(vector, b, index) \
(nalu_hypre_StructVectorBoxData(vector, b) + \
 nalu_hypre_BoxIndexRank(nalu_hypre_StructVectorBox(vector, b), index))

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/* assumed_part.c */
NALU_HYPRE_Int nalu_hypre_APSubdivideRegion ( nalu_hypre_Box *region, NALU_HYPRE_Int dim, NALU_HYPRE_Int level,
                                    nalu_hypre_BoxArray *box_array, NALU_HYPRE_Int *num_new_boxes );
NALU_HYPRE_Int nalu_hypre_APFindMyBoxesInRegions ( nalu_hypre_BoxArray *region_array, nalu_hypre_BoxArray *my_box_array,
                                         NALU_HYPRE_Int **p_count_array, NALU_HYPRE_Real **p_vol_array );
NALU_HYPRE_Int nalu_hypre_APGetAllBoxesInRegions ( nalu_hypre_BoxArray *region_array, nalu_hypre_BoxArray *my_box_array,
                                         NALU_HYPRE_Int **p_count_array, NALU_HYPRE_Real **p_vol_array, MPI_Comm comm );
NALU_HYPRE_Int nalu_hypre_APShrinkRegions ( nalu_hypre_BoxArray *region_array, nalu_hypre_BoxArray *my_box_array,
                                  MPI_Comm comm );
NALU_HYPRE_Int nalu_hypre_APPruneRegions ( nalu_hypre_BoxArray *region_array, NALU_HYPRE_Int **p_count_array,
                                 NALU_HYPRE_Real **p_vol_array );
NALU_HYPRE_Int nalu_hypre_APRefineRegionsByVol ( nalu_hypre_BoxArray *region_array, NALU_HYPRE_Real *vol_array,
                                       NALU_HYPRE_Int max_regions, NALU_HYPRE_Real gamma, NALU_HYPRE_Int dim, NALU_HYPRE_Int *return_code, MPI_Comm comm );
NALU_HYPRE_Int nalu_hypre_StructAssumedPartitionCreate ( NALU_HYPRE_Int dim, nalu_hypre_Box *bounding_box,
                                               NALU_HYPRE_Real global_boxes_size, NALU_HYPRE_Int global_num_boxes, nalu_hypre_BoxArray *local_boxes,
                                               NALU_HYPRE_Int *local_boxnums, NALU_HYPRE_Int max_regions, NALU_HYPRE_Int max_refinements, NALU_HYPRE_Real gamma,
                                               MPI_Comm comm, nalu_hypre_StructAssumedPart **p_assumed_partition );
NALU_HYPRE_Int nalu_hypre_StructAssumedPartitionDestroy ( nalu_hypre_StructAssumedPart *assumed_part );
NALU_HYPRE_Int nalu_hypre_APFillResponseStructAssumedPart ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                                  NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                                  NALU_HYPRE_Int *response_message_size );
NALU_HYPRE_Int nalu_hypre_StructAssumedPartitionGetRegionsFromProc ( nalu_hypre_StructAssumedPart *assumed_part,
                                                           NALU_HYPRE_Int proc_id, nalu_hypre_BoxArray *assumed_regions );
NALU_HYPRE_Int nalu_hypre_StructAssumedPartitionGetProcsFromBox ( nalu_hypre_StructAssumedPart *assumed_part,
                                                        nalu_hypre_Box *box, NALU_HYPRE_Int *num_proc_array, NALU_HYPRE_Int *size_alloc_proc_array,
                                                        NALU_HYPRE_Int **p_proc_array );

/* box_algebra.c */
NALU_HYPRE_Int nalu_hypre_IntersectBoxes ( nalu_hypre_Box *box1, nalu_hypre_Box *box2, nalu_hypre_Box *ibox );
NALU_HYPRE_Int nalu_hypre_SubtractBoxes ( nalu_hypre_Box *box1, nalu_hypre_Box *box2, nalu_hypre_BoxArray *box_array );
NALU_HYPRE_Int nalu_hypre_SubtractBoxArrays ( nalu_hypre_BoxArray *box_array1, nalu_hypre_BoxArray *box_array2,
                                    nalu_hypre_BoxArray *tmp_box_array );
NALU_HYPRE_Int nalu_hypre_UnionBoxes ( nalu_hypre_BoxArray *boxes );
NALU_HYPRE_Int nalu_hypre_MinUnionBoxes ( nalu_hypre_BoxArray *boxes );

/* box_boundary.c */
NALU_HYPRE_Int nalu_hypre_BoxBoundaryIntersect ( nalu_hypre_Box *box, nalu_hypre_StructGrid *grid, NALU_HYPRE_Int d,
                                       NALU_HYPRE_Int dir, nalu_hypre_BoxArray *boundary );
NALU_HYPRE_Int nalu_hypre_BoxBoundaryG ( nalu_hypre_Box *box, nalu_hypre_StructGrid *g, nalu_hypre_BoxArray *boundary );
NALU_HYPRE_Int nalu_hypre_BoxBoundaryDG ( nalu_hypre_Box *box, nalu_hypre_StructGrid *g, nalu_hypre_BoxArray *boundarym,
                                nalu_hypre_BoxArray *boundaryp, NALU_HYPRE_Int d );
NALU_HYPRE_Int nalu_hypre_GeneralBoxBoundaryIntersect( nalu_hypre_Box *box, nalu_hypre_StructGrid *grid,
                                             nalu_hypre_Index stencil_element, nalu_hypre_BoxArray *boundary );

/* box.c */
NALU_HYPRE_Int nalu_hypre_SetIndex ( nalu_hypre_Index index, NALU_HYPRE_Int val );
NALU_HYPRE_Int nalu_hypre_CopyIndex( nalu_hypre_Index in_index, nalu_hypre_Index out_index );
NALU_HYPRE_Int nalu_hypre_CopyToCleanIndex( nalu_hypre_Index in_index, NALU_HYPRE_Int ndim, nalu_hypre_Index out_index );
NALU_HYPRE_Int nalu_hypre_IndexEqual ( nalu_hypre_Index index, NALU_HYPRE_Int val, NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_IndexMin( nalu_hypre_Index index, NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_IndexMax( nalu_hypre_Index index, NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_AddIndexes ( nalu_hypre_Index index1, nalu_hypre_Index index2, NALU_HYPRE_Int ndim,
                             nalu_hypre_Index result );
NALU_HYPRE_Int nalu_hypre_SubtractIndexes ( nalu_hypre_Index index1, nalu_hypre_Index index2, NALU_HYPRE_Int ndim,
                                  nalu_hypre_Index result );
NALU_HYPRE_Int nalu_hypre_IndexesEqual ( nalu_hypre_Index index1, nalu_hypre_Index index2, NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_IndexPrint ( FILE *file, NALU_HYPRE_Int ndim, nalu_hypre_Index index );
NALU_HYPRE_Int nalu_hypre_IndexRead ( FILE *file, NALU_HYPRE_Int ndim, nalu_hypre_Index index );
nalu_hypre_Box *nalu_hypre_BoxCreate ( NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_BoxDestroy ( nalu_hypre_Box *box );
NALU_HYPRE_Int nalu_hypre_BoxInit( nalu_hypre_Box *box, NALU_HYPRE_Int  ndim );
NALU_HYPRE_Int nalu_hypre_BoxSetExtents ( nalu_hypre_Box *box, nalu_hypre_Index imin, nalu_hypre_Index imax );
NALU_HYPRE_Int nalu_hypre_CopyBox( nalu_hypre_Box *box1, nalu_hypre_Box *box2 );
nalu_hypre_Box *nalu_hypre_BoxDuplicate ( nalu_hypre_Box *box );
NALU_HYPRE_Int nalu_hypre_BoxVolume( nalu_hypre_Box *box );
NALU_HYPRE_Real nalu_hypre_doubleBoxVolume( nalu_hypre_Box *box );
NALU_HYPRE_Int nalu_hypre_IndexInBox ( nalu_hypre_Index index, nalu_hypre_Box *box );
NALU_HYPRE_Int nalu_hypre_BoxGetSize ( nalu_hypre_Box *box, nalu_hypre_Index size );
NALU_HYPRE_Int nalu_hypre_BoxGetStrideSize ( nalu_hypre_Box *box, nalu_hypre_Index stride, nalu_hypre_Index size );
NALU_HYPRE_Int nalu_hypre_BoxGetStrideVolume ( nalu_hypre_Box *box, nalu_hypre_Index stride, NALU_HYPRE_Int *volume_ptr );
NALU_HYPRE_Int nalu_hypre_BoxIndexRank( nalu_hypre_Box *box, nalu_hypre_Index index );
NALU_HYPRE_Int nalu_hypre_BoxRankIndex( nalu_hypre_Box *box, NALU_HYPRE_Int rank, nalu_hypre_Index index );
NALU_HYPRE_Int nalu_hypre_BoxOffsetDistance( nalu_hypre_Box *box, nalu_hypre_Index index );
NALU_HYPRE_Int nalu_hypre_BoxShiftPos( nalu_hypre_Box *box, nalu_hypre_Index shift );
NALU_HYPRE_Int nalu_hypre_BoxShiftNeg( nalu_hypre_Box *box, nalu_hypre_Index shift );
NALU_HYPRE_Int nalu_hypre_BoxGrowByIndex( nalu_hypre_Box *box, nalu_hypre_Index  index );
NALU_HYPRE_Int nalu_hypre_BoxGrowByValue( nalu_hypre_Box *box, NALU_HYPRE_Int val );
NALU_HYPRE_Int nalu_hypre_BoxGrowByArray ( nalu_hypre_Box *box, NALU_HYPRE_Int *array );
NALU_HYPRE_Int nalu_hypre_BoxPrint ( FILE *file, nalu_hypre_Box *box );
NALU_HYPRE_Int nalu_hypre_BoxRead ( FILE *file, NALU_HYPRE_Int ndim, nalu_hypre_Box **box_ptr );
nalu_hypre_BoxArray *nalu_hypre_BoxArrayCreate ( NALU_HYPRE_Int size, NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_BoxArrayDestroy ( nalu_hypre_BoxArray *box_array );
NALU_HYPRE_Int nalu_hypre_BoxArraySetSize ( nalu_hypre_BoxArray *box_array, NALU_HYPRE_Int size );
nalu_hypre_BoxArray *nalu_hypre_BoxArrayDuplicate ( nalu_hypre_BoxArray *box_array );
NALU_HYPRE_Int nalu_hypre_AppendBox ( nalu_hypre_Box *box, nalu_hypre_BoxArray *box_array );
NALU_HYPRE_Int nalu_hypre_DeleteBox ( nalu_hypre_BoxArray *box_array, NALU_HYPRE_Int index );
NALU_HYPRE_Int nalu_hypre_DeleteMultipleBoxes ( nalu_hypre_BoxArray *box_array, NALU_HYPRE_Int *indices,
                                      NALU_HYPRE_Int num );
NALU_HYPRE_Int nalu_hypre_AppendBoxArray ( nalu_hypre_BoxArray *box_array_0, nalu_hypre_BoxArray *box_array_1 );
nalu_hypre_BoxArrayArray *nalu_hypre_BoxArrayArrayCreate ( NALU_HYPRE_Int size, NALU_HYPRE_Int ndim );
NALU_HYPRE_Int nalu_hypre_BoxArrayArrayDestroy ( nalu_hypre_BoxArrayArray *box_array_array );
nalu_hypre_BoxArrayArray *nalu_hypre_BoxArrayArrayDuplicate ( nalu_hypre_BoxArrayArray *box_array_array );

/* box_manager.c */
NALU_HYPRE_Int nalu_hypre_BoxManEntryGetInfo ( nalu_hypre_BoxManEntry *entry, void **info_ptr );
NALU_HYPRE_Int nalu_hypre_BoxManEntryGetExtents ( nalu_hypre_BoxManEntry *entry, nalu_hypre_Index imin,
                                        nalu_hypre_Index imax );
NALU_HYPRE_Int nalu_hypre_BoxManEntryCopy ( nalu_hypre_BoxManEntry *fromentry, nalu_hypre_BoxManEntry *toentry );
NALU_HYPRE_Int nalu_hypre_BoxManSetAllGlobalKnown ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int known );
NALU_HYPRE_Int nalu_hypre_BoxManGetAllGlobalKnown ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int *known );
NALU_HYPRE_Int nalu_hypre_BoxManSetIsEntriesSort ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int is_sort );
NALU_HYPRE_Int nalu_hypre_BoxManGetIsEntriesSort ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int *is_sort );
NALU_HYPRE_Int nalu_hypre_BoxManGetGlobalIsGatherCalled ( nalu_hypre_BoxManager *manager, MPI_Comm comm,
                                                NALU_HYPRE_Int *is_gather );
NALU_HYPRE_Int nalu_hypre_BoxManGetAssumedPartition ( nalu_hypre_BoxManager *manager,
                                            nalu_hypre_StructAssumedPart **assumed_partition );
NALU_HYPRE_Int nalu_hypre_BoxManSetAssumedPartition ( nalu_hypre_BoxManager *manager,
                                            nalu_hypre_StructAssumedPart *assumed_partition );
NALU_HYPRE_Int nalu_hypre_BoxManSetBoundingBox ( nalu_hypre_BoxManager *manager, nalu_hypre_Box *bounding_box );
NALU_HYPRE_Int nalu_hypre_BoxManSetNumGhost ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int nalu_hypre_BoxManDeleteMultipleEntriesAndInfo ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int *indices,
                                                     NALU_HYPRE_Int num );
NALU_HYPRE_Int nalu_hypre_BoxManCreate ( NALU_HYPRE_Int max_nentries, NALU_HYPRE_Int info_size, NALU_HYPRE_Int dim,
                               nalu_hypre_Box *bounding_box, MPI_Comm comm, nalu_hypre_BoxManager **manager_ptr );
NALU_HYPRE_Int nalu_hypre_BoxManIncSize ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int inc_size );
NALU_HYPRE_Int nalu_hypre_BoxManDestroy ( nalu_hypre_BoxManager *manager );
NALU_HYPRE_Int nalu_hypre_BoxManAddEntry ( nalu_hypre_BoxManager *manager, nalu_hypre_Index imin, nalu_hypre_Index imax,
                                 NALU_HYPRE_Int proc_id, NALU_HYPRE_Int box_id, void *info );
NALU_HYPRE_Int nalu_hypre_BoxManGetEntry ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int proc, NALU_HYPRE_Int id,
                                 nalu_hypre_BoxManEntry **entry_ptr );
NALU_HYPRE_Int nalu_hypre_BoxManGetAllEntries ( nalu_hypre_BoxManager *manager, NALU_HYPRE_Int *num_entries,
                                      nalu_hypre_BoxManEntry **entries );
NALU_HYPRE_Int nalu_hypre_BoxManGetAllEntriesBoxes ( nalu_hypre_BoxManager *manager, nalu_hypre_BoxArray *boxes );
NALU_HYPRE_Int nalu_hypre_BoxManGetLocalEntriesBoxes ( nalu_hypre_BoxManager *manager, nalu_hypre_BoxArray *boxes );
NALU_HYPRE_Int nalu_hypre_BoxManGetAllEntriesBoxesProc ( nalu_hypre_BoxManager *manager, nalu_hypre_BoxArray *boxes,
                                               NALU_HYPRE_Int **procs_ptr );
NALU_HYPRE_Int nalu_hypre_BoxManGatherEntries ( nalu_hypre_BoxManager *manager, nalu_hypre_Index imin,
                                      nalu_hypre_Index imax );
NALU_HYPRE_Int nalu_hypre_BoxManAssemble ( nalu_hypre_BoxManager *manager );
NALU_HYPRE_Int nalu_hypre_BoxManIntersect ( nalu_hypre_BoxManager *manager, nalu_hypre_Index ilower, nalu_hypre_Index iupper,
                                  nalu_hypre_BoxManEntry ***entries_ptr, NALU_HYPRE_Int *nentries_ptr );
NALU_HYPRE_Int nalu_hypre_FillResponseBoxManAssemble1 ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                              NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                              NALU_HYPRE_Int *response_message_size );
NALU_HYPRE_Int nalu_hypre_FillResponseBoxManAssemble2 ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                              NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                              NALU_HYPRE_Int *response_message_size );

/* communication_info.c */
NALU_HYPRE_Int nalu_hypre_CommInfoCreate ( nalu_hypre_BoxArrayArray *send_boxes, nalu_hypre_BoxArrayArray *recv_boxes,
                                 NALU_HYPRE_Int **send_procs, NALU_HYPRE_Int **recv_procs, NALU_HYPRE_Int **send_rboxnums,
                                 NALU_HYPRE_Int **recv_rboxnums, nalu_hypre_BoxArrayArray *send_rboxes, nalu_hypre_BoxArrayArray *recv_rboxes,
                                 NALU_HYPRE_Int boxes_match, nalu_hypre_CommInfo **comm_info_ptr );
NALU_HYPRE_Int nalu_hypre_CommInfoSetTransforms ( nalu_hypre_CommInfo *comm_info, NALU_HYPRE_Int num_transforms,
                                        nalu_hypre_Index *coords, nalu_hypre_Index *dirs, NALU_HYPRE_Int **send_transforms, NALU_HYPRE_Int **recv_transforms );
NALU_HYPRE_Int nalu_hypre_CommInfoGetTransforms ( nalu_hypre_CommInfo *comm_info, NALU_HYPRE_Int *num_transforms,
                                        nalu_hypre_Index **coords, nalu_hypre_Index **dirs );
NALU_HYPRE_Int nalu_hypre_CommInfoProjectSend ( nalu_hypre_CommInfo *comm_info, nalu_hypre_Index index,
                                      nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_CommInfoProjectRecv ( nalu_hypre_CommInfo *comm_info, nalu_hypre_Index index,
                                      nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_CommInfoDestroy ( nalu_hypre_CommInfo *comm_info );
NALU_HYPRE_Int nalu_hypre_CreateCommInfoFromStencil ( nalu_hypre_StructGrid *grid, nalu_hypre_StructStencil *stencil,
                                            nalu_hypre_CommInfo **comm_info_ptr );
NALU_HYPRE_Int nalu_hypre_CreateCommInfoFromNumGhost ( nalu_hypre_StructGrid *grid, NALU_HYPRE_Int *num_ghost,
                                             nalu_hypre_CommInfo **comm_info_ptr );
NALU_HYPRE_Int nalu_hypre_CreateCommInfoFromGrids ( nalu_hypre_StructGrid *from_grid, nalu_hypre_StructGrid *to_grid,
                                          nalu_hypre_CommInfo **comm_info_ptr );

/* computation.c */
NALU_HYPRE_Int nalu_hypre_ComputeInfoCreate ( nalu_hypre_CommInfo *comm_info, nalu_hypre_BoxArrayArray *indt_boxes,
                                    nalu_hypre_BoxArrayArray *dept_boxes, nalu_hypre_ComputeInfo **compute_info_ptr );
NALU_HYPRE_Int nalu_hypre_ComputeInfoProjectSend ( nalu_hypre_ComputeInfo *compute_info, nalu_hypre_Index index,
                                         nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_ComputeInfoProjectRecv ( nalu_hypre_ComputeInfo *compute_info, nalu_hypre_Index index,
                                         nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_ComputeInfoProjectComp ( nalu_hypre_ComputeInfo *compute_info, nalu_hypre_Index index,
                                         nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_ComputeInfoDestroy ( nalu_hypre_ComputeInfo *compute_info );
NALU_HYPRE_Int nalu_hypre_CreateComputeInfo ( nalu_hypre_StructGrid *grid, nalu_hypre_StructStencil *stencil,
                                    nalu_hypre_ComputeInfo **compute_info_ptr );
NALU_HYPRE_Int nalu_hypre_ComputePkgCreate ( nalu_hypre_ComputeInfo *compute_info, nalu_hypre_BoxArray *data_space,
                                   NALU_HYPRE_Int num_values, nalu_hypre_StructGrid *grid, nalu_hypre_ComputePkg **compute_pkg_ptr );
NALU_HYPRE_Int nalu_hypre_ComputePkgDestroy ( nalu_hypre_ComputePkg *compute_pkg );
NALU_HYPRE_Int nalu_hypre_InitializeIndtComputations ( nalu_hypre_ComputePkg *compute_pkg, NALU_HYPRE_Complex *data,
                                             nalu_hypre_CommHandle **comm_handle_ptr );
NALU_HYPRE_Int nalu_hypre_FinalizeIndtComputations ( nalu_hypre_CommHandle *comm_handle );

/* NALU_HYPRE_struct_grid.c */
NALU_HYPRE_Int NALU_HYPRE_StructGridCreate ( MPI_Comm comm, NALU_HYPRE_Int dim, NALU_HYPRE_StructGrid *grid );
NALU_HYPRE_Int NALU_HYPRE_StructGridDestroy ( NALU_HYPRE_StructGrid grid );
NALU_HYPRE_Int NALU_HYPRE_StructGridSetExtents ( NALU_HYPRE_StructGrid grid, NALU_HYPRE_Int *ilower,
                                       NALU_HYPRE_Int *iupper );
NALU_HYPRE_Int NALU_HYPRE_StructGridSetPeriodic ( NALU_HYPRE_StructGrid grid, NALU_HYPRE_Int *periodic );
NALU_HYPRE_Int NALU_HYPRE_StructGridAssemble ( NALU_HYPRE_StructGrid grid );
NALU_HYPRE_Int NALU_HYPRE_StructGridSetNumGhost ( NALU_HYPRE_StructGrid grid, NALU_HYPRE_Int *num_ghost );

/* NALU_HYPRE_struct_matrix.c */
NALU_HYPRE_Int NALU_HYPRE_StructMatrixCreate ( MPI_Comm comm, NALU_HYPRE_StructGrid grid,
                                     NALU_HYPRE_StructStencil stencil, NALU_HYPRE_StructMatrix *matrix );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixDestroy ( NALU_HYPRE_StructMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixInitialize ( NALU_HYPRE_StructMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixSetValues ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *grid_index,
                                        NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixGetValues ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *grid_index,
                                        NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixSetBoxValues ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *ilower,
                                           NALU_HYPRE_Int *iupper, NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices,
                                           NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixGetBoxValues ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *ilower,
                                           NALU_HYPRE_Int *iupper, NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices,
                                           NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixSetConstantValues ( NALU_HYPRE_StructMatrix matrix,
                                                NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixAddToValues ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *grid_index,
                                          NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixAddToBoxValues ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *ilower,
                                             NALU_HYPRE_Int *iupper, NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices,
                                             NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixAddToConstantValues ( NALU_HYPRE_StructMatrix matrix,
                                                  NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixAssemble ( NALU_HYPRE_StructMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixSetNumGhost ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixGetGrid ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_StructGrid *grid );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixSetSymmetric ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int symmetric );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixSetConstantEntries ( NALU_HYPRE_StructMatrix matrix, NALU_HYPRE_Int nentries,
                                                 NALU_HYPRE_Int *entries );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixPrint ( const char *filename, NALU_HYPRE_StructMatrix matrix,
                                    NALU_HYPRE_Int all );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixMatvec ( NALU_HYPRE_Complex alpha, NALU_HYPRE_StructMatrix A,
                                     NALU_HYPRE_StructVector x, NALU_HYPRE_Complex beta, NALU_HYPRE_StructVector y );
NALU_HYPRE_Int NALU_HYPRE_StructMatrixClearBoundary( NALU_HYPRE_StructMatrix matrix );

/* NALU_HYPRE_struct_stencil.c */
NALU_HYPRE_Int NALU_HYPRE_StructStencilCreate ( NALU_HYPRE_Int dim, NALU_HYPRE_Int size, NALU_HYPRE_StructStencil *stencil );
NALU_HYPRE_Int NALU_HYPRE_StructStencilSetElement ( NALU_HYPRE_StructStencil stencil, NALU_HYPRE_Int element_index,
                                          NALU_HYPRE_Int *offset );
NALU_HYPRE_Int NALU_HYPRE_StructStencilDestroy ( NALU_HYPRE_StructStencil stencil );

/* NALU_HYPRE_struct_vector.c */
NALU_HYPRE_Int NALU_HYPRE_StructVectorCreate ( MPI_Comm comm, NALU_HYPRE_StructGrid grid,
                                     NALU_HYPRE_StructVector *vector );
NALU_HYPRE_Int NALU_HYPRE_StructVectorDestroy ( NALU_HYPRE_StructVector struct_vector );
NALU_HYPRE_Int NALU_HYPRE_StructVectorInitialize ( NALU_HYPRE_StructVector vector );
NALU_HYPRE_Int NALU_HYPRE_StructVectorSetValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *grid_index,
                                        NALU_HYPRE_Complex values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorSetBoxValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *ilower,
                                           NALU_HYPRE_Int *iupper, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorAddToValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *grid_index,
                                          NALU_HYPRE_Complex values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorAddToBoxValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *ilower,
                                             NALU_HYPRE_Int *iupper, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorScaleValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Complex factor );
NALU_HYPRE_Int NALU_HYPRE_StructVectorGetValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *grid_index,
                                        NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorGetBoxValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *ilower,
                                           NALU_HYPRE_Int *iupper, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorAssemble ( NALU_HYPRE_StructVector vector );
NALU_HYPRE_Int nalu_hypre_StructVectorPrintData ( FILE *file, nalu_hypre_StructVector *vector, NALU_HYPRE_Int all );
NALU_HYPRE_Int nalu_hypre_StructVectorReadData ( FILE *file, nalu_hypre_StructVector *vector );
NALU_HYPRE_Int NALU_HYPRE_StructVectorPrint ( const char *filename, NALU_HYPRE_StructVector vector,
                                    NALU_HYPRE_Int all );
NALU_HYPRE_Int NALU_HYPRE_StructVectorRead ( MPI_Comm comm, const char *filename,
                                   NALU_HYPRE_Int *num_ghost, NALU_HYPRE_StructVector *vector );
NALU_HYPRE_Int NALU_HYPRE_StructVectorSetNumGhost ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int NALU_HYPRE_StructVectorCopy ( NALU_HYPRE_StructVector x, NALU_HYPRE_StructVector y );
NALU_HYPRE_Int NALU_HYPRE_StructVectorSetConstantValues ( NALU_HYPRE_StructVector vector, NALU_HYPRE_Complex values );
NALU_HYPRE_Int NALU_HYPRE_StructVectorGetMigrateCommPkg ( NALU_HYPRE_StructVector from_vector,
                                                NALU_HYPRE_StructVector to_vector, NALU_HYPRE_CommPkg *comm_pkg );
NALU_HYPRE_Int NALU_HYPRE_StructVectorMigrate ( NALU_HYPRE_CommPkg comm_pkg, NALU_HYPRE_StructVector from_vector,
                                      NALU_HYPRE_StructVector to_vector );
NALU_HYPRE_Int NALU_HYPRE_CommPkgDestroy ( NALU_HYPRE_CommPkg comm_pkg );

/* project.c */
NALU_HYPRE_Int nalu_hypre_ProjectBox ( nalu_hypre_Box *box, nalu_hypre_Index index, nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_ProjectBoxArray ( nalu_hypre_BoxArray *box_array, nalu_hypre_Index index,
                                  nalu_hypre_Index stride );
NALU_HYPRE_Int nalu_hypre_ProjectBoxArrayArray ( nalu_hypre_BoxArrayArray *box_array_array, nalu_hypre_Index index,
                                       nalu_hypre_Index stride );

/* struct_axpy.c */
NALU_HYPRE_Int nalu_hypre_StructAxpy ( NALU_HYPRE_Complex alpha, nalu_hypre_StructVector *x, nalu_hypre_StructVector *y );

/* struct_communication.c */
NALU_HYPRE_Int nalu_hypre_CommPkgCreate ( nalu_hypre_CommInfo *comm_info, nalu_hypre_BoxArray *send_data_space,
                                nalu_hypre_BoxArray *recv_data_space, NALU_HYPRE_Int num_values, NALU_HYPRE_Int **orders, NALU_HYPRE_Int reverse,
                                MPI_Comm comm, nalu_hypre_CommPkg **comm_pkg_ptr );
NALU_HYPRE_Int nalu_hypre_CommTypeSetEntries ( nalu_hypre_CommType *comm_type, NALU_HYPRE_Int *boxnums,
                                     nalu_hypre_Box *boxes, nalu_hypre_Index stride, nalu_hypre_Index coord, nalu_hypre_Index dir, NALU_HYPRE_Int *order,
                                     nalu_hypre_BoxArray *data_space, NALU_HYPRE_Int *data_offsets );
NALU_HYPRE_Int nalu_hypre_CommTypeSetEntry ( nalu_hypre_Box *box, nalu_hypre_Index stride, nalu_hypre_Index coord,
                                   nalu_hypre_Index dir, NALU_HYPRE_Int *order, nalu_hypre_Box *data_box, NALU_HYPRE_Int data_box_offset,
                                   nalu_hypre_CommEntryType *comm_entry );
NALU_HYPRE_Int nalu_hypre_InitializeCommunication ( nalu_hypre_CommPkg *comm_pkg, NALU_HYPRE_Complex *send_data,
                                          NALU_HYPRE_Complex *recv_data, NALU_HYPRE_Int action, NALU_HYPRE_Int tag, nalu_hypre_CommHandle **comm_handle_ptr );
NALU_HYPRE_Int nalu_hypre_FinalizeCommunication ( nalu_hypre_CommHandle *comm_handle );
NALU_HYPRE_Int nalu_hypre_ExchangeLocalData ( nalu_hypre_CommPkg *comm_pkg, NALU_HYPRE_Complex *send_data,
                                    NALU_HYPRE_Complex *recv_data, NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_CommPkgDestroy ( nalu_hypre_CommPkg *comm_pkg );

/* struct_copy.c */
NALU_HYPRE_Int nalu_hypre_StructCopy ( nalu_hypre_StructVector *x, nalu_hypre_StructVector *y );
NALU_HYPRE_Int nalu_hypre_StructPartialCopy ( nalu_hypre_StructVector *x, nalu_hypre_StructVector *y,
                                    nalu_hypre_BoxArrayArray *array_boxes );

/* struct_grid.c */
NALU_HYPRE_Int nalu_hypre_StructGridCreate ( MPI_Comm comm, NALU_HYPRE_Int dim, nalu_hypre_StructGrid **grid_ptr );
NALU_HYPRE_Int nalu_hypre_StructGridRef ( nalu_hypre_StructGrid *grid, nalu_hypre_StructGrid **grid_ref );
NALU_HYPRE_Int nalu_hypre_StructGridDestroy ( nalu_hypre_StructGrid *grid );
NALU_HYPRE_Int nalu_hypre_StructGridSetPeriodic ( nalu_hypre_StructGrid *grid, nalu_hypre_Index periodic );
NALU_HYPRE_Int nalu_hypre_StructGridSetExtents ( nalu_hypre_StructGrid *grid, nalu_hypre_Index ilower,
                                       nalu_hypre_Index iupper );
NALU_HYPRE_Int nalu_hypre_StructGridSetBoxes ( nalu_hypre_StructGrid *grid, nalu_hypre_BoxArray *boxes );
NALU_HYPRE_Int nalu_hypre_StructGridSetBoundingBox ( nalu_hypre_StructGrid *grid, nalu_hypre_Box *new_bb );
NALU_HYPRE_Int nalu_hypre_StructGridSetIDs ( nalu_hypre_StructGrid *grid, NALU_HYPRE_Int *ids );
NALU_HYPRE_Int nalu_hypre_StructGridSetBoxManager ( nalu_hypre_StructGrid *grid, nalu_hypre_BoxManager *boxman );
NALU_HYPRE_Int nalu_hypre_StructGridSetMaxDistance ( nalu_hypre_StructGrid *grid, nalu_hypre_Index dist );
NALU_HYPRE_Int nalu_hypre_StructGridAssemble ( nalu_hypre_StructGrid *grid );
NALU_HYPRE_Int nalu_hypre_GatherAllBoxes ( MPI_Comm comm, nalu_hypre_BoxArray *boxes, NALU_HYPRE_Int dim,
                                 nalu_hypre_BoxArray **all_boxes_ptr, NALU_HYPRE_Int **all_procs_ptr, NALU_HYPRE_Int *first_local_ptr );
NALU_HYPRE_Int nalu_hypre_ComputeBoxnums ( nalu_hypre_BoxArray *boxes, NALU_HYPRE_Int *procs, NALU_HYPRE_Int **boxnums_ptr );
NALU_HYPRE_Int nalu_hypre_StructGridPrint ( FILE *file, nalu_hypre_StructGrid *grid );
NALU_HYPRE_Int nalu_hypre_StructGridRead ( MPI_Comm comm, FILE *file, nalu_hypre_StructGrid **grid_ptr );
NALU_HYPRE_Int nalu_hypre_StructGridSetNumGhost ( nalu_hypre_StructGrid *grid, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int nalu_hypre_StructGridGetMaxBoxSize ( nalu_hypre_StructGrid *grid );
#if defined(NALU_HYPRE_USING_CUDA) || defined(NALU_HYPRE_USING_HIP)
NALU_HYPRE_Int nalu_hypre_StructGridSetDataLocation( NALU_HYPRE_StructGrid grid,
                                           NALU_HYPRE_MemoryLocation data_location );
#endif
/* struct_innerprod.c */
NALU_HYPRE_Real nalu_hypre_StructInnerProd ( nalu_hypre_StructVector *x, nalu_hypre_StructVector *y );

/* struct_io.c */
NALU_HYPRE_Int nalu_hypre_PrintBoxArrayData ( FILE *file, nalu_hypre_BoxArray *box_array,
                                    nalu_hypre_BoxArray *data_space, NALU_HYPRE_Int num_values, NALU_HYPRE_Int dim, NALU_HYPRE_Complex *data );
NALU_HYPRE_Int nalu_hypre_PrintCCVDBoxArrayData ( FILE *file, nalu_hypre_BoxArray *box_array,
                                        nalu_hypre_BoxArray *data_space, NALU_HYPRE_Int num_values, NALU_HYPRE_Int center_rank, NALU_HYPRE_Int stencil_size,
                                        NALU_HYPRE_Int *symm_elements, NALU_HYPRE_Int dim, NALU_HYPRE_Complex *data );
NALU_HYPRE_Int nalu_hypre_PrintCCBoxArrayData ( FILE *file, nalu_hypre_BoxArray *box_array,
                                      nalu_hypre_BoxArray *data_space, NALU_HYPRE_Int num_values, NALU_HYPRE_Complex *data );
NALU_HYPRE_Int nalu_hypre_ReadBoxArrayData ( FILE *file, nalu_hypre_BoxArray *box_array,
                                   nalu_hypre_BoxArray *data_space, NALU_HYPRE_Int num_values, NALU_HYPRE_Int dim, NALU_HYPRE_Complex *data );
NALU_HYPRE_Int nalu_hypre_ReadBoxArrayData_CC ( FILE *file, nalu_hypre_BoxArray *box_array,
                                      nalu_hypre_BoxArray *data_space, NALU_HYPRE_Int stencil_size, NALU_HYPRE_Int real_stencil_size,
                                      NALU_HYPRE_Int constant_coefficient, NALU_HYPRE_Int dim, NALU_HYPRE_Complex *data );

/* struct_matrix.c */
NALU_HYPRE_Complex *nalu_hypre_StructMatrixExtractPointerByIndex ( nalu_hypre_StructMatrix *matrix, NALU_HYPRE_Int b,
                                                         nalu_hypre_Index index );
nalu_hypre_StructMatrix *nalu_hypre_StructMatrixCreate ( MPI_Comm comm, nalu_hypre_StructGrid *grid,
                                               nalu_hypre_StructStencil *user_stencil );
nalu_hypre_StructMatrix *nalu_hypre_StructMatrixRef ( nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixDestroy ( nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixInitializeShell ( nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixInitializeData ( nalu_hypre_StructMatrix *matrix, NALU_HYPRE_Complex *data,
                                             NALU_HYPRE_Complex *data_const);
NALU_HYPRE_Int nalu_hypre_StructMatrixInitialize ( nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixSetValues ( nalu_hypre_StructMatrix *matrix, nalu_hypre_Index grid_index,
                                        NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values, NALU_HYPRE_Int action,
                                        NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructMatrixSetBoxValues ( nalu_hypre_StructMatrix *matrix, nalu_hypre_Box *set_box,
                                           nalu_hypre_Box *value_box, NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices,
                                           NALU_HYPRE_Complex *values, NALU_HYPRE_Int action, NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructMatrixSetConstantValues ( nalu_hypre_StructMatrix *matrix,
                                                NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Complex *values,
                                                NALU_HYPRE_Int action );
NALU_HYPRE_Int nalu_hypre_StructMatrixClearValues ( nalu_hypre_StructMatrix *matrix, nalu_hypre_Index grid_index,
                                          NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructMatrixClearBoxValues ( nalu_hypre_StructMatrix *matrix, nalu_hypre_Box *clear_box,
                                             NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices, NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructMatrixAssemble ( nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixSetNumGhost ( nalu_hypre_StructMatrix *matrix, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int nalu_hypre_StructMatrixSetConstantCoefficient ( nalu_hypre_StructMatrix *matrix,
                                                     NALU_HYPRE_Int constant_coefficient );
NALU_HYPRE_Int nalu_hypre_StructMatrixSetConstantEntries ( nalu_hypre_StructMatrix *matrix, NALU_HYPRE_Int nentries,
                                                 NALU_HYPRE_Int *entries );
NALU_HYPRE_Int nalu_hypre_StructMatrixClearGhostValues ( nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixPrintData ( FILE *file, nalu_hypre_StructMatrix *matrix, NALU_HYPRE_Int all );
NALU_HYPRE_Int nalu_hypre_StructMatrixReadData ( FILE *file, nalu_hypre_StructMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixPrint ( const char *filename, nalu_hypre_StructMatrix *matrix,
                                    NALU_HYPRE_Int all );
nalu_hypre_StructMatrix *nalu_hypre_StructMatrixRead ( MPI_Comm comm, const char *filename,
                                             NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int nalu_hypre_StructMatrixMigrate ( nalu_hypre_StructMatrix *from_matrix,
                                      nalu_hypre_StructMatrix *to_matrix );
NALU_HYPRE_Int nalu_hypre_StructMatrixClearBoundary( nalu_hypre_StructMatrix *matrix);

/* struct_matrix_mask.c */
nalu_hypre_StructMatrix *nalu_hypre_StructMatrixCreateMask ( nalu_hypre_StructMatrix *matrix,
                                                   NALU_HYPRE_Int num_stencil_indices, NALU_HYPRE_Int *stencil_indices );

/* struct_matvec.c */
void *nalu_hypre_StructMatvecCreate ( void );
NALU_HYPRE_Int nalu_hypre_StructMatvecSetup ( void *matvec_vdata, nalu_hypre_StructMatrix *A,
                                    nalu_hypre_StructVector *x );
NALU_HYPRE_Int nalu_hypre_StructMatvecCompute ( void *matvec_vdata, NALU_HYPRE_Complex alpha,
                                      nalu_hypre_StructMatrix *A, nalu_hypre_StructVector *x, NALU_HYPRE_Complex beta, nalu_hypre_StructVector *y );
NALU_HYPRE_Int nalu_hypre_StructMatvecCC0 ( NALU_HYPRE_Complex alpha, nalu_hypre_StructMatrix *A, nalu_hypre_StructVector *x,
                                  nalu_hypre_StructVector *y, nalu_hypre_BoxArrayArray *compute_box_aa, nalu_hypre_IndexRef stride );
NALU_HYPRE_Int nalu_hypre_StructMatvecCC1 ( NALU_HYPRE_Complex alpha, nalu_hypre_StructMatrix *A, nalu_hypre_StructVector *x,
                                  nalu_hypre_StructVector *y, nalu_hypre_BoxArrayArray *compute_box_aa, nalu_hypre_IndexRef stride );
NALU_HYPRE_Int nalu_hypre_StructMatvecCC2 ( NALU_HYPRE_Complex alpha, nalu_hypre_StructMatrix *A, nalu_hypre_StructVector *x,
                                  nalu_hypre_StructVector *y, nalu_hypre_BoxArrayArray *compute_box_aa, nalu_hypre_IndexRef stride );
NALU_HYPRE_Int nalu_hypre_StructMatvecDestroy ( void *matvec_vdata );
NALU_HYPRE_Int nalu_hypre_StructMatvec ( NALU_HYPRE_Complex alpha, nalu_hypre_StructMatrix *A, nalu_hypre_StructVector *x,
                               NALU_HYPRE_Complex beta, nalu_hypre_StructVector *y );

/* struct_scale.c */
NALU_HYPRE_Int nalu_hypre_StructScale ( NALU_HYPRE_Complex alpha, nalu_hypre_StructVector *y );

/* struct_stencil.c */
nalu_hypre_StructStencil *nalu_hypre_StructStencilCreate ( NALU_HYPRE_Int dim, NALU_HYPRE_Int size,
                                                 nalu_hypre_Index *shape );
nalu_hypre_StructStencil *nalu_hypre_StructStencilRef ( nalu_hypre_StructStencil *stencil );
NALU_HYPRE_Int nalu_hypre_StructStencilDestroy ( nalu_hypre_StructStencil *stencil );
NALU_HYPRE_Int nalu_hypre_StructStencilElementRank ( nalu_hypre_StructStencil *stencil,
                                           nalu_hypre_Index stencil_element );
NALU_HYPRE_Int nalu_hypre_StructStencilSymmetrize ( nalu_hypre_StructStencil *stencil,
                                          nalu_hypre_StructStencil **symm_stencil_ptr, NALU_HYPRE_Int **symm_elements_ptr );

/* struct_vector.c */
nalu_hypre_StructVector *nalu_hypre_StructVectorCreate ( MPI_Comm comm, nalu_hypre_StructGrid *grid );
nalu_hypre_StructVector *nalu_hypre_StructVectorRef ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorDestroy ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorInitializeShell ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorInitializeData ( nalu_hypre_StructVector *vector, NALU_HYPRE_Complex *data);
NALU_HYPRE_Int nalu_hypre_StructVectorInitialize ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorSetValues ( nalu_hypre_StructVector *vector, nalu_hypre_Index grid_index,
                                        NALU_HYPRE_Complex *values, NALU_HYPRE_Int action, NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructVectorSetBoxValues ( nalu_hypre_StructVector *vector, nalu_hypre_Box *set_box,
                                           nalu_hypre_Box *value_box, NALU_HYPRE_Complex *values, NALU_HYPRE_Int action, NALU_HYPRE_Int boxnum,
                                           NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructVectorClearValues ( nalu_hypre_StructVector *vector, nalu_hypre_Index grid_index,
                                          NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructVectorClearBoxValues ( nalu_hypre_StructVector *vector, nalu_hypre_Box *clear_box,
                                             NALU_HYPRE_Int boxnum, NALU_HYPRE_Int outside );
NALU_HYPRE_Int nalu_hypre_StructVectorClearAllValues ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorSetNumGhost ( nalu_hypre_StructVector *vector, NALU_HYPRE_Int *num_ghost );
NALU_HYPRE_Int nalu_hypre_StructVectorSetDataSize(nalu_hypre_StructVector *vector, NALU_HYPRE_Int *data_size,
                                        NALU_HYPRE_Int *data_host_size);
NALU_HYPRE_Int nalu_hypre_StructVectorAssemble ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorCopy ( nalu_hypre_StructVector *x, nalu_hypre_StructVector *y );
NALU_HYPRE_Int nalu_hypre_StructVectorSetConstantValues ( nalu_hypre_StructVector *vector, NALU_HYPRE_Complex values );
NALU_HYPRE_Int nalu_hypre_StructVectorSetFunctionValues ( nalu_hypre_StructVector *vector,
                                                NALU_HYPRE_Complex (*fcn )());
NALU_HYPRE_Int nalu_hypre_StructVectorClearGhostValues ( nalu_hypre_StructVector *vector );
NALU_HYPRE_Int nalu_hypre_StructVectorClearBoundGhostValues ( nalu_hypre_StructVector *vector, NALU_HYPRE_Int force );
NALU_HYPRE_Int nalu_hypre_StructVectorScaleValues ( nalu_hypre_StructVector *vector, NALU_HYPRE_Complex factor );
nalu_hypre_CommPkg *nalu_hypre_StructVectorGetMigrateCommPkg ( nalu_hypre_StructVector *from_vector,
                                                     nalu_hypre_StructVector *to_vector );
NALU_HYPRE_Int nalu_hypre_StructVectorMigrate ( nalu_hypre_CommPkg *comm_pkg, nalu_hypre_StructVector *from_vector,
                                      nalu_hypre_StructVector *to_vector );
NALU_HYPRE_Int nalu_hypre_StructVectorPrint ( const char *filename, nalu_hypre_StructVector *vector,
                                    NALU_HYPRE_Int all );
nalu_hypre_StructVector *nalu_hypre_StructVectorRead ( MPI_Comm comm, const char *filename,
                                             NALU_HYPRE_Int *num_ghost );
nalu_hypre_StructVector *nalu_hypre_StructVectorClone ( nalu_hypre_StructVector *vector );
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the BoxLoop
 *
 *****************************************************************************/

/*--------------------------------------------------------------------------
 * BoxLoop macros:
 *--------------------------------------------------------------------------*/

#ifndef NALU_HYPRE_BOXLOOP_DEVICEOMP_HEADER
#define NALU_HYPRE_BOXLOOP_DEVICEOMP_HEADER

#if defined(NALU_HYPRE_USING_DEVICE_OPENMP) && !defined(NALU_HYPRE_USING_RAJA) && !defined(NALU_HYPRE_USING_KOKKOS)

#include "omp.h"

/* concatenation:
 */
#define NALU_HYPRE_CONCAT2(x, y) x ## _ ## y
#define NALU_HYPRE_XCONCAT2(x, y) NALU_HYPRE_CONCAT2(x, y)

#define NALU_HYPRE_CONCAT3(x, y, z) x ## _ ## y ## _ ## z
#define NALU_HYPRE_XCONCAT3(x, y, z) NALU_HYPRE_CONCAT3(x, y, z)

/* if use OMP 4.5 default team size and number of teams */
#define AUTO_OMP_TEAM

#ifndef AUTO_OMP_TEAM
/* omp team size (aka. gpu block size) */
#define nalu_hypre_gpu_block_size NALU_HYPRE_1D_BLOCK_SIZE
/* the max number of omp teams */
#define nalu_hypre_max_num_blocks 1000000
#endif

//#define NALU_HYPRE_BOXLOOP_ENTRY_PRINT nalu_hypre_printf("%s %s %d\n", __FILE__, __func__, __LINE__);
#define NALU_HYPRE_BOXLOOP_ENTRY_PRINT

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   BOX LOOPS [TEAM DISTRIBUTE VERSION]
   !!! NOTE: THIS CODE ONLY WORKS FOR DIM <= 3 !!!
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/*
#define nalu_hypre_BoxLoop0For()
#define nalu_hypre_BoxLoop1For(i1)
#define nalu_hypre_BoxLoop2For(i1, i2)
#define nalu_hypre_BoxLoop3For(i1, i2, i3)
#define nalu_hypre_BoxLoop4For(i1, i2, i3, i4)
*/
#define nalu_hypre_BoxLoopBlock()       0

#define nalu_hypre_BoxLoop0Begin  zypre_omp4_dist_BoxLoop0Begin
#define nalu_hypre_BoxLoop0End    zypre_omp4_dist_BoxLoopEnd
#define nalu_hypre_BoxLoop1Begin  zypre_omp4_dist_BoxLoop1Begin
#define nalu_hypre_BoxLoop1End    zypre_omp4_dist_BoxLoopEnd
#define nalu_hypre_BasicBoxLoop2Begin    zypre_omp4_dist_BoxLoop2_v2_Begin
#define nalu_hypre_BoxLoop2Begin  zypre_omp4_dist_BoxLoop2Begin
#define nalu_hypre_BoxLoop2End    zypre_omp4_dist_BoxLoopEnd
#define nalu_hypre_BoxLoop3Begin  zypre_omp4_dist_BoxLoop3Begin
#if 0
#define nalu_hypre_BoxLoop3_SAME_STRIDE_Begin  zypre_omp4_dist_BoxLoop3_SAME_STRIDE_Begin
#endif
#define nalu_hypre_BoxLoop3End    zypre_omp4_dist_BoxLoopEnd
#define nalu_hypre_BoxLoop4Begin  zypre_omp4_dist_BoxLoop4Begin
#define nalu_hypre_BoxLoop4End    zypre_omp4_dist_BoxLoopEnd
#define nalu_hypre_LoopBegin      zypre_omp4_dist_LoopBegin
#define nalu_hypre_LoopEnd        zypre_omp4_dist_BoxLoopEnd

/* Look for more in struct_ls/red_black_gs.h" */

#define zypre_omp4_dist_BoxLoopEnd(...) \
   }\
   /*cudaDeviceSynchronize();*/ \
}

#define NALU_HYPRE_BOX_REDUCTION

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * host code: declare variables used in the box loop
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopDeclareInit_0(ndim, loop_size) \
NALU_HYPRE_Int nalu_hypre__ndim = ndim, nalu_hypre__tot = 1; \
/* NALU_HYPRE_Int nalu_hypre__thread; */ \
/* loop size */ \
NALU_HYPRE_Int nalu_hypre__loop_size_0, nalu_hypre__loop_size_1, nalu_hypre__loop_size_2; \
if (nalu_hypre__ndim > 0) { nalu_hypre__loop_size_0 = loop_size[0];  nalu_hypre__tot *= nalu_hypre__loop_size_0; } \
if (nalu_hypre__ndim > 1) { nalu_hypre__loop_size_1 = loop_size[1];  nalu_hypre__tot *= nalu_hypre__loop_size_1; } \
if (nalu_hypre__ndim > 2) { nalu_hypre__loop_size_2 = loop_size[2];  nalu_hypre__tot *= nalu_hypre__loop_size_2; }

#ifdef AUTO_OMP_TEAM
#define TEAM_CLAUSE
#define zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) zypre_omp4_BoxLoopDeclareInit_0(ndim, loop_size)
#else
#define TEAM_CLAUSE num_teams(num_blocks) thread_limit(block_size)
#define zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) zypre_omp4_BoxLoopDeclareInit_0(ndim, loop_size) \
/* GPU block numbers and dimensions */ \
NALU_HYPRE_Int block_size = nalu_hypre_gpu_block_size; \
NALU_HYPRE_Int num_blocks = nalu_hypre_min(nalu_hypre_max_num_blocks, (nalu_hypre__tot + nalu_hypre_gpu_block_size - 1) / nalu_hypre_gpu_block_size);
#endif


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * host code: declare and initialize variables for box k
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxKDeclareInitBody(j, k, startk, dboxk, stridek) \
   NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,k) = stridek[j]; \
/* precompute some entities used in the parallel for loop */ \
   NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,k) = startk[j] - dboxk->imin[j]; \
   NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,k) = dboxk->imax[j] - dboxk->imin[j] + 1;


#define zypre_omp4_BoxKDeclareInit(k, startk, dboxk, stridek)\
/* start - imin */ \
NALU_HYPRE_Int NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,0,k), NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,1,k), NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,2,k); \
/* imax - imin + 1 */ \
NALU_HYPRE_Int NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,0,k), NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,1,k), NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,2,k); \
/* stride */ \
NALU_HYPRE_Int NALU_HYPRE_XCONCAT3(nalu_hypre__stride,0,k), NALU_HYPRE_XCONCAT3(nalu_hypre__stride,1,k), NALU_HYPRE_XCONCAT3(nalu_hypre__stride,2,k); \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxKDeclareInitBody(0, k, startk, dboxk, stridek) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxKDeclareInitBody(1, k, startk, dboxk, stridek) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxKDeclareInitBody(2, k, startk, dboxk, stridek) } \

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * map clause
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define MAP_CLAUSE0
#define MAP_CLAUSE1
#define MAP_CLAUSE2
#define MAP_CLAUSE3
#define MAP_CLAUSE4

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * if clause
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define IF_CLAUSE if (nalu_hypre__global_offload && nalu_hypre__tot > 0)
//#define IF_CLAUSE

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * is_device_ptr clause
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#if defined(NALU_HYPRE_DEVICE_OPENMP_ALLOC)
#define IS_DEVICE_CLAUSE DEVICE_VAR
#else
#define IS_DEVICE_CLAUSE
#endif

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * device code for BoxLoop 1, set i1
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopSet1Body(j, i1) \
/* coord in dimension j */ \
nalu_hypre__i = nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* once */ \
nalu_hypre__i_1 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,1);\
/* once */ \
i1 += nalu_hypre__i_1 * nalu_hypre__I_1; \
/* once */ \
nalu_hypre__I_1 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,1); \
/* */ \
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* save the 3-D id */ \
NALU_HYPRE_XCONCAT2(nalu_hypre__id,j) = nalu_hypre__i;


#define zypre_omp4_BoxLoopSet1(i1) \
NALU_HYPRE_Int nalu_hypre__I_1, nalu_hypre__i, nalu_hypre__i_1, nalu_hypre__J, i1, idx; \
NALU_HYPRE_Int nalu_hypre__id_0, nalu_hypre__id_1, nalu_hypre__id_2;               \
nalu_hypre__I_1 = 1;  idx = nalu_hypre__J = nalu_hypre__thread;  i1 = 0;      \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet1Body(0, i1) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet1Body(1, i1) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet1Body(2, i1) }


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * device code for BoxLoop 2, set i1, i2
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopSet2Body(j, i1, i2) \
/* */ \
nalu_hypre__i = nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* twice */ \
nalu_hypre__i_1 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,1);\
nalu_hypre__i_2 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,2) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,2);\
/* twice */ \
i1 += nalu_hypre__i_1 * nalu_hypre__I_1; \
i2 += nalu_hypre__i_2 * nalu_hypre__I_2; \
/* twice */ \
nalu_hypre__I_1 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,1); \
nalu_hypre__I_2 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,2); \
/* */ \
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* save the 3-D id */ \
NALU_HYPRE_XCONCAT2(nalu_hypre__id,j) = nalu_hypre__i;


#define zypre_omp4_BoxLoopSet2(i1, i2) \
NALU_HYPRE_Int nalu_hypre__I_1, nalu_hypre__I_2, nalu_hypre__i, nalu_hypre__i_1, nalu_hypre__i_2, nalu_hypre__J, i1, i2; \
NALU_HYPRE_Int nalu_hypre__id_0, nalu_hypre__id_1, nalu_hypre__id_2;               \
nalu_hypre__I_1 = nalu_hypre__I_2 = 1;  nalu_hypre__J = nalu_hypre__thread;  i1 = i2 = 0; \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet2Body(0, i1, i2) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet2Body(1, i1, i2) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet2Body(2, i1, i2) }


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * device code for BoxLoop 3, set i1, i2, i3
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopSet3Body(j, i1, i2, i3) \
/* */ \
nalu_hypre__i = nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* 3 times */ \
nalu_hypre__i_1 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,1);\
nalu_hypre__i_2 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,2) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,2);\
nalu_hypre__i_3 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,3) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,3);\
/* 3 times */ \
i1 += nalu_hypre__i_1 * nalu_hypre__I_1; \
i2 += nalu_hypre__i_2 * nalu_hypre__I_2; \
i3 += nalu_hypre__i_3 * nalu_hypre__I_3; \
/* 3 times */ \
nalu_hypre__I_1 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,1); \
nalu_hypre__I_2 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,2); \
nalu_hypre__I_3 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,3); \
/* */ \
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* save the 3-D id */ \
NALU_HYPRE_XCONCAT2(nalu_hypre__id,j) = nalu_hypre__i;


#define zypre_omp4_BoxLoopSet3(i1, i2, i3) \
NALU_HYPRE_Int nalu_hypre__I_1, nalu_hypre__I_2, nalu_hypre__I_3, nalu_hypre__i, nalu_hypre__i_1, nalu_hypre__i_2, nalu_hypre__i_3, nalu_hypre__J, i1, i2, i3; \
NALU_HYPRE_Int nalu_hypre__id_0, nalu_hypre__id_1, nalu_hypre__id_2; \
nalu_hypre__I_1 = nalu_hypre__I_2 = nalu_hypre__I_3 = 1;  nalu_hypre__J = nalu_hypre__thread;  i1 = i2 = i3 = 0; \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet3Body(0, i1, i2, i3) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet3Body(1, i1, i2, i3) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet3Body(2, i1, i2, i3) }

#if 0
/* - - - - - special Box 3: XXX */
#define zypre_omp4_BoxLoopSet3_SAME_STRIDE_Body(j, i1, i2, i3) \
/* */ \
nalu_hypre__i = (nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j)) * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1); \
/* 3 times */ \
nalu_hypre__i_1 = nalu_hypre__i + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,1);\
nalu_hypre__i_2 = nalu_hypre__i + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,2);\
nalu_hypre__i_3 = nalu_hypre__i + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,3);\
/* 3 times */ \
i1 += nalu_hypre__i_1 * nalu_hypre__I_1; \
i2 += nalu_hypre__i_2 * nalu_hypre__I_2; \
i3 += nalu_hypre__i_3 * nalu_hypre__I_3; \
/* 3 times */ \
nalu_hypre__I_1 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,1); \
nalu_hypre__I_2 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,2); \
nalu_hypre__I_3 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,3); \
/* */ \
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j);


#define zypre_omp4_BoxLoopSet3_SAME_STRIDE(i1, i2, o2, i3) \
NALU_HYPRE_Int nalu_hypre__I_1, nalu_hypre__I_2, nalu_hypre__I_3, nalu_hypre__i, nalu_hypre__i_1, nalu_hypre__i_2, nalu_hypre__i_3, nalu_hypre__J; \
nalu_hypre__I_1 = nalu_hypre__I_2 = nalu_hypre__I_3 = 1;  nalu_hypre__J = nalu_hypre__thread;  i1 = i3 = 0; i2 = o2;\
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet3_SAME_STRIDE_Body(0, i1, i2, i3) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet3_SAME_STRIDE_Body(1, i1, i2, i3) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet3_SAME_STRIDE_Body(2, i1, i2, i3) }
#endif

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * device code for BoxLoop 4, set i1, i2, i3, i4
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopSet4Body(j, i1, i2, i3, i4) \
/* */ \
nalu_hypre__i = nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* 4 times */ \
nalu_hypre__i_1 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,1);\
nalu_hypre__i_2 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,2) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,2);\
nalu_hypre__i_3 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,3) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,3);\
nalu_hypre__i_4 = nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,4) + NALU_HYPRE_XCONCAT3(nalu_hypre__box_start_imin,j,4);\
/* 4 times */ \
i1 += nalu_hypre__i_1 * nalu_hypre__I_1; \
i2 += nalu_hypre__i_2 * nalu_hypre__I_2; \
i3 += nalu_hypre__i_3 * nalu_hypre__I_3; \
i4 += nalu_hypre__i_4 * nalu_hypre__I_4; \
/* 4 times */ \
nalu_hypre__I_1 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,1); \
nalu_hypre__I_2 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,2); \
nalu_hypre__I_3 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,3); \
nalu_hypre__I_4 *= NALU_HYPRE_XCONCAT3(nalu_hypre__box_imax_imin,j,4); \
/* */ \
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* save the 3-D id */ \
NALU_HYPRE_XCONCAT2(nalu_hypre__id,j) = nalu_hypre__i;


#define zypre_omp4_BoxLoopSet4(i1, i2, i3, i4) \
NALU_HYPRE_Int nalu_hypre__I_1, nalu_hypre__I_2, nalu_hypre__I_3, nalu_hypre__I_4, nalu_hypre__i, nalu_hypre__i_1, nalu_hypre__i_2, nalu_hypre__i_3, nalu_hypre__i_4, nalu_hypre__J, i1, i2, i3, i4; \
NALU_HYPRE_Int nalu_hypre__id_0, nalu_hypre__id_1, nalu_hypre__id_2; \
nalu_hypre__I_1 = nalu_hypre__I_2 = nalu_hypre__I_3 = nalu_hypre__I_4 = 1;  nalu_hypre__J = nalu_hypre__thread;  i1 = i2 = i3 = i4 = 0; \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet4Body(0, i1, i2, i3, i4) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet4Body(1, i1, i2, i3, i4) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet4Body(2, i1, i2, i3, i4) }



/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 0
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_dist_BoxLoop0Begin(ndim, loop_size) \
{\
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE0 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 1
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#define zypre_omp4_dist_BoxLoop1Begin(ndim, loop_size, dbox1, start1, stride1, i1) \
{\
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE1 IS_DEVICE_CLAUSE NALU_HYPRE_BOX_REDUCTION TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet1(i1)

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 2
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#define zypre_omp4_dist_BoxLoop2Begin(ndim, loop_size, dbox1, start1, stride1, i1, dbox2, start2, stride2, i2) \
{\
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   zypre_omp4_BoxKDeclareInit(2, start2, dbox2, stride2) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE2 IS_DEVICE_CLAUSE NALU_HYPRE_BOX_REDUCTION TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet2(i1, i2)

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 3
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_dist_BoxLoop3Begin(ndim, loop_size, \
      dbox1, start1, stride1, i1, \
      dbox2, start2, stride2, i2, \
      dbox3, start3, stride3, i3) \
{\
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   zypre_omp4_BoxKDeclareInit(2, start2, dbox2, stride2) \
   zypre_omp4_BoxKDeclareInit(3, start3, dbox3, stride3) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE3 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet3(i1, i2, i3)

#if 0
#define zypre_omp4_dist_BoxLoop3_SAME_STRIDE_Begin(ndim, loop_size, \
      dbox1, start1, stride1, i1, \
      dbox2, start2, stride2, i2, o2, \
      dbox3, start3, stride3, i3) \
{\
   /* host code: */ \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   zypre_omp4_BoxKDeclareInit(2, start2, dbox2, stride2) \
   zypre_omp4_BoxKDeclareInit(3, start3, dbox3, stride3) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE3 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet3_SAME_STRIDE(i1, i2, o2, i3)
#endif

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 4
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_dist_BoxLoop4Begin(ndim, loop_size, \
      dbox1, start1, stride1, i1, \
      dbox2, start2, stride2, i2, \
      dbox3, start3, stride3, i3, \
      dbox4, start4, stride4, i4) \
{\
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   zypre_omp4_BoxKDeclareInit(2, start2, dbox2, stride2) \
   zypre_omp4_BoxKDeclareInit(3, start3, dbox3, stride3) \
   zypre_omp4_BoxKDeclareInit(4, start4, dbox4, stride4) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE4 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet4(i1, i2, i3, i4)

#if 0

/* no longer needed, use the above BoxLoop's for reductions */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 1 reduction
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#define zypre_omp4_dist_Red_BoxLoop1Begin(ndim, loop_size, dbox1, start1, stride1, i1, xsum) \
{\
   /* host code: */ \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE1 map(tofrom: xsum) reduction(+:xsum) TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet1(i1)

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * BoxLoop 2 reduction
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_dist_Red_BoxLoop2Begin(ndim, loop_size, dbox1, start1, stride1, i1, dbox2, start2, stride2, i2, xsum) \
{\
   /* host code: */ \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit(1, start1, dbox1, stride1) \
   zypre_omp4_BoxKDeclareInit(2, start2, dbox2, stride2) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE2 map(tofrom: xsum) reduction(+:xsum) TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet2(i1, i2)

#endif


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *                     v2
 * host code: declare and initialize variables for box k
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxKDeclareInit_v2(k, stridek)\
/* stridek[0,1,2] */ \
NALU_HYPRE_Int NALU_HYPRE_XCONCAT3(nalu_hypre__stride,0,k), NALU_HYPRE_XCONCAT3(nalu_hypre__stride,1,k), NALU_HYPRE_XCONCAT3(nalu_hypre__stride,2,k); \
/*if (nalu_hypre__ndim > 0)*/ { NALU_HYPRE_XCONCAT3(nalu_hypre__stride,0,k) = stridek[0]; } \
  if (nalu_hypre__ndim > 1)   { NALU_HYPRE_XCONCAT3(nalu_hypre__stride,1,k) = stridek[1]; } \
  if (nalu_hypre__ndim > 2)   { NALU_HYPRE_XCONCAT3(nalu_hypre__stride,2,k) = stridek[2]; } \

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *                     v2
 * device code for BoxLoop 1, set i1
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopSet1Body_v2(j, i1) \
i1 += ( nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j) ) * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1);\
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j);


#define zypre_omp4_BoxLoopSet1_v2(i1, idx) \
NALU_HYPRE_Int nalu_hypre__J, i1, idx; \
idx = nalu_hypre__J = nalu_hypre__thread; i1 = 0; \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet1Body_v2(0, i1) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet1Body_v2(1, i1) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet1Body_v2(2, i1) }

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *                      v2: Basic
 * BoxLoop 1
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_dist_BoxLoop1_v2_Begin(ndim, loop_size, stride1, i1, idx) \
{\
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit_v2(1, stride1) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE1 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   {\
      zypre_omp4_BoxLoopSet1_v2(i1, idx)

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *                     v2
 * device code for BoxLoop 2, set i1, i2
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_BoxLoopSet2Body_v2(j, i1, i2) \
nalu_hypre__i = nalu_hypre__J % NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j); \
/* twice */ \
i1 += nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,1); \
i2 += nalu_hypre__i * NALU_HYPRE_XCONCAT3(nalu_hypre__stride,j,2); \
nalu_hypre__J /= NALU_HYPRE_XCONCAT2(nalu_hypre__loop_size,j);


#define zypre_omp4_BoxLoopSet2_v2(i1, i2) \
NALU_HYPRE_Int nalu_hypre__i, nalu_hypre__J, i1, i2; \
nalu_hypre__J = nalu_hypre__thread;  i1 = i2 = 0; \
/*if (nalu_hypre__ndim > 0)*/ { zypre_omp4_BoxLoopSet2Body_v2(0, i1, i2) } \
  if (nalu_hypre__ndim > 1)   { zypre_omp4_BoxLoopSet2Body_v2(1, i1, i2) } \
  if (nalu_hypre__ndim > 2)   { zypre_omp4_BoxLoopSet2Body_v2(2, i1, i2) }


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *                      v2: Basic
 * BoxLoop 2
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#define zypre_omp4_dist_BoxLoop2_v2_Begin(ndim, loop_size, stride1, i1, stride2, i2) \
{ \
   /* host code: */ \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   zypre_omp4_BoxLoopDeclareInit(ndim, loop_size) \
   zypre_omp4_BoxKDeclareInit_v2(1, stride1) \
   zypre_omp4_BoxKDeclareInit_v2(2, stride2) \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE2 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int nalu_hypre__thread = 0; nalu_hypre__thread < nalu_hypre__tot; nalu_hypre__thread++) \
   { \
      zypre_omp4_BoxLoopSet2_v2(i1, i2)

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Basic Loop
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define zypre_omp4_dist_LoopBegin(size, idx) \
{ \
   /* host code: */ \
   /* NALU_HYPRE_Int idx = 0; */\
   NALU_HYPRE_Int nalu_hypre__tot = size; \
   NALU_HYPRE_BOXLOOP_ENTRY_PRINT \
   /* device code: */ \
   _Pragma (NALU_HYPRE_XSTR(omp target teams distribute parallel for IF_CLAUSE MAP_CLAUSE2 IS_DEVICE_CLAUSE TEAM_CLAUSE)) \
   for (NALU_HYPRE_Int idx = 0; idx < nalu_hypre__tot; idx++) \
   {

#define nalu_hypre_BoxLoopGetIndex(index) \
  index[0] = nalu_hypre__id_0; \
  index[1] = nalu_hypre__id_1; \
  index[2] = nalu_hypre__id_2;

/* Reduction */
#define nalu_hypre_BoxLoop1ReductionBegin(ndim, loop_size, dbox1, start1, stride1, i1, reducesum) \
        nalu_hypre_BoxLoop1Begin(ndim, loop_size, dbox1, start1, stride1, i1)

#define nalu_hypre_BoxLoop1ReductionEnd(i1, reducesum) \
        nalu_hypre_BoxLoop1End(i1)

#define nalu_hypre_BoxLoop2ReductionBegin(ndim, loop_size, dbox1, start1, stride1, i1, \
                                                      dbox2, start2, stride2, i2, reducesum) \
        nalu_hypre_BoxLoop2Begin(ndim, loop_size, dbox1, start1, stride1, i1, \
                                             dbox2, start2, stride2, i2)

#define nalu_hypre_BoxLoop2ReductionEnd(i1, i2, reducesum) \
        nalu_hypre_BoxLoop2End(i1, i2)

#endif

#endif /* #ifndef NALU_HYPRE_BOXLOOP_DEVICEOMP_HEADER */

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for the BoxLoop
 *
 *****************************************************************************/

/*--------------------------------------------------------------------------
 * BoxLoop macros:
 *--------------------------------------------------------------------------*/

#ifndef NALU_HYPRE_BOXLOOP_HOST_HEADER
#define NALU_HYPRE_BOXLOOP_HOST_HEADER

#if defined(NALU_HYPRE_USING_OPENMP)
#define NALU_HYPRE_BOX_REDUCTION
#define NALU_HYPRE_OMP_CLAUSE
#if defined(WIN32) && defined(_MSC_VER)
#define Pragma(x) __pragma(NALU_HYPRE_XSTR(x))
#else
#define Pragma(x) _Pragma(NALU_HYPRE_XSTR(x))
#endif
#define OMP0 Pragma(omp parallel for NALU_HYPRE_OMP_CLAUSE NALU_HYPRE_BOX_REDUCTION NALU_HYPRE_SMP_SCHEDULE)
#define OMP1 Pragma(omp parallel for private(NALU_HYPRE_BOX_PRIVATE) NALU_HYPRE_OMP_CLAUSE NALU_HYPRE_BOX_REDUCTION NALU_HYPRE_SMP_SCHEDULE)
#else /* #if defined(NALU_HYPRE_USING_OPENMP) */
#define OMP0
#define OMP1
#endif /* #if defined(NALU_HYPRE_USING_OPENMP) */

#define zypre_BoxLoop0Begin(ndim, loop_size)                                  \
{                                                                             \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      zypre_BoxLoopSet();                                                     \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define zypre_BoxLoop0End()                                                   \
         }                                                                    \
         zypre_BoxLoopInc1();                                                 \
         zypre_BoxLoopInc2();                                                 \
      }                                                                       \
   }                                                                          \
}

#define zypre_BoxLoop1Begin(ndim, loop_size,                                  \
                            dbox1, start1, stride1, i1)                       \
{                                                                             \
   NALU_HYPRE_Int i1;                                                              \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopInitK(1, dbox1, start1, stride1, i1);                         \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      NALU_HYPRE_Int i1;                                                           \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define zypre_BoxLoop1End(i1)                                                 \
            i1 += nalu_hypre__i0inc1;                                              \
         }                                                                    \
         zypre_BoxLoopInc1();                                                 \
         i1 += nalu_hypre__ikinc1[nalu_hypre__d];                                       \
         zypre_BoxLoopInc2();                                                 \
      }                                                                       \
   }                                                                          \
}


#define zypre_BoxLoop2Begin(ndim, loop_size,                                  \
                            dbox1, start1, stride1, i1,                       \
                            dbox2, start2, stride2, i2)                       \
{                                                                             \
   NALU_HYPRE_Int i1, i2;                                                          \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopDeclareK(2);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopInitK(1, dbox1, start1, stride1, i1);                         \
   zypre_BoxLoopInitK(2, dbox2, start2, stride2, i2);                         \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      NALU_HYPRE_Int i1, i2;                                                       \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      zypre_BoxLoopSetK(2, i2);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define zypre_BoxLoop2End(i1, i2)                                             \
            i1 += nalu_hypre__i0inc1;                                              \
            i2 += nalu_hypre__i0inc2;                                              \
         }                                                                    \
         zypre_BoxLoopInc1();                                                 \
         i1 += nalu_hypre__ikinc1[nalu_hypre__d];                                       \
         i2 += nalu_hypre__ikinc2[nalu_hypre__d];                                       \
         zypre_BoxLoopInc2();                                                 \
      }                                                                       \
   }                                                                          \
}


#define zypre_BoxLoop3Begin(ndim, loop_size,                                  \
                            dbox1, start1, stride1, i1,                       \
                            dbox2, start2, stride2, i2,                       \
                            dbox3, start3, stride3, i3)                       \
{                                                                             \
   NALU_HYPRE_Int i1, i2, i3;                                                      \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopDeclareK(2);                                                  \
   zypre_BoxLoopDeclareK(3);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopInitK(1, dbox1, start1, stride1, i1);                         \
   zypre_BoxLoopInitK(2, dbox2, start2, stride2, i2);                         \
   zypre_BoxLoopInitK(3, dbox3, start3, stride3, i3);                         \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      NALU_HYPRE_Int i1, i2, i3;                                                   \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      zypre_BoxLoopSetK(2, i2);                                               \
      zypre_BoxLoopSetK(3, i3);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define zypre_BoxLoop3End(i1, i2, i3)                                         \
            i1 += nalu_hypre__i0inc1;                                              \
            i2 += nalu_hypre__i0inc2;                                              \
            i3 += nalu_hypre__i0inc3;                                              \
         }                                                                    \
         zypre_BoxLoopInc1();                                                 \
         i1 += nalu_hypre__ikinc1[nalu_hypre__d];                                       \
         i2 += nalu_hypre__ikinc2[nalu_hypre__d];                                       \
         i3 += nalu_hypre__ikinc3[nalu_hypre__d];                                       \
         zypre_BoxLoopInc2();                                                 \
      }                                                                       \
   }                                                                          \
}

#define zypre_BoxLoop4Begin(ndim, loop_size,                                  \
                            dbox1, start1, stride1, i1,                       \
                            dbox2, start2, stride2, i2,                       \
                            dbox3, start3, stride3, i3,                       \
                            dbox4, start4, stride4, i4)                       \
{                                                                             \
   NALU_HYPRE_Int i1, i2, i3, i4;                                                  \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopDeclareK(2);                                                  \
   zypre_BoxLoopDeclareK(3);                                                  \
   zypre_BoxLoopDeclareK(4);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopInitK(1, dbox1, start1, stride1, i1);                         \
   zypre_BoxLoopInitK(2, dbox2, start2, stride2, i2);                         \
   zypre_BoxLoopInitK(3, dbox3, start3, stride3, i3);                         \
   zypre_BoxLoopInitK(4, dbox4, start4, stride4, i4);                         \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      NALU_HYPRE_Int i1, i2, i3, i4;                                               \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      zypre_BoxLoopSetK(2, i2);                                               \
      zypre_BoxLoopSetK(3, i3);                                               \
      zypre_BoxLoopSetK(4, i4);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define zypre_BoxLoop4End(i1, i2, i3, i4)                                     \
            i1 += nalu_hypre__i0inc1;                                              \
            i2 += nalu_hypre__i0inc2;                                              \
            i3 += nalu_hypre__i0inc3;                                              \
            i4 += nalu_hypre__i0inc4;                                              \
         }                                                                    \
         zypre_BoxLoopInc1();                                                 \
         i1 += nalu_hypre__ikinc1[nalu_hypre__d];                                       \
         i2 += nalu_hypre__ikinc2[nalu_hypre__d];                                       \
         i3 += nalu_hypre__ikinc3[nalu_hypre__d];                                       \
         i4 += nalu_hypre__ikinc4[nalu_hypre__d];                                       \
         zypre_BoxLoopInc2();                                                 \
      }                                                                       \
   }                                                                          \
}

#define zypre_BasicBoxLoop1Begin(ndim, loop_size,                             \
                                 stride1, i1)                                 \
{                                                                             \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BasicBoxLoopInitK(1, stride1);                                       \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      NALU_HYPRE_Int i1;                                                           \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define zypre_BasicBoxLoop2Begin(ndim, loop_size,                             \
                                 stride1, i1,                                 \
                                 stride2, i2)                                 \
{                                                                             \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopDeclareK(2);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BasicBoxLoopInitK(1, stride1);                                       \
   zypre_BasicBoxLoopInitK(2, stride2);                                       \
   OMP1                                                                       \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      NALU_HYPRE_Int i1, i2;                                                       \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      zypre_BoxLoopSetK(2, i2);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {


#define zypre_LoopBegin(size, idx)                                            \
{                                                                             \
   NALU_HYPRE_Int idx;                                                             \
   OMP0                                                                       \
   for (idx = 0; idx < size; idx ++)                                          \
   {

#define zypre_LoopEnd()                                                       \
   }                                                                          \
}

/*--------------------------------------------------------------------------
 * Serial BoxLoop macros:
 * [same as the ones above (without OMP and with SetOneBlock)]
 * TODO: combine them
 *--------------------------------------------------------------------------*/
#define nalu_hypre_SerialBoxLoop0Begin(ndim, loop_size)                            \
{                                                                             \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopSetOneBlock();                                                \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      zypre_BoxLoopSet();                                                     \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define nalu_hypre_SerialBoxLoop0End()                                             \
         }                                                                    \
         zypre_BoxLoopInc1();                                                 \
         zypre_BoxLoopInc2();                                                 \
      }                                                                       \
   }                                                                          \
}

#define nalu_hypre_SerialBoxLoop1Begin(ndim, loop_size,                            \
                                  dbox1, start1, stride1, i1)                 \
{                                                                             \
   NALU_HYPRE_Int i1;                                                              \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopInitK(1, dbox1, start1, stride1, i1);                         \
   zypre_BoxLoopSetOneBlock();                                                \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define nalu_hypre_SerialBoxLoop1End(i1)  zypre_BoxLoop1End(i1)

#define nalu_hypre_SerialBoxLoop2Begin(ndim, loop_size,                            \
                                  dbox1, start1, stride1, i1,                 \
                                  dbox2, start2, stride2, i2)                 \
{                                                                             \
   NALU_HYPRE_Int i1,i2;                                                           \
   zypre_BoxLoopDeclare();                                                    \
   zypre_BoxLoopDeclareK(1);                                                  \
   zypre_BoxLoopDeclareK(2);                                                  \
   zypre_BoxLoopInit(ndim, loop_size);                                        \
   zypre_BoxLoopInitK(1, dbox1, start1, stride1, i1);                         \
   zypre_BoxLoopInitK(2, dbox2, start2, stride2, i2);                         \
   zypre_BoxLoopSetOneBlock();                                                \
   for (nalu_hypre__block = 0; nalu_hypre__block < nalu_hypre__num_blocks; nalu_hypre__block++)   \
   {                                                                          \
      zypre_BoxLoopSet();                                                     \
      zypre_BoxLoopSetK(1, i1);                                               \
      zypre_BoxLoopSetK(2, i2);                                               \
      for (nalu_hypre__J = 0; nalu_hypre__J < nalu_hypre__JN; nalu_hypre__J++)                    \
      {                                                                       \
         for (nalu_hypre__I = 0; nalu_hypre__I < nalu_hypre__IN; nalu_hypre__I++)                 \
         {

#define nalu_hypre_SerialBoxLoop2End(i1, i2) zypre_BoxLoop2End(i1, i2)

/* Reduction BoxLoop1 */
#define zypre_BoxLoop1ReductionBegin(ndim, loop_size, dbox1, start1, stride1, i1, reducesum) \
        zypre_BoxLoop1Begin(ndim, loop_size, dbox1, start1, stride1, i1)

#define zypre_BoxLoop1ReductionEnd(i1, reducesum) zypre_BoxLoop1End(i1)

/* Reduction BoxLoop2 */
#define zypre_BoxLoop2ReductionBegin(ndim, loop_size, dbox1, start1, stride1, i1,            \
                                                      dbox2, start2, stride2, i2, reducesum) \
        zypre_BoxLoop2Begin(ndim, loop_size, dbox1, start1, stride1, i1,                     \
                                             dbox2, start2, stride2, i2)

#define zypre_BoxLoop2ReductionEnd(i1, i2, reducesum) zypre_BoxLoop2End(i1, i2)


/* Renaming */
#define nalu_hypre_BoxLoopGetIndexHost          zypre_BoxLoopGetIndex
#define nalu_hypre_BoxLoopBlockHost             zypre_BoxLoopBlock
#define nalu_hypre_BoxLoop0BeginHost            zypre_BoxLoop0Begin
#define nalu_hypre_BoxLoop0EndHost              zypre_BoxLoop0End
#define nalu_hypre_BoxLoop1BeginHost            zypre_BoxLoop1Begin
#define nalu_hypre_BoxLoop1EndHost              zypre_BoxLoop1End
#define nalu_hypre_BoxLoop2BeginHost            zypre_BoxLoop2Begin
#define nalu_hypre_BoxLoop2EndHost              zypre_BoxLoop2End
#define nalu_hypre_BoxLoop3BeginHost            zypre_BoxLoop3Begin
#define nalu_hypre_BoxLoop3EndHost              zypre_BoxLoop3End
#define nalu_hypre_BoxLoop4BeginHost            zypre_BoxLoop4Begin
#define nalu_hypre_BoxLoop4EndHost              zypre_BoxLoop4End
#define nalu_hypre_BasicBoxLoop1BeginHost       zypre_BasicBoxLoop1Begin
#define nalu_hypre_BasicBoxLoop2BeginHost       zypre_BasicBoxLoop2Begin
#define nalu_hypre_LoopBeginHost                zypre_LoopBegin
#define nalu_hypre_LoopEndHost                  zypre_LoopEnd
#define nalu_hypre_BoxLoop1ReductionBeginHost   zypre_BoxLoop1ReductionBegin
#define nalu_hypre_BoxLoop1ReductionEndHost     zypre_BoxLoop1ReductionEnd
#define nalu_hypre_BoxLoop2ReductionBeginHost   zypre_BoxLoop2ReductionBegin
#define nalu_hypre_BoxLoop2ReductionEndHost     zypre_BoxLoop2ReductionEnd

//TODO TEMP FIX
#if !defined(NALU_HYPRE_USING_RAJA) && !defined(NALU_HYPRE_USING_KOKKOS) && !defined(NALU_HYPRE_USING_CUDA) && !defined(NALU_HYPRE_USING_HIP) && !defined(NALU_HYPRE_USING_DEVICE_OPENMP) && !defined(NALU_HYPRE_USING_SYCL)
#define nalu_hypre_BoxLoopGetIndex          nalu_hypre_BoxLoopGetIndexHost
#define nalu_hypre_BoxLoopBlock()           0
#define nalu_hypre_BoxLoop0Begin            nalu_hypre_BoxLoop0BeginHost
#define nalu_hypre_BoxLoop0End              nalu_hypre_BoxLoop0EndHost
#define nalu_hypre_BoxLoop1Begin            nalu_hypre_BoxLoop1BeginHost
#define nalu_hypre_BoxLoop1End              nalu_hypre_BoxLoop1EndHost
#define nalu_hypre_BoxLoop2Begin            nalu_hypre_BoxLoop2BeginHost
#define nalu_hypre_BoxLoop2End              nalu_hypre_BoxLoop2EndHost
#define nalu_hypre_BoxLoop3Begin            nalu_hypre_BoxLoop3BeginHost
#define nalu_hypre_BoxLoop3End              nalu_hypre_BoxLoop3EndHost
#define nalu_hypre_BoxLoop4Begin            nalu_hypre_BoxLoop4BeginHost
#define nalu_hypre_BoxLoop4End              nalu_hypre_BoxLoop4EndHost
#define nalu_hypre_BasicBoxLoop1Begin       nalu_hypre_BasicBoxLoop1BeginHost
#define nalu_hypre_BasicBoxLoop2Begin       nalu_hypre_BasicBoxLoop2BeginHost
#define nalu_hypre_LoopBegin                nalu_hypre_LoopBeginHost
#define nalu_hypre_LoopEnd                  nalu_hypre_LoopEndHost
#define nalu_hypre_BoxLoop1ReductionBegin   nalu_hypre_BoxLoop1ReductionBeginHost
#define nalu_hypre_BoxLoop1ReductionEnd     nalu_hypre_BoxLoop1ReductionEndHost
#define nalu_hypre_BoxLoop2ReductionBegin   nalu_hypre_BoxLoop2ReductionBeginHost
#define nalu_hypre_BoxLoop2ReductionEnd     nalu_hypre_BoxLoop2ReductionEndHost
#endif

#endif /* #ifndef NALU_HYPRE_BOXLOOP_HOST_HEADER */


#ifdef __cplusplus
}
#endif

#endif

