
/*** DO NOT EDIT THIS FILE DIRECTLY (use 'headers' to generate) ***/

#ifndef nalu_hypre_PARCSR_MV_HEADER
#define nalu_hypre_PARCSR_MV_HEADER

#include <NALU_HYPRE_config.h>
#include "NALU_HYPRE_parcsr_mv.h"
#include "_nalu_hypre_utilities.h"
#include "seq_mv.h"

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

#ifndef NALU_HYPRE_PAR_CSR_COMMUNICATION_HEADER
#define NALU_HYPRE_PAR_CSR_COMMUNICATION_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_ParCSRCommPkg:
 *   Structure containing information for doing communications
 *--------------------------------------------------------------------------*/

#ifdef NALU_HYPRE_USING_PERSISTENT_COMM
typedef enum CommPkgJobType
{
   NALU_HYPRE_COMM_PKG_JOB_COMPLEX = 0,
   NALU_HYPRE_COMM_PKG_JOB_COMPLEX_TRANSPOSE,
   NALU_HYPRE_COMM_PKG_JOB_INT,
   NALU_HYPRE_COMM_PKG_JOB_INT_TRANSPOSE,
   NALU_HYPRE_COMM_PKG_JOB_BIGINT,
   NALU_HYPRE_COMM_PKG_JOB_BIGINT_TRANSPOSE,
   NUM_OF_COMM_PKG_JOB_TYPE,
} CommPkgJobType;
#endif

/*--------------------------------------------------------------------------
 * nalu_hypre_ParCSRCommHandle, nalu_hypre_ParCSRPersistentCommHandle
 *--------------------------------------------------------------------------*/
struct _nalu_hypre_ParCSRCommPkg;

typedef struct
{
   struct _nalu_hypre_ParCSRCommPkg *comm_pkg;
   NALU_HYPRE_MemoryLocation  send_memory_location;
   NALU_HYPRE_MemoryLocation  recv_memory_location;
   NALU_HYPRE_Int             num_send_bytes;
   NALU_HYPRE_Int             num_recv_bytes;
   void                 *send_data;
   void                 *recv_data;
   void                 *send_data_buffer;
   void                 *recv_data_buffer;
   NALU_HYPRE_Int             num_requests;
   nalu_hypre_MPI_Request    *requests;
} nalu_hypre_ParCSRCommHandle;

typedef nalu_hypre_ParCSRCommHandle nalu_hypre_ParCSRPersistentCommHandle;

typedef struct _nalu_hypre_ParCSRCommPkg
{
   MPI_Comm                          comm;
   NALU_HYPRE_Int                         num_components;
   NALU_HYPRE_Int                         num_sends;
   NALU_HYPRE_Int                        *send_procs;
   NALU_HYPRE_Int                        *send_map_starts;
   NALU_HYPRE_Int                        *send_map_elmts;
   NALU_HYPRE_Int                        *device_send_map_elmts;
   NALU_HYPRE_Int                         num_recvs;
   NALU_HYPRE_Int                        *recv_procs;
   NALU_HYPRE_Int                        *recv_vec_starts;
   /* remote communication information */
   nalu_hypre_MPI_Datatype               *send_mpi_types;
   nalu_hypre_MPI_Datatype               *recv_mpi_types;
#ifdef NALU_HYPRE_USING_PERSISTENT_COMM
   nalu_hypre_ParCSRPersistentCommHandle *persistent_comm_handles[NUM_OF_COMM_PKG_JOB_TYPE];
#endif
#if defined(NALU_HYPRE_USING_GPU) || defined(NALU_HYPRE_USING_DEVICE_OPENMP)
   /* temporary memory for matvec. cudaMalloc is expensive. alloc once and reuse */
   NALU_HYPRE_Complex                    *tmp_data;
   NALU_HYPRE_Complex                    *buf_data;
   nalu_hypre_CSRMatrix                  *matrix_E; /* for matvecT */
#endif
} nalu_hypre_ParCSRCommPkg;

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_ParCSRCommPkg
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ParCSRCommPkgComm(comm_pkg)                (comm_pkg -> comm)
#define nalu_hypre_ParCSRCommPkgNumComponents(comm_pkg)       (comm_pkg -> num_components)
#define nalu_hypre_ParCSRCommPkgNumSends(comm_pkg)            (comm_pkg -> num_sends)
#define nalu_hypre_ParCSRCommPkgSendProcs(comm_pkg)           (comm_pkg -> send_procs)
#define nalu_hypre_ParCSRCommPkgSendProc(comm_pkg, i)         (comm_pkg -> send_procs[i])
#define nalu_hypre_ParCSRCommPkgSendMapStarts(comm_pkg)       (comm_pkg -> send_map_starts)
#define nalu_hypre_ParCSRCommPkgSendMapStart(comm_pkg,i)      (comm_pkg -> send_map_starts[i])
#define nalu_hypre_ParCSRCommPkgSendMapElmts(comm_pkg)        (comm_pkg -> send_map_elmts)
#define nalu_hypre_ParCSRCommPkgDeviceSendMapElmts(comm_pkg)  (comm_pkg -> device_send_map_elmts)
#define nalu_hypre_ParCSRCommPkgSendMapElmt(comm_pkg,i)       (comm_pkg -> send_map_elmts[i])
#define nalu_hypre_ParCSRCommPkgDeviceSendMapElmt(comm_pkg,i) (comm_pkg -> device_send_map_elmts[i])
#define nalu_hypre_ParCSRCommPkgNumRecvs(comm_pkg)            (comm_pkg -> num_recvs)
#define nalu_hypre_ParCSRCommPkgRecvProcs(comm_pkg)           (comm_pkg -> recv_procs)
#define nalu_hypre_ParCSRCommPkgRecvProc(comm_pkg, i)         (comm_pkg -> recv_procs[i])
#define nalu_hypre_ParCSRCommPkgRecvVecStarts(comm_pkg)       (comm_pkg -> recv_vec_starts)
#define nalu_hypre_ParCSRCommPkgRecvVecStart(comm_pkg,i)      (comm_pkg -> recv_vec_starts[i])
#define nalu_hypre_ParCSRCommPkgSendMPITypes(comm_pkg)        (comm_pkg -> send_mpi_types)
#define nalu_hypre_ParCSRCommPkgSendMPIType(comm_pkg,i)       (comm_pkg -> send_mpi_types[i])
#define nalu_hypre_ParCSRCommPkgRecvMPITypes(comm_pkg)        (comm_pkg -> recv_mpi_types)
#define nalu_hypre_ParCSRCommPkgRecvMPIType(comm_pkg,i)       (comm_pkg -> recv_mpi_types[i])

#if defined(NALU_HYPRE_USING_GPU) || defined(NALU_HYPRE_USING_DEVICE_OPENMP)
#define nalu_hypre_ParCSRCommPkgTmpData(comm_pkg)             ((comm_pkg) -> tmp_data)
#define nalu_hypre_ParCSRCommPkgBufData(comm_pkg)             ((comm_pkg) -> buf_data)
#define nalu_hypre_ParCSRCommPkgMatrixE(comm_pkg)             ((comm_pkg) -> matrix_E)
#endif

static inline void
nalu_hypre_ParCSRCommPkgCopySendMapElmtsToDevice(nalu_hypre_ParCSRCommPkg *comm_pkg)
{
#if defined(NALU_HYPRE_USING_GPU) || defined(NALU_HYPRE_USING_DEVICE_OPENMP)
   NALU_HYPRE_Int num_sends = nalu_hypre_ParCSRCommPkgNumSends(comm_pkg);

   if (nalu_hypre_ParCSRCommPkgDeviceSendMapElmts(comm_pkg) == NULL)
   {
      nalu_hypre_ParCSRCommPkgDeviceSendMapElmts(comm_pkg) =
         nalu_hypre_TAlloc(NALU_HYPRE_Int,
                      nalu_hypre_ParCSRCommPkgSendMapStart(comm_pkg, num_sends),
                      NALU_HYPRE_MEMORY_DEVICE);

      nalu_hypre_TMemcpy(nalu_hypre_ParCSRCommPkgDeviceSendMapElmts(comm_pkg),
                    nalu_hypre_ParCSRCommPkgSendMapElmts(comm_pkg),
                    NALU_HYPRE_Int,
                    nalu_hypre_ParCSRCommPkgSendMapStart(comm_pkg, num_sends),
                    NALU_HYPRE_MEMORY_DEVICE,
                    NALU_HYPRE_MEMORY_HOST);
   }
#endif
}

/*--------------------------------------------------------------------------
 * Accessor macros: nalu_hypre_ParCSRCommHandle
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ParCSRCommHandleCommPkg(comm_handle)                (comm_handle -> comm_pkg)
#define nalu_hypre_ParCSRCommHandleSendMemoryLocation(comm_handle)     (comm_handle -> send_memory_location)
#define nalu_hypre_ParCSRCommHandleRecvMemoryLocation(comm_handle)     (comm_handle -> recv_memory_location)
#define nalu_hypre_ParCSRCommHandleNumSendBytes(comm_handle)           (comm_handle -> num_send_bytes)
#define nalu_hypre_ParCSRCommHandleNumRecvBytes(comm_handle)           (comm_handle -> num_recv_bytes)
#define nalu_hypre_ParCSRCommHandleSendData(comm_handle)               (comm_handle -> send_data)
#define nalu_hypre_ParCSRCommHandleRecvData(comm_handle)               (comm_handle -> recv_data)
#define nalu_hypre_ParCSRCommHandleSendDataBuffer(comm_handle)         (comm_handle -> send_data_buffer)
#define nalu_hypre_ParCSRCommHandleRecvDataBuffer(comm_handle)         (comm_handle -> recv_data_buffer)
#define nalu_hypre_ParCSRCommHandleNumRequests(comm_handle)            (comm_handle -> num_requests)
#define nalu_hypre_ParCSRCommHandleRequests(comm_handle)               (comm_handle -> requests)
#define nalu_hypre_ParCSRCommHandleRequest(comm_handle, i)             (comm_handle -> requests[i])

#endif /* NALU_HYPRE_PAR_CSR_COMMUNICATION_HEADER */
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/
#ifndef nalu_hypre_PARCSR_ASSUMED_PART
#define nalu_hypre_PARCSR_ASSUMED_PART

typedef struct
{
   NALU_HYPRE_Int                   length;
   NALU_HYPRE_BigInt                row_start;
   NALU_HYPRE_BigInt                row_end;
   NALU_HYPRE_Int                   storage_length;
   NALU_HYPRE_Int                  *proc_list;
   NALU_HYPRE_BigInt               *row_start_list;
   NALU_HYPRE_BigInt               *row_end_list;
   NALU_HYPRE_Int                  *sort_index;
} nalu_hypre_IJAssumedPart;

#endif /* nalu_hypre_PARCSR_ASSUMED_PART */

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/
#ifndef nalu_hypre_NEW_COMMPKG
#define nalu_hypre_NEW_COMMPKG

typedef struct
{
   NALU_HYPRE_Int       length;
   NALU_HYPRE_Int       storage_length;
   NALU_HYPRE_Int      *id;
   NALU_HYPRE_Int      *vec_starts;
   NALU_HYPRE_Int       element_storage_length;
   NALU_HYPRE_BigInt   *elements;
   NALU_HYPRE_Real     *d_elements; /* Is this used anywhere? */
   void           *v_elements;
}  nalu_hypre_ProcListElements;

#endif /* nalu_hypre_NEW_COMMPKG */

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for Parallel Vector data structure
 *
 *****************************************************************************/

#ifndef nalu_hypre_PAR_VECTOR_HEADER
#define nalu_hypre_PAR_VECTOR_HEADER

/*--------------------------------------------------------------------------
 * nalu_hypre_ParVector
 *--------------------------------------------------------------------------*/

#ifndef NALU_HYPRE_PAR_VECTOR_STRUCT
#define NALU_HYPRE_PAR_VECTOR_STRUCT
#endif

typedef struct nalu_hypre_ParVector_struct
{
   MPI_Comm              comm;

   NALU_HYPRE_BigInt          global_size;
   NALU_HYPRE_BigInt          first_index;
   NALU_HYPRE_BigInt          last_index;
   NALU_HYPRE_BigInt          partitioning[2];
   /* stores actual length of data in local vector to allow memory
    * manipulations for temporary vectors*/
   NALU_HYPRE_Int             actual_local_size;
   nalu_hypre_Vector         *local_vector;

   /* Does the Vector create/destroy `data'? */
   NALU_HYPRE_Int             owns_data;
   /* If the vector is all zeros */
   NALU_HYPRE_Int             all_zeros;

   nalu_hypre_IJAssumedPart  *assumed_partition; /* only populated if this partition needed
                                              (for setting off-proc elements, for example)*/
} nalu_hypre_ParVector;

/*--------------------------------------------------------------------------
 * Accessor functions for the Vector structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ParVectorComm(vector)             ((vector) -> comm)
#define nalu_hypre_ParVectorGlobalSize(vector)       ((vector) -> global_size)
#define nalu_hypre_ParVectorFirstIndex(vector)       ((vector) -> first_index)
#define nalu_hypre_ParVectorLastIndex(vector)        ((vector) -> last_index)
#define nalu_hypre_ParVectorPartitioning(vector)     ((vector) -> partitioning)
#define nalu_hypre_ParVectorActualLocalSize(vector)  ((vector) -> actual_local_size)
#define nalu_hypre_ParVectorLocalVector(vector)      ((vector) -> local_vector)
#define nalu_hypre_ParVectorOwnsData(vector)         ((vector) -> owns_data)
#define nalu_hypre_ParVectorAllZeros(vector)         ((vector) -> all_zeros)
#define nalu_hypre_ParVectorNumVectors(vector)       (nalu_hypre_VectorNumVectors(nalu_hypre_ParVectorLocalVector(vector)))

#define nalu_hypre_ParVectorAssumedPartition(vector) ((vector) -> assumed_partition)

static inline NALU_HYPRE_MemoryLocation
nalu_hypre_ParVectorMemoryLocation(nalu_hypre_ParVector *vector)
{
   return nalu_hypre_VectorMemoryLocation(nalu_hypre_ParVectorLocalVector(vector));
}

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for Parallel CSR Matrix data structures
 *
 * Note: this matrix currently uses 0-based indexing.
 *
 *****************************************************************************/

#ifndef nalu_hypre_PAR_CSR_MATRIX_HEADER
#define nalu_hypre_PAR_CSR_MATRIX_HEADER

/*--------------------------------------------------------------------------
 * Parallel CSR Matrix
 *--------------------------------------------------------------------------*/

#ifndef NALU_HYPRE_PAR_CSR_MATRIX_STRUCT
#define NALU_HYPRE_PAR_CSR_MATRIX_STRUCT
#endif

typedef struct nalu_hypre_ParCSRMatrix_struct
{
   MPI_Comm              comm;

   NALU_HYPRE_BigInt          global_num_rows;
   NALU_HYPRE_BigInt          global_num_cols;
   NALU_HYPRE_BigInt          global_num_rownnz;
   NALU_HYPRE_BigInt          first_row_index;
   NALU_HYPRE_BigInt          first_col_diag;
   /* need to know entire local range in case row_starts and col_starts
      are null  (i.e., bgl) AHB 6/05*/
   NALU_HYPRE_BigInt          last_row_index;
   NALU_HYPRE_BigInt          last_col_diag;

   nalu_hypre_CSRMatrix      *diag;
   nalu_hypre_CSRMatrix      *offd;
   nalu_hypre_CSRMatrix      *diagT, *offdT;
   /* JSP: transposed matrices are created lazily and optional */
   NALU_HYPRE_BigInt         *col_map_offd;
   NALU_HYPRE_BigInt         *device_col_map_offd;
   /* maps columns of offd to global columns */
   NALU_HYPRE_BigInt          row_starts[2];
   /* row_starts[0] is start of local rows
      row_starts[1] is start of next processor's rows */
   NALU_HYPRE_BigInt          col_starts[2];
   /* col_starts[0] is start of local columns
      col_starts[1] is start of next processor's columns */

   nalu_hypre_ParCSRCommPkg  *comm_pkg;
   nalu_hypre_ParCSRCommPkg  *comm_pkgT;

   /* Does the ParCSRMatrix create/destroy `diag', `offd', `col_map_offd'? */
   NALU_HYPRE_Int             owns_data;

   NALU_HYPRE_BigInt          num_nonzeros;
   NALU_HYPRE_Real            d_num_nonzeros;

   /* Buffers used by GetRow to hold row currently being accessed. AJC, 4/99 */
   NALU_HYPRE_BigInt         *rowindices;
   NALU_HYPRE_Complex        *rowvalues;
   NALU_HYPRE_Int             getrowactive;

   nalu_hypre_IJAssumedPart  *assumed_partition;
   NALU_HYPRE_Int             owns_assumed_partition;
   /* Array to store ordering of local diagonal block to relax. In particular,
   used for triangulr matrices that are not ordered to be triangular. */
   NALU_HYPRE_Int            *proc_ordering;

   /* Save block diagonal inverse */
   NALU_HYPRE_Int             bdiag_size;
   NALU_HYPRE_Complex        *bdiaginv;
   nalu_hypre_ParCSRCommPkg  *bdiaginv_comm_pkg;

#if defined(NALU_HYPRE_USING_GPU)
   /* these two arrays are reserveed for SoC matrices on GPUs to help build interpolation */
   NALU_HYPRE_Int            *soc_diag_j;
   NALU_HYPRE_Int            *soc_offd_j;
#endif

} nalu_hypre_ParCSRMatrix;

/*--------------------------------------------------------------------------
 * Accessor functions for the Parallel CSR Matrix structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ParCSRMatrixComm(matrix)                   ((matrix) -> comm)
#define nalu_hypre_ParCSRMatrixGlobalNumRows(matrix)          ((matrix) -> global_num_rows)
#define nalu_hypre_ParCSRMatrixGlobalNumCols(matrix)          ((matrix) -> global_num_cols)
#define nalu_hypre_ParCSRMatrixGlobalNumRownnz(matrix)        ((matrix) -> global_num_rownnz)
#define nalu_hypre_ParCSRMatrixFirstRowIndex(matrix)          ((matrix) -> first_row_index)
#define nalu_hypre_ParCSRMatrixFirstColDiag(matrix)           ((matrix) -> first_col_diag)
#define nalu_hypre_ParCSRMatrixLastRowIndex(matrix)           ((matrix) -> last_row_index)
#define nalu_hypre_ParCSRMatrixLastColDiag(matrix)            ((matrix) -> last_col_diag)
#define nalu_hypre_ParCSRMatrixDiag(matrix)                   ((matrix) -> diag)
#define nalu_hypre_ParCSRMatrixOffd(matrix)                   ((matrix) -> offd)
#define nalu_hypre_ParCSRMatrixDiagT(matrix)                  ((matrix) -> diagT)
#define nalu_hypre_ParCSRMatrixOffdT(matrix)                  ((matrix) -> offdT)
#define nalu_hypre_ParCSRMatrixColMapOffd(matrix)             ((matrix) -> col_map_offd)
#define nalu_hypre_ParCSRMatrixDeviceColMapOffd(matrix)       ((matrix) -> device_col_map_offd)
#define nalu_hypre_ParCSRMatrixRowStarts(matrix)              ((matrix) -> row_starts)
#define nalu_hypre_ParCSRMatrixColStarts(matrix)              ((matrix) -> col_starts)
#define nalu_hypre_ParCSRMatrixCommPkg(matrix)                ((matrix) -> comm_pkg)
#define nalu_hypre_ParCSRMatrixCommPkgT(matrix)               ((matrix) -> comm_pkgT)
#define nalu_hypre_ParCSRMatrixOwnsData(matrix)               ((matrix) -> owns_data)
#define nalu_hypre_ParCSRMatrixNumNonzeros(matrix)            ((matrix) -> num_nonzeros)
#define nalu_hypre_ParCSRMatrixDNumNonzeros(matrix)           ((matrix) -> d_num_nonzeros)
#define nalu_hypre_ParCSRMatrixRowindices(matrix)             ((matrix) -> rowindices)
#define nalu_hypre_ParCSRMatrixRowvalues(matrix)              ((matrix) -> rowvalues)
#define nalu_hypre_ParCSRMatrixGetrowactive(matrix)           ((matrix) -> getrowactive)
#define nalu_hypre_ParCSRMatrixAssumedPartition(matrix)       ((matrix) -> assumed_partition)
#define nalu_hypre_ParCSRMatrixOwnsAssumedPartition(matrix)   ((matrix) -> owns_assumed_partition)
#define nalu_hypre_ParCSRMatrixProcOrdering(matrix)           ((matrix) -> proc_ordering)
#if defined(NALU_HYPRE_USING_GPU)
#define nalu_hypre_ParCSRMatrixSocDiagJ(matrix)               ((matrix) -> soc_diag_j)
#define nalu_hypre_ParCSRMatrixSocOffdJ(matrix)               ((matrix) -> soc_offd_j)
#endif

#define nalu_hypre_ParCSRMatrixNumRows(matrix) nalu_hypre_CSRMatrixNumRows(nalu_hypre_ParCSRMatrixDiag(matrix))
#define nalu_hypre_ParCSRMatrixNumCols(matrix) nalu_hypre_CSRMatrixNumCols(nalu_hypre_ParCSRMatrixDiag(matrix))

static inline NALU_HYPRE_MemoryLocation
nalu_hypre_ParCSRMatrixMemoryLocation(nalu_hypre_ParCSRMatrix *matrix)
{
   if (!matrix) { return NALU_HYPRE_MEMORY_UNDEFINED; }

   nalu_hypre_CSRMatrix *diag = nalu_hypre_ParCSRMatrixDiag(matrix);
   nalu_hypre_CSRMatrix *offd = nalu_hypre_ParCSRMatrixOffd(matrix);
   NALU_HYPRE_MemoryLocation memory_diag = diag ? nalu_hypre_CSRMatrixMemoryLocation(
                                         diag) : NALU_HYPRE_MEMORY_UNDEFINED;
   NALU_HYPRE_MemoryLocation memory_offd = offd ? nalu_hypre_CSRMatrixMemoryLocation(
                                         offd) : NALU_HYPRE_MEMORY_UNDEFINED;

   if (diag && offd)
   {
      if (memory_diag != memory_offd)
      {
         char err_msg[1024];
         nalu_hypre_sprintf(err_msg, "Error: ParCSRMatrix Memory Location Diag (%d) != Offd (%d)\n", memory_diag,
                       memory_offd);
         nalu_hypre_error_w_msg(NALU_HYPRE_ERROR_MEMORY, err_msg);
         nalu_hypre_assert(0);

         return NALU_HYPRE_MEMORY_UNDEFINED;
      }

      return memory_diag;
   }

   if (diag) { return memory_diag; }
   if (offd) { return memory_offd; }

   return NALU_HYPRE_MEMORY_UNDEFINED;
}

/*--------------------------------------------------------------------------
 * Parallel CSR Boolean Matrix
 *--------------------------------------------------------------------------*/

typedef struct
{
   MPI_Comm                comm;
   NALU_HYPRE_BigInt            global_num_rows;
   NALU_HYPRE_BigInt            global_num_cols;
   NALU_HYPRE_BigInt            first_row_index;
   NALU_HYPRE_BigInt            first_col_diag;
   NALU_HYPRE_BigInt            last_row_index;
   NALU_HYPRE_BigInt            last_col_diag;
   nalu_hypre_CSRBooleanMatrix *diag;
   nalu_hypre_CSRBooleanMatrix *offd;
   NALU_HYPRE_BigInt           *col_map_offd;
   NALU_HYPRE_BigInt           *row_starts;
   NALU_HYPRE_BigInt           *col_starts;
   nalu_hypre_ParCSRCommPkg    *comm_pkg;
   nalu_hypre_ParCSRCommPkg    *comm_pkgT;
   NALU_HYPRE_Int               owns_data;
   NALU_HYPRE_Int               owns_row_starts;
   NALU_HYPRE_Int               owns_col_starts;
   NALU_HYPRE_BigInt            num_nonzeros;
   NALU_HYPRE_BigInt           *rowindices;
   NALU_HYPRE_Int               getrowactive;

} nalu_hypre_ParCSRBooleanMatrix;

/*--------------------------------------------------------------------------
 * Accessor functions for the Parallel CSR Boolean Matrix structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ParCSRBooleanMatrix_Get_Comm(matrix)          ((matrix)->comm)
#define nalu_hypre_ParCSRBooleanMatrix_Get_GlobalNRows(matrix)   ((matrix)->global_num_rows)
#define nalu_hypre_ParCSRBooleanMatrix_Get_GlobalNCols(matrix)   ((matrix)->global_num_cols)
#define nalu_hypre_ParCSRBooleanMatrix_Get_StartRow(matrix)      ((matrix)->first_row_index)
#define nalu_hypre_ParCSRBooleanMatrix_Get_FirstRowIndex(matrix) ((matrix)->first_row_index)
#define nalu_hypre_ParCSRBooleanMatrix_Get_FirstColDiag(matrix)  ((matrix)->first_col_diag)
#define nalu_hypre_ParCSRBooleanMatrix_Get_LastRowIndex(matrix)  ((matrix)->last_row_index)
#define nalu_hypre_ParCSRBooleanMatrix_Get_LastColDiag(matrix)   ((matrix)->last_col_diag)
#define nalu_hypre_ParCSRBooleanMatrix_Get_Diag(matrix)          ((matrix)->diag)
#define nalu_hypre_ParCSRBooleanMatrix_Get_Offd(matrix)          ((matrix)->offd)
#define nalu_hypre_ParCSRBooleanMatrix_Get_ColMapOffd(matrix)    ((matrix)->col_map_offd)
#define nalu_hypre_ParCSRBooleanMatrix_Get_RowStarts(matrix)     ((matrix)->row_starts)
#define nalu_hypre_ParCSRBooleanMatrix_Get_ColStarts(matrix)     ((matrix)->col_starts)
#define nalu_hypre_ParCSRBooleanMatrix_Get_CommPkg(matrix)       ((matrix)->comm_pkg)
#define nalu_hypre_ParCSRBooleanMatrix_Get_CommPkgT(matrix)      ((matrix)->comm_pkgT)
#define nalu_hypre_ParCSRBooleanMatrix_Get_OwnsData(matrix)      ((matrix)->owns_data)
#define nalu_hypre_ParCSRBooleanMatrix_Get_OwnsRowStarts(matrix) ((matrix)->owns_row_starts)
#define nalu_hypre_ParCSRBooleanMatrix_Get_OwnsColStarts(matrix) ((matrix)->owns_col_starts)
#define nalu_hypre_ParCSRBooleanMatrix_Get_NRows(matrix)         ((matrix->diag->num_rows))
#define nalu_hypre_ParCSRBooleanMatrix_Get_NCols(matrix)         ((matrix->diag->num_cols))
#define nalu_hypre_ParCSRBooleanMatrix_Get_NNZ(matrix)           ((matrix)->num_nonzeros)
#define nalu_hypre_ParCSRBooleanMatrix_Get_Rowindices(matrix)    ((matrix)->rowindices)
#define nalu_hypre_ParCSRBooleanMatrix_Get_Getrowactive(matrix)  ((matrix)->getrowactive)

#endif
/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Tree structure for keeping track of numbers (e.g. column numbers) -
 * when you get them one at a time, in no particular order, possibly very
 * sparse.  In a scalable manner you want to be able to store them and find
 * out whether a number has been stored.
 * All decimal numbers will fit in a tree with 10 branches (digits)
 * off each node.  We also have a terminal "digit" to indicate that the entire
 * number has been seen.  E.g., 1234 would be entered in a tree as:
 * (numbering the digits off a node as 0 1 2 3 4 5 6 7 8 9 TERM )
 *                          root
 *                           |
 *                   - - - - 4 - - - - - -
 *                           |
 *                     - - - 3 - - - - - - -
 *                           |
 *                       - - 2 - - - - - - - -
 *                           |
 *                         - 1 - - - - - - - - -
 *                           |
 *       - - - - - - - - - - T
 *
 *
 * This tree represents a number through its decimal expansion, but if needed
 * base depends on how the numbers encountered are distributed.  Totally
 * The more clustered, the larger the base should be in my judgement.
 *
 *****************************************************************************/

#ifndef nalu_hypre_NUMBERS_HEADER
#define nalu_hypre_NUMBERS_HEADER

typedef struct nalu_hypre_NumbersNode
{
   struct nalu_hypre_NumbersNode * digit[11];
} nalu_hypre_NumbersNode;

#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/******************************************************************************
 *
 * Header info for Parallel Chord Matrix data structures
 *
 *****************************************************************************/

#ifndef nalu_hypre_PAR_CHORD_MATRIX_HEADER
#define nalu_hypre_PAR_CHORD_MATRIX_HEADER

/*--------------------------------------------------------------------------
 * Parallel Chord Matrix
 *--------------------------------------------------------------------------*/

typedef struct
{
   MPI_Comm comm;

   /*  A structure: -------------------------------------------------------- */
   NALU_HYPRE_Int num_inprocessors;
   NALU_HYPRE_Int *inprocessor;

   /* receiving in idof from different (in)processors; ---------------------- */
   NALU_HYPRE_Int *num_idofs_inprocessor;
   NALU_HYPRE_Int **idof_inprocessor;

   /* symmetric information: ----------------------------------------------- */
   /* this can be replaces by CSR format: ---------------------------------- */
   NALU_HYPRE_Int     *num_inchords;
   NALU_HYPRE_Int     **inchord_idof;
   NALU_HYPRE_Int     **inchord_rdof;
   NALU_HYPRE_Complex **inchord_data;

   NALU_HYPRE_Int num_idofs;
   NALU_HYPRE_Int num_rdofs;

   NALU_HYPRE_Int *firstindex_idof; /* not owned by my_id; ---------------------- */
   NALU_HYPRE_Int *firstindex_rdof; /* not owned by my_id; ---------------------- */

   /* --------------------------- mirror information: ---------------------- */
   /* participation of rdof in different processors; ----------------------- */

   NALU_HYPRE_Int num_toprocessors;
   NALU_HYPRE_Int *toprocessor;

   /* rdofs to be sentto toprocessors; -------------------------------------
      ---------------------------------------------------------------------- */
   NALU_HYPRE_Int *num_rdofs_toprocessor;
   NALU_HYPRE_Int **rdof_toprocessor;

} nalu_hypre_ParChordMatrix;

/*--------------------------------------------------------------------------
 * Accessor functions for the Parallel CSR Matrix structure
 *--------------------------------------------------------------------------*/

#define nalu_hypre_ParChordMatrixComm(matrix)                  ((matrix) -> comm)

/*  matrix structure: ----------------------------------------------------- */

#define nalu_hypre_ParChordMatrixNumInprocessors(matrix)  ((matrix) -> num_inprocessors)
#define nalu_hypre_ParChordMatrixInprocessor(matrix) ((matrix) -> inprocessor)
#define nalu_hypre_ParChordMatrixNumIdofsInprocessor(matrix) ((matrix) -> num_idofs_inprocessor)
#define nalu_hypre_ParChordMatrixIdofInprocessor(matrix) ((matrix) -> idof_inprocessor)

#define nalu_hypre_ParChordMatrixNumInchords(matrix) ((matrix) -> num_inchords)

#define nalu_hypre_ParChordMatrixInchordIdof(matrix) ((matrix) -> inchord_idof)
#define nalu_hypre_ParChordMatrixInchordRdof(matrix) ((matrix) -> inchord_rdof)
#define nalu_hypre_ParChordMatrixInchordData(matrix) ((matrix) -> inchord_data)
#define nalu_hypre_ParChordMatrixNumIdofs(matrix)    ((matrix) -> num_idofs)
#define nalu_hypre_ParChordMatrixNumRdofs(matrix)    ((matrix) -> num_rdofs)

#define nalu_hypre_ParChordMatrixFirstindexIdof(matrix) ((matrix) -> firstindex_idof)
#define nalu_hypre_ParChordMatrixFirstindexRdof(matrix) ((matrix) -> firstindex_rdof)

/* participation of rdof in different processors; ---------- */

#define nalu_hypre_ParChordMatrixNumToprocessors(matrix) ((matrix) -> num_toprocessors)
#define nalu_hypre_ParChordMatrixToprocessor(matrix)  ((matrix) -> toprocessor)
#define nalu_hypre_ParChordMatrixNumRdofsToprocessor(matrix) ((matrix) -> num_rdofs_toprocessor)
#define nalu_hypre_ParChordMatrixRdofToprocessor(matrix) ((matrix) -> rdof_toprocessor)

#endif

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

#ifndef nalu_hypre_PAR_MAKE_SYSTEM
#define nalu_hypre_PAR_MAKE_SYSTEM

typedef struct
{
   nalu_hypre_ParCSRMatrix *A;
   nalu_hypre_ParVector    *x;
   nalu_hypre_ParVector    *b;
} NALU_HYPRE_ParCSR_System_Problem;

#endif /* nalu_hypre_PAR_MAKE_SYSTEM */

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/

/* communicationT.c */
void nalu_hypre_RowsWithColumn_original ( NALU_HYPRE_Int *rowmin, NALU_HYPRE_Int *rowmax, NALU_HYPRE_BigInt column,
                                     nalu_hypre_ParCSRMatrix *A );
void nalu_hypre_RowsWithColumn ( NALU_HYPRE_Int *rowmin, NALU_HYPRE_Int *rowmax, NALU_HYPRE_BigInt column,
                            NALU_HYPRE_Int num_rows_diag, NALU_HYPRE_BigInt firstColDiag, NALU_HYPRE_BigInt *colMapOffd, NALU_HYPRE_Int *mat_i_diag,
                            NALU_HYPRE_Int *mat_j_diag, NALU_HYPRE_Int *mat_i_offd, NALU_HYPRE_Int *mat_j_offd );
void nalu_hypre_MatTCommPkgCreate_core ( MPI_Comm comm, NALU_HYPRE_BigInt *col_map_offd,
                                    NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt *col_starts, NALU_HYPRE_Int num_rows_diag,
                                    NALU_HYPRE_Int num_cols_diag, NALU_HYPRE_Int num_cols_offd, NALU_HYPRE_BigInt *row_starts,
                                    NALU_HYPRE_BigInt firstColDiag, NALU_HYPRE_BigInt *colMapOffd, NALU_HYPRE_Int *mat_i_diag, NALU_HYPRE_Int *mat_j_diag,
                                    NALU_HYPRE_Int *mat_i_offd, NALU_HYPRE_Int *mat_j_offd, NALU_HYPRE_Int data, NALU_HYPRE_Int *p_num_recvs,
                                    NALU_HYPRE_Int **p_recv_procs, NALU_HYPRE_Int **p_recv_vec_starts, NALU_HYPRE_Int *p_num_sends,
                                    NALU_HYPRE_Int **p_send_procs, NALU_HYPRE_Int **p_send_map_starts, NALU_HYPRE_Int **p_send_map_elmts );
NALU_HYPRE_Int nalu_hypre_MatTCommPkgCreate ( nalu_hypre_ParCSRMatrix *A );

/* driver_aat.c */

/* driver_boolaat.c */

/* driver_boolmatmul.c */

/* driver.c */

/* driver_matmul.c */

/* driver_mat_multivec.c */

/* driver_matvec.c */

/* driver_multivec.c */

/* NALU_HYPRE_parcsr_matrix.c */
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_num_rows,
                                     NALU_HYPRE_BigInt global_num_cols, NALU_HYPRE_BigInt *row_starts, NALU_HYPRE_BigInt *col_starts,
                                     NALU_HYPRE_Int num_cols_offd, NALU_HYPRE_Int num_nonzeros_diag, NALU_HYPRE_Int num_nonzeros_offd,
                                     NALU_HYPRE_ParCSRMatrix *matrix );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixDestroy ( NALU_HYPRE_ParCSRMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixInitialize ( NALU_HYPRE_ParCSRMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixBigInitialize ( NALU_HYPRE_ParCSRMatrix matrix );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixRead ( MPI_Comm comm, const char *file_name,
                                   NALU_HYPRE_ParCSRMatrix *matrix );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixPrint ( NALU_HYPRE_ParCSRMatrix matrix, const char *file_name );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetComm ( NALU_HYPRE_ParCSRMatrix matrix, MPI_Comm *comm );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetDims ( NALU_HYPRE_ParCSRMatrix matrix, NALU_HYPRE_BigInt *M, NALU_HYPRE_BigInt *N );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetRowPartitioning ( NALU_HYPRE_ParCSRMatrix matrix,
                                                 NALU_HYPRE_BigInt **row_partitioning_ptr );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetGlobalRowPartitioning ( NALU_HYPRE_ParCSRMatrix matrix,
                                                       NALU_HYPRE_Int all_procs, NALU_HYPRE_BigInt **row_partitioning_ptr );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetColPartitioning ( NALU_HYPRE_ParCSRMatrix matrix,
                                                 NALU_HYPRE_BigInt **col_partitioning_ptr );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetLocalRange ( NALU_HYPRE_ParCSRMatrix matrix, NALU_HYPRE_BigInt *row_start,
                                            NALU_HYPRE_BigInt *row_end, NALU_HYPRE_BigInt *col_start, NALU_HYPRE_BigInt *col_end );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixGetRow ( NALU_HYPRE_ParCSRMatrix matrix, NALU_HYPRE_BigInt row, NALU_HYPRE_Int *size,
                                     NALU_HYPRE_BigInt **col_ind, NALU_HYPRE_Complex **values );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixRestoreRow ( NALU_HYPRE_ParCSRMatrix matrix, NALU_HYPRE_BigInt row,
                                         NALU_HYPRE_Int *size, NALU_HYPRE_BigInt **col_ind, NALU_HYPRE_Complex **values );
NALU_HYPRE_Int NALU_HYPRE_CSRMatrixToParCSRMatrix ( MPI_Comm comm, NALU_HYPRE_CSRMatrix A_CSR,
                                          NALU_HYPRE_BigInt *row_partitioning, NALU_HYPRE_BigInt *col_partitioning, NALU_HYPRE_ParCSRMatrix *matrix );
NALU_HYPRE_Int NALU_HYPRE_CSRMatrixToParCSRMatrix_WithNewPartitioning ( MPI_Comm comm, NALU_HYPRE_CSRMatrix A_CSR,
                                                              NALU_HYPRE_ParCSRMatrix *matrix );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixMatvec ( NALU_HYPRE_Complex alpha, NALU_HYPRE_ParCSRMatrix A, NALU_HYPRE_ParVector x,
                                     NALU_HYPRE_Complex beta, NALU_HYPRE_ParVector y );
NALU_HYPRE_Int NALU_HYPRE_ParCSRMatrixMatvecT ( NALU_HYPRE_Complex alpha, NALU_HYPRE_ParCSRMatrix A, NALU_HYPRE_ParVector x,
                                      NALU_HYPRE_Complex beta, NALU_HYPRE_ParVector y );

/* NALU_HYPRE_parcsr_vector.c */
NALU_HYPRE_Int NALU_HYPRE_ParVectorCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_size,
                                  NALU_HYPRE_BigInt *partitioning, NALU_HYPRE_ParVector *vector );
NALU_HYPRE_Int NALU_HYPRE_ParMultiVectorCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_size,
                                       NALU_HYPRE_BigInt *partitioning, NALU_HYPRE_Int number_vectors, NALU_HYPRE_ParVector *vector );
NALU_HYPRE_Int NALU_HYPRE_ParVectorDestroy ( NALU_HYPRE_ParVector vector );
NALU_HYPRE_Int NALU_HYPRE_ParVectorInitialize ( NALU_HYPRE_ParVector vector );
NALU_HYPRE_Int NALU_HYPRE_ParVectorRead ( MPI_Comm comm, const char *file_name, NALU_HYPRE_ParVector *vector );
NALU_HYPRE_Int NALU_HYPRE_ParVectorPrint ( NALU_HYPRE_ParVector vector, const char *file_name );
NALU_HYPRE_Int NALU_HYPRE_ParVectorSetConstantValues ( NALU_HYPRE_ParVector vector, NALU_HYPRE_Complex value );
NALU_HYPRE_Int NALU_HYPRE_ParVectorSetRandomValues ( NALU_HYPRE_ParVector vector, NALU_HYPRE_Int seed );
NALU_HYPRE_Int NALU_HYPRE_ParVectorCopy ( NALU_HYPRE_ParVector x, NALU_HYPRE_ParVector y );
NALU_HYPRE_ParVector NALU_HYPRE_ParVectorCloneShallow ( NALU_HYPRE_ParVector x );
NALU_HYPRE_Int NALU_HYPRE_ParVectorScale ( NALU_HYPRE_Complex value, NALU_HYPRE_ParVector x );
NALU_HYPRE_Int NALU_HYPRE_ParVectorAxpy ( NALU_HYPRE_Complex alpha, NALU_HYPRE_ParVector x, NALU_HYPRE_ParVector y );
NALU_HYPRE_Int NALU_HYPRE_ParVectorInnerProd ( NALU_HYPRE_ParVector x, NALU_HYPRE_ParVector y, NALU_HYPRE_Real *prod );
NALU_HYPRE_Int NALU_HYPRE_VectorToParVector ( MPI_Comm comm, NALU_HYPRE_Vector b, NALU_HYPRE_BigInt *partitioning,
                                    NALU_HYPRE_ParVector *vector );
NALU_HYPRE_Int NALU_HYPRE_ParVectorGetValues ( NALU_HYPRE_ParVector vector, NALU_HYPRE_Int num_values,
                                     NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *values);

/* gen_fffc.c */
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFFCHost( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                              NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S,
                                              nalu_hypre_ParCSRMatrix **A_FC_ptr,
                                              nalu_hypre_ParCSRMatrix **A_FF_ptr ) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFFC( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                          NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S,
                                          nalu_hypre_ParCSRMatrix **A_FC_ptr,
                                          nalu_hypre_ParCSRMatrix **A_FF_ptr ) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFFC3(nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                          NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S, nalu_hypre_ParCSRMatrix **A_FC_ptr,
                                          nalu_hypre_ParCSRMatrix **A_FF_ptr ) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFFCD3(nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                           NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S, nalu_hypre_ParCSRMatrix **A_FC_ptr,
                                           nalu_hypre_ParCSRMatrix **A_FF_ptr, NALU_HYPRE_Real **D_lambda_ptr ) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFFC3Device(nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                                NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S, nalu_hypre_ParCSRMatrix **A_FC_ptr,
                                                nalu_hypre_ParCSRMatrix **A_FF_ptr ) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateCFDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                              NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S, nalu_hypre_ParCSRMatrix **ACF_ptr) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateCCDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                              NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S, nalu_hypre_ParCSRMatrix **ACC_ptr) ;
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerate1DCFDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                                NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S, nalu_hypre_ParCSRMatrix **ACX_ptr,
                                                nalu_hypre_ParCSRMatrix **AXC_ptr ) ;

/* new_commpkg.c */
NALU_HYPRE_Int nalu_hypre_PrintCommpkg ( nalu_hypre_ParCSRMatrix *A, const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParCSRCommPkgCreateApart_core ( MPI_Comm comm, NALU_HYPRE_BigInt *col_map_off_d,
                                                NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_Int num_cols_off_d, NALU_HYPRE_BigInt global_num_cols,
                                                NALU_HYPRE_Int *p_num_recvs, NALU_HYPRE_Int **p_recv_procs, NALU_HYPRE_Int **p_recv_vec_starts,
                                                NALU_HYPRE_Int *p_num_sends, NALU_HYPRE_Int **p_send_procs, NALU_HYPRE_Int **p_send_map_starts,
                                                NALU_HYPRE_Int **p_send_map_elements, nalu_hypre_IJAssumedPart *apart );
NALU_HYPRE_Int nalu_hypre_ParCSRCommPkgCreateApart ( MPI_Comm  comm, NALU_HYPRE_BigInt *col_map_off_d,
                                           NALU_HYPRE_BigInt  first_col_diag, NALU_HYPRE_Int  num_cols_off_d, NALU_HYPRE_BigInt  global_num_cols,
                                           nalu_hypre_IJAssumedPart *apart, nalu_hypre_ParCSRCommPkg *comm_pkg );
NALU_HYPRE_Int nalu_hypre_NewCommPkgDestroy ( nalu_hypre_ParCSRMatrix *parcsr_A );
NALU_HYPRE_Int nalu_hypre_RangeFillResponseIJDetermineRecvProcs ( void *p_recv_contact_buf,
                                                        NALU_HYPRE_Int contact_size, NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                                        NALU_HYPRE_Int *response_message_size );
NALU_HYPRE_Int nalu_hypre_FillResponseIJDetermineSendProcs ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                                   NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                                   NALU_HYPRE_Int *response_message_size );

/* numbers.c */
nalu_hypre_NumbersNode *nalu_hypre_NumbersNewNode ( void );
void nalu_hypre_NumbersDeleteNode ( nalu_hypre_NumbersNode *node );
NALU_HYPRE_Int nalu_hypre_NumbersEnter ( nalu_hypre_NumbersNode *node, const NALU_HYPRE_Int n );
NALU_HYPRE_Int nalu_hypre_NumbersNEntered ( nalu_hypre_NumbersNode *node );
NALU_HYPRE_Int nalu_hypre_NumbersQuery ( nalu_hypre_NumbersNode *node, const NALU_HYPRE_Int n );
NALU_HYPRE_Int *nalu_hypre_NumbersArray ( nalu_hypre_NumbersNode *node );

/* parchord_to_parcsr.c */
void nalu_hypre_ParChordMatrix_RowStarts ( nalu_hypre_ParChordMatrix *Ac, MPI_Comm comm,
                                      NALU_HYPRE_BigInt **row_starts, NALU_HYPRE_BigInt *global_num_cols );
NALU_HYPRE_Int nalu_hypre_ParChordMatrixToParCSRMatrix ( nalu_hypre_ParChordMatrix *Ac, MPI_Comm comm,
                                               nalu_hypre_ParCSRMatrix **pAp );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixToParChordMatrix ( nalu_hypre_ParCSRMatrix *Ap, MPI_Comm comm,
                                               nalu_hypre_ParChordMatrix **pAc );

/* par_csr_aat.c */
void nalu_hypre_ParAat_RowSizes ( NALU_HYPRE_Int **C_diag_i, NALU_HYPRE_Int **C_offd_i, NALU_HYPRE_Int *B_marker,
                             NALU_HYPRE_Int *A_diag_i, NALU_HYPRE_Int *A_diag_j, NALU_HYPRE_Int *A_offd_i, NALU_HYPRE_Int *A_offd_j,
                             NALU_HYPRE_BigInt *A_col_map_offd, NALU_HYPRE_Int *A_ext_i, NALU_HYPRE_BigInt *A_ext_j,
                             NALU_HYPRE_BigInt *A_ext_row_map, NALU_HYPRE_Int *C_diag_size, NALU_HYPRE_Int *C_offd_size,
                             NALU_HYPRE_Int num_rows_diag_A, NALU_HYPRE_Int num_cols_offd_A, NALU_HYPRE_Int num_rows_A_ext,
                             NALU_HYPRE_BigInt first_col_diag_A, NALU_HYPRE_BigInt first_row_index_A );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRAAt ( nalu_hypre_ParCSRMatrix *A );
nalu_hypre_CSRMatrix *nalu_hypre_ParCSRMatrixExtractAExt ( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int data,
                                                 NALU_HYPRE_BigInt **pA_ext_row_map );

/* par_csr_assumed_part.c */
NALU_HYPRE_Int nalu_hypre_LocateAssumedPartition ( MPI_Comm comm, NALU_HYPRE_BigInt row_start,
                                         NALU_HYPRE_BigInt row_end, NALU_HYPRE_BigInt global_first_row, NALU_HYPRE_BigInt global_num_rows,
                                         nalu_hypre_IJAssumedPart *part, NALU_HYPRE_Int myid );
nalu_hypre_IJAssumedPart *nalu_hypre_AssumedPartitionCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_num,
                                                    NALU_HYPRE_BigInt start, NALU_HYPRE_BigInt end );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixCreateAssumedPartition ( nalu_hypre_ParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_AssumedPartitionDestroy ( nalu_hypre_IJAssumedPart *apart );
NALU_HYPRE_Int nalu_hypre_GetAssumedPartitionProcFromRow ( MPI_Comm comm, NALU_HYPRE_BigInt row,
                                                 NALU_HYPRE_BigInt global_first_row, NALU_HYPRE_BigInt global_num_rows, NALU_HYPRE_Int *proc_id );
NALU_HYPRE_Int nalu_hypre_GetAssumedPartitionRowRange ( MPI_Comm comm, NALU_HYPRE_Int proc_id,
                                              NALU_HYPRE_BigInt global_first_row, NALU_HYPRE_BigInt global_num_rows, NALU_HYPRE_BigInt *row_start,
                                              NALU_HYPRE_BigInt *row_end );
NALU_HYPRE_Int nalu_hypre_ParVectorCreateAssumedPartition ( nalu_hypre_ParVector *vector );

/* par_csr_bool_matop.c */
nalu_hypre_ParCSRBooleanMatrix *nalu_hypre_ParBooleanMatmul ( nalu_hypre_ParCSRBooleanMatrix *A,
                                                    nalu_hypre_ParCSRBooleanMatrix *B );
nalu_hypre_CSRBooleanMatrix *nalu_hypre_ParCSRBooleanMatrixExtractBExt ( nalu_hypre_ParCSRBooleanMatrix *B,
                                                               nalu_hypre_ParCSRBooleanMatrix *A );
nalu_hypre_CSRBooleanMatrix *nalu_hypre_ParCSRBooleanMatrixExtractAExt ( nalu_hypre_ParCSRBooleanMatrix *A,
                                                               NALU_HYPRE_BigInt **pA_ext_row_map );
nalu_hypre_ParCSRBooleanMatrix *nalu_hypre_ParBooleanAAt ( nalu_hypre_ParCSRBooleanMatrix *A );
NALU_HYPRE_Int nalu_hypre_BooleanMatTCommPkgCreate ( nalu_hypre_ParCSRBooleanMatrix *A );
NALU_HYPRE_Int nalu_hypre_BooleanMatvecCommPkgCreate ( nalu_hypre_ParCSRBooleanMatrix *A );

/* par_csr_bool_matrix.c */
nalu_hypre_CSRBooleanMatrix *nalu_hypre_CSRBooleanMatrixCreate ( NALU_HYPRE_Int num_rows, NALU_HYPRE_Int num_cols,
                                                       NALU_HYPRE_Int num_nonzeros );
NALU_HYPRE_Int nalu_hypre_CSRBooleanMatrixDestroy ( nalu_hypre_CSRBooleanMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_CSRBooleanMatrixInitialize ( nalu_hypre_CSRBooleanMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_CSRBooleanMatrixBigInitialize ( nalu_hypre_CSRBooleanMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_CSRBooleanMatrixSetDataOwner ( nalu_hypre_CSRBooleanMatrix *matrix,
                                               NALU_HYPRE_Int owns_data );
NALU_HYPRE_Int nalu_hypre_CSRBooleanMatrixSetBigDataOwner ( nalu_hypre_CSRBooleanMatrix *matrix,
                                                  NALU_HYPRE_Int owns_data );
nalu_hypre_CSRBooleanMatrix *nalu_hypre_CSRBooleanMatrixRead ( const char *file_name );
NALU_HYPRE_Int nalu_hypre_CSRBooleanMatrixPrint ( nalu_hypre_CSRBooleanMatrix *matrix, const char *file_name );
nalu_hypre_ParCSRBooleanMatrix *nalu_hypre_ParCSRBooleanMatrixCreate ( MPI_Comm comm,
                                                             NALU_HYPRE_BigInt global_num_rows, NALU_HYPRE_BigInt global_num_cols, NALU_HYPRE_BigInt *row_starts,
                                                             NALU_HYPRE_BigInt *col_starts, NALU_HYPRE_Int num_cols_offd, NALU_HYPRE_Int num_nonzeros_diag,
                                                             NALU_HYPRE_Int num_nonzeros_offd );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixDestroy ( nalu_hypre_ParCSRBooleanMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixInitialize ( nalu_hypre_ParCSRBooleanMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixSetNNZ ( nalu_hypre_ParCSRBooleanMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixSetDataOwner ( nalu_hypre_ParCSRBooleanMatrix *matrix,
                                                  NALU_HYPRE_Int owns_data );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixSetRowStartsOwner ( nalu_hypre_ParCSRBooleanMatrix *matrix,
                                                       NALU_HYPRE_Int owns_row_starts );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixSetColStartsOwner ( nalu_hypre_ParCSRBooleanMatrix *matrix,
                                                       NALU_HYPRE_Int owns_col_starts );
nalu_hypre_ParCSRBooleanMatrix *nalu_hypre_ParCSRBooleanMatrixRead ( MPI_Comm comm, const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixPrint ( nalu_hypre_ParCSRBooleanMatrix *matrix,
                                           const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixPrintIJ ( nalu_hypre_ParCSRBooleanMatrix *matrix,
                                             const char *filename );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixGetLocalRange ( nalu_hypre_ParCSRBooleanMatrix *matrix,
                                                   NALU_HYPRE_BigInt *row_start, NALU_HYPRE_BigInt *row_end, NALU_HYPRE_BigInt *col_start, NALU_HYPRE_BigInt *col_end );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixGetRow ( nalu_hypre_ParCSRBooleanMatrix *mat, NALU_HYPRE_BigInt row,
                                            NALU_HYPRE_Int *size, NALU_HYPRE_BigInt **col_ind );
NALU_HYPRE_Int nalu_hypre_ParCSRBooleanMatrixRestoreRow ( nalu_hypre_ParCSRBooleanMatrix *matrix, NALU_HYPRE_BigInt row,
                                                NALU_HYPRE_Int *size, NALU_HYPRE_BigInt **col_ind );
NALU_HYPRE_Int nalu_hypre_BuildCSRBooleanMatrixMPIDataType ( NALU_HYPRE_Int num_nonzeros, NALU_HYPRE_Int num_rows,
                                                   NALU_HYPRE_Int *a_i, NALU_HYPRE_Int *a_j, nalu_hypre_MPI_Datatype *csr_matrix_datatype );
nalu_hypre_ParCSRBooleanMatrix *nalu_hypre_CSRBooleanMatrixToParCSRBooleanMatrix ( MPI_Comm comm,
                                                                         nalu_hypre_CSRBooleanMatrix *A, NALU_HYPRE_BigInt *row_starts, NALU_HYPRE_BigInt *col_starts );
NALU_HYPRE_Int nalu_hypre_BooleanGenerateDiagAndOffd ( nalu_hypre_CSRBooleanMatrix *A,
                                             nalu_hypre_ParCSRBooleanMatrix *matrix, NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt last_col_diag );

/* par_csr_communication.c */
nalu_hypre_ParCSRCommHandle *nalu_hypre_ParCSRCommHandleCreate ( NALU_HYPRE_Int job, nalu_hypre_ParCSRCommPkg *comm_pkg,
                                                       void *send_data, void *recv_data );
nalu_hypre_ParCSRCommHandle *nalu_hypre_ParCSRCommHandleCreate_v2 ( NALU_HYPRE_Int job,
                                                          nalu_hypre_ParCSRCommPkg *comm_pkg,
                                                          NALU_HYPRE_MemoryLocation send_memory_location,
                                                          void *send_data_in,
                                                          NALU_HYPRE_MemoryLocation recv_memory_location,
                                                          void *recv_data_in );
NALU_HYPRE_Int nalu_hypre_ParCSRCommHandleDestroy ( nalu_hypre_ParCSRCommHandle *comm_handle );
void nalu_hypre_ParCSRCommPkgCreate_core ( MPI_Comm comm, NALU_HYPRE_BigInt *col_map_offd,
                                      NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt *col_starts, NALU_HYPRE_Int num_cols_diag,
                                      NALU_HYPRE_Int num_cols_offd, NALU_HYPRE_Int *p_num_recvs, NALU_HYPRE_Int **p_recv_procs,
                                      NALU_HYPRE_Int **p_recv_vec_starts, NALU_HYPRE_Int *p_num_sends, NALU_HYPRE_Int **p_send_procs,
                                      NALU_HYPRE_Int **p_send_map_starts, NALU_HYPRE_Int **p_send_map_elmts );
NALU_HYPRE_Int nalu_hypre_ParCSRCommPkgCreate(MPI_Comm comm, NALU_HYPRE_BigInt *col_map_offd,
                                    NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt *col_starts,
                                    NALU_HYPRE_Int num_cols_diag, NALU_HYPRE_Int num_cols_offd,
                                    nalu_hypre_ParCSRCommPkg *comm_pkg);
NALU_HYPRE_Int nalu_hypre_ParCSRCommPkgCreateAndFill ( MPI_Comm comm, NALU_HYPRE_Int num_recvs,
                                             NALU_HYPRE_Int *recv_procs, NALU_HYPRE_Int *recv_vec_starts,
                                             NALU_HYPRE_Int num_sends, NALU_HYPRE_Int *send_procs,
                                             NALU_HYPRE_Int *send_map_starts, NALU_HYPRE_Int *send_map_elmts,
                                             nalu_hypre_ParCSRCommPkg **comm_pkg_ptr );
NALU_HYPRE_Int nalu_hypre_ParCSRCommPkgUpdateVecStarts ( nalu_hypre_ParCSRCommPkg *comm_pkg, nalu_hypre_ParVector *x );
NALU_HYPRE_Int nalu_hypre_MatvecCommPkgCreate ( nalu_hypre_ParCSRMatrix *A );
NALU_HYPRE_Int nalu_hypre_MatvecCommPkgDestroy ( nalu_hypre_ParCSRCommPkg *comm_pkg );
NALU_HYPRE_Int nalu_hypre_BuildCSRMatrixMPIDataType ( NALU_HYPRE_Int num_nonzeros, NALU_HYPRE_Int num_rows,
                                            NALU_HYPRE_Complex *a_data, NALU_HYPRE_Int *a_i, NALU_HYPRE_Int *a_j,
                                            nalu_hypre_MPI_Datatype *csr_matrix_datatype );
NALU_HYPRE_Int nalu_hypre_BuildCSRJDataType ( NALU_HYPRE_Int num_nonzeros, NALU_HYPRE_Complex *a_data, NALU_HYPRE_Int *a_j,
                                    nalu_hypre_MPI_Datatype *csr_jdata_datatype );
NALU_HYPRE_Int nalu_hypre_ParCSRFindExtendCommPkg(MPI_Comm comm, NALU_HYPRE_BigInt global_num_cols,
                                        NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_Int num_cols_diag, NALU_HYPRE_BigInt *col_starts,
                                        nalu_hypre_IJAssumedPart *apart, NALU_HYPRE_Int indices_len, NALU_HYPRE_BigInt *indices,
                                        nalu_hypre_ParCSRCommPkg **extend_comm_pkg);

/* par_csr_matop.c */
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixScale(nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Complex scalar);
void nalu_hypre_ParMatmul_RowSizes ( NALU_HYPRE_MemoryLocation memory_location, NALU_HYPRE_Int **C_diag_i,
                                NALU_HYPRE_Int **C_offd_i, NALU_HYPRE_Int *rownnz_A, NALU_HYPRE_Int *A_diag_i, NALU_HYPRE_Int *A_diag_j,
                                NALU_HYPRE_Int *A_offd_i, NALU_HYPRE_Int *A_offd_j, NALU_HYPRE_Int *B_diag_i, NALU_HYPRE_Int *B_diag_j,
                                NALU_HYPRE_Int *B_offd_i, NALU_HYPRE_Int *B_offd_j, NALU_HYPRE_Int *B_ext_diag_i, NALU_HYPRE_Int *B_ext_diag_j,
                                NALU_HYPRE_Int *B_ext_offd_i, NALU_HYPRE_Int *B_ext_offd_j, NALU_HYPRE_Int *map_B_to_C, NALU_HYPRE_Int *C_diag_size,
                                NALU_HYPRE_Int *C_offd_size, NALU_HYPRE_Int num_rownnz_A, NALU_HYPRE_Int num_rows_diag_A,
                                NALU_HYPRE_Int num_cols_offd_A, NALU_HYPRE_Int  allsquare, NALU_HYPRE_Int num_cols_diag_B,
                                NALU_HYPRE_Int num_cols_offd_B, NALU_HYPRE_Int num_cols_offd_C );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParMatmul ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix *B );
void nalu_hypre_ParCSRMatrixExtractBExt_Arrays ( NALU_HYPRE_Int **pB_ext_i, NALU_HYPRE_BigInt **pB_ext_j,
                                            NALU_HYPRE_Complex **pB_ext_data, NALU_HYPRE_BigInt **pB_ext_row_map, NALU_HYPRE_Int *num_nonzeros, NALU_HYPRE_Int data,
                                            NALU_HYPRE_Int find_row_map, MPI_Comm comm, nalu_hypre_ParCSRCommPkg *comm_pkg, NALU_HYPRE_Int num_cols_B,
                                            NALU_HYPRE_Int num_recvs, NALU_HYPRE_Int num_sends, NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt *row_starts,
                                            NALU_HYPRE_Int *recv_vec_starts, NALU_HYPRE_Int *send_map_starts, NALU_HYPRE_Int *send_map_elmts,
                                            NALU_HYPRE_Int *diag_i, NALU_HYPRE_Int *diag_j, NALU_HYPRE_Int *offd_i, NALU_HYPRE_Int *offd_j,
                                            NALU_HYPRE_BigInt *col_map_offd, NALU_HYPRE_Real *diag_data, NALU_HYPRE_Real *offd_data );
void nalu_hypre_ParCSRMatrixExtractBExt_Arrays_Overlap ( NALU_HYPRE_Int **pB_ext_i, NALU_HYPRE_BigInt **pB_ext_j,
                                                    NALU_HYPRE_Complex **pB_ext_data, NALU_HYPRE_BigInt **pB_ext_row_map, NALU_HYPRE_Int *num_nonzeros, NALU_HYPRE_Int data,
                                                    NALU_HYPRE_Int find_row_map, MPI_Comm comm, nalu_hypre_ParCSRCommPkg *comm_pkg, NALU_HYPRE_Int num_cols_B,
                                                    NALU_HYPRE_Int num_recvs, NALU_HYPRE_Int num_sends, NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt *row_starts,
                                                    NALU_HYPRE_Int *recv_vec_starts, NALU_HYPRE_Int *send_map_starts, NALU_HYPRE_Int *send_map_elmts,
                                                    NALU_HYPRE_Int *diag_i, NALU_HYPRE_Int *diag_j, NALU_HYPRE_Int *offd_i, NALU_HYPRE_Int *offd_j,
                                                    NALU_HYPRE_BigInt *col_map_offd, NALU_HYPRE_Real *diag_data, NALU_HYPRE_Real *offd_data,
                                                    nalu_hypre_ParCSRCommHandle **comm_handle_idx, nalu_hypre_ParCSRCommHandle **comm_handle_data,
                                                    NALU_HYPRE_Int *CF_marker, NALU_HYPRE_Int *CF_marker_offd, NALU_HYPRE_Int skip_fine, NALU_HYPRE_Int skip_same_sign );
nalu_hypre_CSRMatrix *nalu_hypre_ParCSRMatrixExtractBExt ( nalu_hypre_ParCSRMatrix *B, nalu_hypre_ParCSRMatrix *A,
                                                 NALU_HYPRE_Int data );
nalu_hypre_CSRMatrix *nalu_hypre_ParCSRMatrixExtractBExt_Overlap ( nalu_hypre_ParCSRMatrix *B,
                                                         nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int data, nalu_hypre_ParCSRCommHandle **comm_handle_idx,
                                                         nalu_hypre_ParCSRCommHandle **comm_handle_data, NALU_HYPRE_Int *CF_marker, NALU_HYPRE_Int *CF_marker_offd,
                                                         NALU_HYPRE_Int skip_fine, NALU_HYPRE_Int skip_same_sign );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixExtractBExtDeviceInit( nalu_hypre_ParCSRMatrix *B, nalu_hypre_ParCSRMatrix *A,
                                                   NALU_HYPRE_Int want_data, void **request_ptr);
nalu_hypre_CSRMatrix* nalu_hypre_ParCSRMatrixExtractBExtDeviceWait(void *request);
nalu_hypre_CSRMatrix* nalu_hypre_ParCSRMatrixExtractBExtDevice( nalu_hypre_ParCSRMatrix *B, nalu_hypre_ParCSRMatrix *A,
                                                      NALU_HYPRE_Int want_data );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixLocalTranspose( nalu_hypre_ParCSRMatrix  *A );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixTranspose ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix **AT_ptr,
                                        NALU_HYPRE_Int data );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixTransposeHost ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix **AT_ptr,
                                            NALU_HYPRE_Int data );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixTransposeDevice ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix **AT_ptr,
                                              NALU_HYPRE_Int data );
void nalu_hypre_ParCSRMatrixGenSpanningTree ( nalu_hypre_ParCSRMatrix *G_csr, NALU_HYPRE_Int **indices,
                                         NALU_HYPRE_Int G_type );
void nalu_hypre_ParCSRMatrixExtractSubmatrices ( nalu_hypre_ParCSRMatrix *A_csr, NALU_HYPRE_Int *indices2,
                                            nalu_hypre_ParCSRMatrix ***submatrices );
void nalu_hypre_ParCSRMatrixExtractRowSubmatrices ( nalu_hypre_ParCSRMatrix *A_csr, NALU_HYPRE_Int *indices2,
                                               nalu_hypre_ParCSRMatrix ***submatrices );
NALU_HYPRE_Complex nalu_hypre_ParCSRMatrixLocalSumElts ( nalu_hypre_ParCSRMatrix *A );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixAminvDB ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix *B,
                                      NALU_HYPRE_Complex *d, nalu_hypre_ParCSRMatrix **C_ptr );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParTMatmul ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix *B );
NALU_HYPRE_Real nalu_hypre_ParCSRMatrixFnorm( nalu_hypre_ParCSRMatrix *A );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixInfNorm ( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Real *norm );
NALU_HYPRE_Int nalu_hypre_ExchangeExternalRowsInit( nalu_hypre_CSRMatrix *B_ext, nalu_hypre_ParCSRCommPkg *comm_pkg_A,
                                          void **request_ptr);
nalu_hypre_CSRMatrix* nalu_hypre_ExchangeExternalRowsWait(void *vequest);
NALU_HYPRE_Int nalu_hypre_ExchangeExternalRowsDeviceInit( nalu_hypre_CSRMatrix *B_ext,
                                                nalu_hypre_ParCSRCommPkg *comm_pkg_A, NALU_HYPRE_Int want_data, void **request_ptr);
nalu_hypre_CSRMatrix* nalu_hypre_ExchangeExternalRowsDeviceWait(void *vrequest);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFFCDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                                NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S,
                                                nalu_hypre_ParCSRMatrix **A_FC_ptr,
                                                nalu_hypre_ParCSRMatrix **A_FF_ptr );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateFFCFDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                                NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S,
                                                nalu_hypre_ParCSRMatrix **A_CF_ptr,
                                                nalu_hypre_ParCSRMatrix **A_FF_ptr );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGenerateCCCFDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                                NALU_HYPRE_BigInt *cpts_starts, nalu_hypre_ParCSRMatrix *S,
                                                nalu_hypre_ParCSRMatrix **A_CF_ptr,
                                                nalu_hypre_ParCSRMatrix **A_CC_ptr );
nalu_hypre_CSRMatrix* nalu_hypre_ConcatDiagAndOffdDevice(nalu_hypre_ParCSRMatrix *A);
NALU_HYPRE_Int nalu_hypre_ConcatDiagOffdAndExtDevice(nalu_hypre_ParCSRMatrix *A, nalu_hypre_CSRMatrix *E,
                                           nalu_hypre_CSRMatrix **B_ptr, NALU_HYPRE_Int *num_cols_offd_ptr, NALU_HYPRE_BigInt **cols_map_offd_ptr);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGetRowDevice( nalu_hypre_ParCSRMatrix *mat, NALU_HYPRE_BigInt row,
                                          NALU_HYPRE_Int *size, NALU_HYPRE_BigInt **col_ind, NALU_HYPRE_Complex **values );
NALU_HYPRE_Int nalu_hypre_ParCSRDiagScaleVector( nalu_hypre_ParCSRMatrix *par_A, nalu_hypre_ParVector *par_y,
                                       nalu_hypre_ParVector *par_x );
NALU_HYPRE_Int nalu_hypre_ParCSRDiagScaleVectorHost( nalu_hypre_ParCSRMatrix *par_A, nalu_hypre_ParVector *par_y,
                                           nalu_hypre_ParVector *par_x );
NALU_HYPRE_Int nalu_hypre_ParCSRDiagScaleVectorDevice( nalu_hypre_ParCSRMatrix *par_A, nalu_hypre_ParVector *par_y,
                                             nalu_hypre_ParVector *par_x );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixDropSmallEntries( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Real tol,
                                              NALU_HYPRE_Int type);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixDropSmallEntriesHost( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Real tol,
                                                  NALU_HYPRE_Int type);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixDropSmallEntriesDevice( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Complex tol,
                                                    NALU_HYPRE_Int type);

NALU_HYPRE_Int nalu_hypre_ParCSRCommPkgCreateMatrixE( nalu_hypre_ParCSRCommPkg *comm_pkg, NALU_HYPRE_Int local_ncols );

#ifdef NALU_HYPRE_USING_PERSISTENT_COMM
nalu_hypre_ParCSRPersistentCommHandle* nalu_hypre_ParCSRPersistentCommHandleCreate(NALU_HYPRE_Int job,
                                                                         nalu_hypre_ParCSRCommPkg *comm_pkg);
nalu_hypre_ParCSRPersistentCommHandle* nalu_hypre_ParCSRCommPkgGetPersistentCommHandle(NALU_HYPRE_Int job,
                                                                             nalu_hypre_ParCSRCommPkg *comm_pkg);
void nalu_hypre_ParCSRPersistentCommHandleDestroy(nalu_hypre_ParCSRPersistentCommHandle *comm_handle);
void nalu_hypre_ParCSRPersistentCommHandleStart(nalu_hypre_ParCSRPersistentCommHandle *comm_handle,
                                           NALU_HYPRE_MemoryLocation send_memory_location, void *send_data);
void nalu_hypre_ParCSRPersistentCommHandleWait(nalu_hypre_ParCSRPersistentCommHandle *comm_handle,
                                          NALU_HYPRE_MemoryLocation recv_memory_location, void *recv_data);
#endif

NALU_HYPRE_Int nalu_hypre_ParcsrGetExternalRowsInit( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int indices_len,
                                           NALU_HYPRE_BigInt *indices, nalu_hypre_ParCSRCommPkg *comm_pkg, NALU_HYPRE_Int want_data, void **request_ptr);
nalu_hypre_CSRMatrix* nalu_hypre_ParcsrGetExternalRowsWait(void *vrequest);
NALU_HYPRE_Int nalu_hypre_ParcsrGetExternalRowsDeviceInit( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int indices_len,
                                                 NALU_HYPRE_BigInt *indices, nalu_hypre_ParCSRCommPkg *comm_pkg, NALU_HYPRE_Int want_data, void **request_ptr);
nalu_hypre_CSRMatrix* nalu_hypre_ParcsrGetExternalRowsDeviceWait(void *vrequest);

NALU_HYPRE_Int nalu_hypre_ParvecBdiagInvScal( nalu_hypre_ParVector *b, NALU_HYPRE_Int blockSize, nalu_hypre_ParVector **bs,
                                    nalu_hypre_ParCSRMatrix *A);

NALU_HYPRE_Int nalu_hypre_ParcsrBdiagInvScal( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int blockSize,
                                    nalu_hypre_ParCSRMatrix **As);

NALU_HYPRE_Int nalu_hypre_ParCSRMatrixExtractSubmatrixFC( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int *CF_marker,
                                                NALU_HYPRE_BigInt *cpts_starts, const char *job,
                                                nalu_hypre_ParCSRMatrix **B_ptr,
                                                NALU_HYPRE_Real strength_thresh);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixDiagScale( nalu_hypre_ParCSRMatrix *par_A, nalu_hypre_ParVector *par_ld,
                                       nalu_hypre_ParVector *par_rd );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixReorder ( nalu_hypre_ParCSRMatrix *A );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixAdd( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Complex beta,
                                 nalu_hypre_ParCSRMatrix *B, nalu_hypre_ParCSRMatrix **Cout);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixAddHost( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                     NALU_HYPRE_Complex beta, nalu_hypre_ParCSRMatrix *B,
                                     nalu_hypre_ParCSRMatrix **Cout);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixAddDevice( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                       NALU_HYPRE_Complex beta, nalu_hypre_ParCSRMatrix *B,
                                       nalu_hypre_ParCSRMatrix **Cout);

/* par_csr_matop_device.c */
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixDiagScaleDevice ( nalu_hypre_ParCSRMatrix *par_A, nalu_hypre_ParVector *par_ld,
                                              nalu_hypre_ParVector *par_rd );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixCompressOffdMapDevice(nalu_hypre_ParCSRMatrix *A);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixCompressOffdMap(nalu_hypre_ParCSRMatrix *A);

/* par_csr_matop_marked.c */
void nalu_hypre_ParMatmul_RowSizes_Marked ( NALU_HYPRE_Int **C_diag_i, NALU_HYPRE_Int **C_offd_i,
                                       NALU_HYPRE_Int **B_marker, NALU_HYPRE_Int *A_diag_i,
                                       NALU_HYPRE_Int *A_diag_j, NALU_HYPRE_Int *A_offd_i,
                                       NALU_HYPRE_Int *A_offd_j, NALU_HYPRE_Int *B_diag_i,
                                       NALU_HYPRE_Int *B_diag_j, NALU_HYPRE_Int *B_offd_i,
                                       NALU_HYPRE_Int *B_offd_j, NALU_HYPRE_Int *B_ext_diag_i,
                                       NALU_HYPRE_Int *B_ext_diag_j, NALU_HYPRE_Int *B_ext_offd_i,
                                       NALU_HYPRE_Int *B_ext_offd_j, NALU_HYPRE_Int *map_B_to_C,
                                       NALU_HYPRE_Int *C_diag_size, NALU_HYPRE_Int *C_offd_size,
                                       NALU_HYPRE_Int num_rows_diag_A, NALU_HYPRE_Int num_cols_offd_A,
                                       NALU_HYPRE_Int allsquare, NALU_HYPRE_Int num_cols_diag_B,
                                       NALU_HYPRE_Int num_cols_offd_B, NALU_HYPRE_Int num_cols_offd_C,
                                       NALU_HYPRE_Int *CF_marker, NALU_HYPRE_Int *dof_func,
                                       NALU_HYPRE_Int *dof_func_offd );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParMatmul_FC ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix *P,
                                         NALU_HYPRE_Int *CF_marker, NALU_HYPRE_Int *dof_func,
                                         NALU_HYPRE_Int *dof_func_offd );
void nalu_hypre_ParMatScaleDiagInv_F ( nalu_hypre_ParCSRMatrix *C, nalu_hypre_ParCSRMatrix *A,
                                  NALU_HYPRE_Complex weight, NALU_HYPRE_Int *CF_marker );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParMatMinus_F ( nalu_hypre_ParCSRMatrix *P, nalu_hypre_ParCSRMatrix *C,
                                          NALU_HYPRE_Int *CF_marker );
void nalu_hypre_ParCSRMatrixZero_F ( nalu_hypre_ParCSRMatrix *P, NALU_HYPRE_Int *CF_marker );
void nalu_hypre_ParCSRMatrixCopy_C ( nalu_hypre_ParCSRMatrix *P, nalu_hypre_ParCSRMatrix *C,
                                NALU_HYPRE_Int *CF_marker );
void nalu_hypre_ParCSRMatrixDropEntries ( nalu_hypre_ParCSRMatrix *C, nalu_hypre_ParCSRMatrix *P,
                                     NALU_HYPRE_Int *CF_marker );

/* par_csr_matrix.c */
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatrixCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_num_rows,
                                               NALU_HYPRE_BigInt global_num_cols, NALU_HYPRE_BigInt *row_starts_in, NALU_HYPRE_BigInt *col_starts_in,
                                               NALU_HYPRE_Int num_cols_offd, NALU_HYPRE_Int num_nonzeros_diag, NALU_HYPRE_Int num_nonzeros_offd );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixDestroy ( nalu_hypre_ParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixInitialize_v2( nalu_hypre_ParCSRMatrix *matrix,
                                           NALU_HYPRE_MemoryLocation memory_location );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixInitialize ( nalu_hypre_ParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixSetNumNonzeros ( nalu_hypre_ParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixSetDNumNonzeros ( nalu_hypre_ParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixSetNumRownnz ( nalu_hypre_ParCSRMatrix *matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixSetDataOwner ( nalu_hypre_ParCSRMatrix *matrix, NALU_HYPRE_Int owns_data );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixSetPatternOnly( nalu_hypre_ParCSRMatrix *matrix, NALU_HYPRE_Int pattern_only);
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatrixRead ( MPI_Comm comm, const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixPrint ( nalu_hypre_ParCSRMatrix *matrix, const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixPrintIJ ( const nalu_hypre_ParCSRMatrix *matrix, const NALU_HYPRE_Int base_i,
                                      const NALU_HYPRE_Int base_j, const char *filename );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixReadIJ ( MPI_Comm comm, const char *filename, NALU_HYPRE_Int *base_i_ptr,
                                     NALU_HYPRE_Int *base_j_ptr, nalu_hypre_ParCSRMatrix **matrix_ptr );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGetLocalRange ( nalu_hypre_ParCSRMatrix *matrix, NALU_HYPRE_BigInt *row_start,
                                            NALU_HYPRE_BigInt *row_end, NALU_HYPRE_BigInt *col_start, NALU_HYPRE_BigInt *col_end );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixGetRow ( nalu_hypre_ParCSRMatrix *mat, NALU_HYPRE_BigInt row, NALU_HYPRE_Int *size,
                                     NALU_HYPRE_BigInt **col_ind, NALU_HYPRE_Complex **values );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixRestoreRow ( nalu_hypre_ParCSRMatrix *matrix, NALU_HYPRE_BigInt row,
                                         NALU_HYPRE_Int *size, NALU_HYPRE_BigInt **col_ind, NALU_HYPRE_Complex **values );
nalu_hypre_ParCSRMatrix *nalu_hypre_CSRMatrixToParCSRMatrix ( MPI_Comm comm, nalu_hypre_CSRMatrix *A,
                                                    NALU_HYPRE_BigInt *row_starts, NALU_HYPRE_BigInt *col_starts );
NALU_HYPRE_Int GenerateDiagAndOffd ( nalu_hypre_CSRMatrix *A, nalu_hypre_ParCSRMatrix *matrix,
                                NALU_HYPRE_BigInt first_col_diag, NALU_HYPRE_BigInt last_col_diag );
nalu_hypre_CSRMatrix *nalu_hypre_MergeDiagAndOffd ( nalu_hypre_ParCSRMatrix *par_matrix );
nalu_hypre_CSRMatrix *nalu_hypre_MergeDiagAndOffdDevice ( nalu_hypre_ParCSRMatrix *par_matrix );
nalu_hypre_CSRMatrix *nalu_hypre_ParCSRMatrixToCSRMatrixAll ( nalu_hypre_ParCSRMatrix *par_matrix );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixCopy ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix *B,
                                   NALU_HYPRE_Int copy_data );
NALU_HYPRE_Int nalu_hypre_FillResponseParToCSRMatrix ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                             NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                             NALU_HYPRE_Int *response_message_size );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatrixUnion ( nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParCSRMatrix *B );
nalu_hypre_ParCSRMatrix* nalu_hypre_ParCSRMatrixClone ( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int copy_data );
#define nalu_hypre_ParCSRMatrixCompleteClone(A) nalu_hypre_ParCSRMatrixClone(A,0)
nalu_hypre_ParCSRMatrix* nalu_hypre_ParCSRMatrixClone_v2 ( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Int copy_data,
                                                 NALU_HYPRE_MemoryLocation memory_location );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixTruncate(nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Real tol,
                                     NALU_HYPRE_Int max_row_elmts, NALU_HYPRE_Int rescale,
                                     NALU_HYPRE_Int nrm_type);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMigrate(nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_MemoryLocation memory_location);
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixSetConstantValues( nalu_hypre_ParCSRMatrix *A, NALU_HYPRE_Complex value );
void nalu_hypre_ParCSRMatrixCopyColMapOffdToDevice(nalu_hypre_ParCSRMatrix *A);
void nalu_hypre_ParCSRMatrixCopyColMapOffdToHost(nalu_hypre_ParCSRMatrix *A);

/* par_csr_matvec.c */
// y = alpha*A*x + beta*b
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvecOutOfPlace ( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                               nalu_hypre_ParVector *x, NALU_HYPRE_Complex beta,
                                               nalu_hypre_ParVector *b, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvecOutOfPlaceDevice ( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                                     nalu_hypre_ParVector *x, NALU_HYPRE_Complex beta,
                                                     nalu_hypre_ParVector *b, nalu_hypre_ParVector *y );
// y = alpha*A*x + beta*y
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvec ( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A, nalu_hypre_ParVector *x,
                                     NALU_HYPRE_Complex beta, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvecT ( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                      nalu_hypre_ParVector *x, NALU_HYPRE_Complex beta, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvecTDevice ( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                            nalu_hypre_ParVector *x, NALU_HYPRE_Complex beta,
                                            nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvecT_unpack( nalu_hypre_ParCSRCommPkg *comm_pkg, NALU_HYPRE_Int num_cols,
                                            NALU_HYPRE_Complex *recv_data, NALU_HYPRE_Complex *local_data );
NALU_HYPRE_Int nalu_hypre_ParCSRMatrixMatvec_FF ( NALU_HYPRE_Complex alpha, nalu_hypre_ParCSRMatrix *A,
                                        nalu_hypre_ParVector *x, NALU_HYPRE_Complex beta, nalu_hypre_ParVector *y,
                                        NALU_HYPRE_Int *CF_marker, NALU_HYPRE_Int fpt );

/* par_csr_triplemat.c */
NALU_HYPRE_Int nalu_hypre_ParCSRTMatMatPartialAddDevice( nalu_hypre_ParCSRCommPkg *comm_pkg_A,
                                               NALU_HYPRE_Int num_cols_A, NALU_HYPRE_Int num_cols_B, NALU_HYPRE_BigInt first_col_diag_B,
                                               NALU_HYPRE_BigInt last_col_diag_B, NALU_HYPRE_Int num_cols_offd_B, NALU_HYPRE_BigInt *col_map_offd_B,
                                               NALU_HYPRE_Int local_nnz_Cbar, nalu_hypre_CSRMatrix *Cbar, nalu_hypre_CSRMatrix *Cext,
                                               nalu_hypre_CSRMatrix **C_diag_ptr, nalu_hypre_CSRMatrix **C_offd_ptr, NALU_HYPRE_Int *num_cols_offd_C_ptr,
                                               NALU_HYPRE_BigInt **col_map_offd_C_ptr );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatMat( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatMatHost( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatMatDevice( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRTMatMatKTHost( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B,
                                               NALU_HYPRE_Int keep_transpose);
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRTMatMatKTDevice( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B,
                                                 NALU_HYPRE_Int keep_transpose);
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRTMatMatKT( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B,
                                           NALU_HYPRE_Int keep_transpose);
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRTMatMat( nalu_hypre_ParCSRMatrix  *A, nalu_hypre_ParCSRMatrix  *B);
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatrixRAPKT( nalu_hypre_ParCSRMatrix *R, nalu_hypre_ParCSRMatrix  *A,
                                             nalu_hypre_ParCSRMatrix  *P, NALU_HYPRE_Int keepTranspose );
nalu_hypre_ParCSRMatrix *nalu_hypre_ParCSRMatrixRAP( nalu_hypre_ParCSRMatrix *R, nalu_hypre_ParCSRMatrix  *A,
                                           nalu_hypre_ParCSRMatrix  *P );
nalu_hypre_ParCSRMatrix* nalu_hypre_ParCSRMatrixRAPKTDevice( nalu_hypre_ParCSRMatrix *R, nalu_hypre_ParCSRMatrix *A,
                                                   nalu_hypre_ParCSRMatrix *P, NALU_HYPRE_Int keep_transpose );
nalu_hypre_ParCSRMatrix* nalu_hypre_ParCSRMatrixRAPKTHost( nalu_hypre_ParCSRMatrix *R, nalu_hypre_ParCSRMatrix *A,
                                                 nalu_hypre_ParCSRMatrix *P, NALU_HYPRE_Int keep_transpose );

/* par_make_system.c */
NALU_HYPRE_ParCSR_System_Problem *NALU_HYPRE_Generate2DSystem ( NALU_HYPRE_ParCSRMatrix H_L1,
                                                      NALU_HYPRE_ParCSRMatrix H_L2, NALU_HYPRE_ParVector H_b1, NALU_HYPRE_ParVector H_b2, NALU_HYPRE_ParVector H_x1,
                                                      NALU_HYPRE_ParVector H_x2, NALU_HYPRE_Complex *M_vals );
NALU_HYPRE_Int NALU_HYPRE_Destroy2DSystem ( NALU_HYPRE_ParCSR_System_Problem *sys_prob );

/* par_vector.c */
nalu_hypre_ParVector *nalu_hypre_ParVectorCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_size,
                                         NALU_HYPRE_BigInt *partitioning_in );
nalu_hypre_ParVector *nalu_hypre_ParMultiVectorCreate ( MPI_Comm comm, NALU_HYPRE_BigInt global_size,
                                              NALU_HYPRE_BigInt *partitioning, NALU_HYPRE_Int num_vectors );
NALU_HYPRE_Int nalu_hypre_ParVectorDestroy ( nalu_hypre_ParVector *vector );
NALU_HYPRE_Int nalu_hypre_ParVectorInitialize ( nalu_hypre_ParVector *vector );
NALU_HYPRE_Int nalu_hypre_ParVectorInitialize_v2( nalu_hypre_ParVector *vector,
                                        NALU_HYPRE_MemoryLocation memory_location );
NALU_HYPRE_Int nalu_hypre_ParVectorSetDataOwner ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int owns_data );
NALU_HYPRE_Int nalu_hypre_ParVectorSetLocalSize ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int local_size );
NALU_HYPRE_Int nalu_hypre_ParVectorSetNumVectors ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int num_vectors );
NALU_HYPRE_Int nalu_hypre_ParVectorSetComponent ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int component );
NALU_HYPRE_Int nalu_hypre_ParVectorResize ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int num_vectors );
nalu_hypre_ParVector *nalu_hypre_ParVectorRead ( MPI_Comm comm, const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParVectorPrint ( nalu_hypre_ParVector *vector, const char *file_name );
NALU_HYPRE_Int nalu_hypre_ParVectorSetConstantValues ( nalu_hypre_ParVector *v, NALU_HYPRE_Complex value );
NALU_HYPRE_Int nalu_hypre_ParVectorSetZeros( nalu_hypre_ParVector *v );
NALU_HYPRE_Int nalu_hypre_ParVectorSetRandomValues ( nalu_hypre_ParVector *v, NALU_HYPRE_Int seed );
NALU_HYPRE_Int nalu_hypre_ParVectorCopy ( nalu_hypre_ParVector *x, nalu_hypre_ParVector *y );
nalu_hypre_ParVector *nalu_hypre_ParVectorCloneShallow ( nalu_hypre_ParVector *x );
nalu_hypre_ParVector *nalu_hypre_ParVectorCloneDeep_v2( nalu_hypre_ParVector *x,
                                              NALU_HYPRE_MemoryLocation memory_location );
NALU_HYPRE_Int nalu_hypre_ParVectorMigrate(nalu_hypre_ParVector *x, NALU_HYPRE_MemoryLocation memory_location);
NALU_HYPRE_Int nalu_hypre_ParVectorScale ( NALU_HYPRE_Complex alpha, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParVectorAxpy ( NALU_HYPRE_Complex alpha, nalu_hypre_ParVector *x, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParVectorAxpyz ( NALU_HYPRE_Complex alpha, nalu_hypre_ParVector *x,
                                 NALU_HYPRE_Complex beta, nalu_hypre_ParVector *y,
                                 nalu_hypre_ParVector *z );
NALU_HYPRE_Int nalu_hypre_ParVectorMassAxpy ( NALU_HYPRE_Complex *alpha, nalu_hypre_ParVector **x, nalu_hypre_ParVector *y,
                                    NALU_HYPRE_Int k, NALU_HYPRE_Int unroll);
NALU_HYPRE_Real nalu_hypre_ParVectorInnerProd ( nalu_hypre_ParVector *x, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParVectorMassInnerProd ( nalu_hypre_ParVector *x, nalu_hypre_ParVector **y, NALU_HYPRE_Int k,
                                         NALU_HYPRE_Int unroll, NALU_HYPRE_Real *prod );
NALU_HYPRE_Int nalu_hypre_ParVectorMassDotpTwo ( nalu_hypre_ParVector *x, nalu_hypre_ParVector *y, nalu_hypre_ParVector **z,
                                       NALU_HYPRE_Int k, NALU_HYPRE_Int unroll, NALU_HYPRE_Real *prod_x, NALU_HYPRE_Real *prod_y );
nalu_hypre_ParVector *nalu_hypre_VectorToParVector ( MPI_Comm comm, nalu_hypre_Vector *v,
                                           NALU_HYPRE_BigInt *vec_starts );
nalu_hypre_Vector *nalu_hypre_ParVectorToVectorAll ( nalu_hypre_ParVector *par_v );
NALU_HYPRE_Int nalu_hypre_ParVectorPrintIJ ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int base_j,
                                   const char *filename );
NALU_HYPRE_Int nalu_hypre_ParVectorReadIJ ( MPI_Comm comm, const char *filename, NALU_HYPRE_Int *base_j_ptr,
                                  nalu_hypre_ParVector **vector_ptr );
NALU_HYPRE_Int nalu_hypre_FillResponseParToVectorAll ( void *p_recv_contact_buf, NALU_HYPRE_Int contact_size,
                                             NALU_HYPRE_Int contact_proc, void *ro, MPI_Comm comm, void **p_send_response_buf,
                                             NALU_HYPRE_Int *response_message_size );
NALU_HYPRE_Complex nalu_hypre_ParVectorLocalSumElts ( nalu_hypre_ParVector *vector );
NALU_HYPRE_Int nalu_hypre_ParVectorGetValues ( nalu_hypre_ParVector *vector, NALU_HYPRE_Int num_values,
                                     NALU_HYPRE_BigInt *indices, NALU_HYPRE_Complex *values);
NALU_HYPRE_Int nalu_hypre_ParVectorGetValues2( nalu_hypre_ParVector *vector, NALU_HYPRE_Int num_values,
                                     NALU_HYPRE_BigInt *indices, NALU_HYPRE_BigInt base, NALU_HYPRE_Complex *values );
NALU_HYPRE_Int nalu_hypre_ParVectorGetValuesHost(nalu_hypre_ParVector *vector, NALU_HYPRE_Int num_values,
                                       NALU_HYPRE_BigInt *indices, NALU_HYPRE_BigInt base, NALU_HYPRE_Complex *values);
NALU_HYPRE_Int nalu_hypre_ParVectorElmdivpy( nalu_hypre_ParVector *x, nalu_hypre_ParVector *b, nalu_hypre_ParVector *y );
NALU_HYPRE_Int nalu_hypre_ParVectorElmdivpyMarked( nalu_hypre_ParVector *x, nalu_hypre_ParVector *b,
                                         nalu_hypre_ParVector *y, NALU_HYPRE_Int *marker,
                                         NALU_HYPRE_Int marker_val );
/* par_vector_device.c */
NALU_HYPRE_Int nalu_hypre_ParVectorGetValuesDevice(nalu_hypre_ParVector *vector, NALU_HYPRE_Int num_values,
                                         NALU_HYPRE_BigInt *indices, NALU_HYPRE_BigInt base,
                                         NALU_HYPRE_Complex *values);

#ifdef __cplusplus
}
#endif

#endif

